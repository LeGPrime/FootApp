// pages/api/favorites.ts - VERSION AVEC DEBUGGING COMPLET
import { NextApiRequest, NextApiResponse } from 'next'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '../../lib/auth'
import { prisma } from '../../lib/prisma'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  console.log('üöÄ API Favorites appel√©e')
  console.log('Method:', req.method)
  console.log('Body:', req.body)

  try {
    const session = await getServerSession(req, res, authOptions)
    console.log('Session:', session ? 'OK' : 'NONE')

    if (!session?.user?.id) {
      console.log('‚ùå Pas de session')
      return res.status(401).json({ error: 'Non connect√©' })
    }

    console.log('‚úÖ Utilisateur connect√©:', session.user.id)

    if (req.method === 'GET') {
      console.log('üìñ GET Favorites')
      
      try {
        // Test simple : v√©rifier si la table existe
        const testQuery = await prisma.$queryRaw`SELECT 1 as test`
        console.log('‚úÖ Base de donn√©es accessible:', testQuery)

        // Test : v√©rifier si le mod√®le Favorite existe
        const favoriteCount = await prisma.favorite.count()
        console.log('‚úÖ Mod√®le Favorite accessible, total:', favoriteCount)

        // R√©cup√©rer les favoris
        const favorites = await prisma.favorite.findMany({
          where: {
            userId: session.user.id
          },
          take: 10 // Limite pour le debug
        })

        console.log('‚úÖ Favoris trouv√©s:', favorites.length)

        res.status(200).json({
          favoriteMatches: [],
          favoritePlayers: [],
          counts: { matches: 0, players: 0 },
          debug: {
            totalFavorites: favorites.length,
            userId: session.user.id
          }
        })

      } catch (dbError: any) {
        console.error('‚ùå Erreur base de donn√©es:', dbError)
        return res.status(500).json({
          error: 'Erreur base de donn√©es',
          details: dbError.message,
          code: dbError.code,
          favoriteMatches: [],
          favoritePlayers: [],
          counts: { matches: 0, players: 0 }
        })
      }

    } else if (req.method === 'POST') {
      console.log('‚úèÔ∏è POST Favorites')
      
      const { action, type, matchId, playerId } = req.body
      console.log('Action data:', { action, type, matchId, playerId })

      if (!action || !type) {
        console.log('‚ùå Donn√©es manquantes')
        return res.status(400).json({ error: 'Action et type requis' })
      }

      try {
        if (action === 'add') {
          console.log('‚ûï Ajout favori')

          if (type === 'MATCH' && matchId) {
            console.log('üéØ Ajout match favori:', matchId)

            // V√©rifier si le match existe
            const match = await prisma.match.findUnique({
              where: { id: matchId }
            })

            if (!match) {
              console.log('‚ùå Match non trouv√©:', matchId)
              return res.status(404).json({ error: 'Match non trouv√©' })
            }

            console.log('‚úÖ Match trouv√©:', match.homeTeam, 'vs', match.awayTeam)

            // Cr√©er le favori
            const favorite = await prisma.favorite.create({
              data: {
                userId: session.user.id,
                type: 'MATCH',
                matchId: matchId
              }
            })

            console.log('‚úÖ Favori cr√©√©:', favorite.id)
            res.status(200).json({ success: true, message: 'Match ajout√© aux favoris', favoriteId: favorite.id })

          } else if (type === 'PLAYER' && playerId) {
            console.log('üë§ Ajout joueur favori:', playerId)

            // V√©rifier si le joueur existe
            const player = await prisma.player.findUnique({
              where: { id: playerId }
            })

            if (!player) {
              console.log('‚ùå Joueur non trouv√©:', playerId)
              return res.status(404).json({ error: 'Joueur non trouv√©' })
            }

            console.log('‚úÖ Joueur trouv√©:', player.name)

            // Cr√©er le favori
            const favorite = await prisma.favorite.create({
              data: {
                userId: session.user.id,
                type: 'PLAYER',
                playerId: playerId
              }
            })

            console.log('‚úÖ Favori cr√©√©:', favorite.id)
            res.status(200).json({ success: true, message: 'Joueur ajout√© aux favoris', favoriteId: favorite.id })

          } else {
            console.log('‚ùå Donn√©es invalides pour ajout')
            return res.status(400).json({ error: 'Donn√©es invalides' })
          }

        } else if (action === 'remove') {
          console.log('‚ûñ Suppression favori')

          if (type === 'MATCH' && matchId) {
            const deleted = await prisma.favorite.deleteMany({
              where: {
                userId: session.user.id,
                type: 'MATCH',
                matchId: matchId
              }
            })
            console.log('‚úÖ Matchs supprim√©s:', deleted.count)
          } else if (type === 'PLAYER' && playerId) {
            const deleted = await prisma.favorite.deleteMany({
              where: {
                userId: session.user.id,
                type: 'PLAYER',
                playerId: playerId
              }
            })
            console.log('‚úÖ Joueurs supprim√©s:', deleted.count)
          }

          res.status(200).json({ success: true, message: 'Favori supprim√©' })

        } else {
          console.log('‚ùå Action non support√©e:', action)
          return res.status(400).json({ error: 'Action non support√©e' })
        }

      } catch (actionError: any) {
        console.error('‚ùå Erreur action:', actionError)
        return res.status(500).json({
          error: 'Erreur lors de l\'action',
          details: actionError.message,
          code: actionError.code,
          action,
          type
        })
      }

    } else {
      console.log('‚ùå M√©thode non autoris√©e:', req.method)
      res.setHeader('Allow', ['GET', 'POST'])
      res.status(405).end(`Method ${req.method} Not Allowed`)
    }

  } catch (globalError: any) {
    console.error('üí• ERREUR GLOBALE API FAVORITES:', globalError)
    console.error('Stack:', globalError.stack)
    
    res.status(500).json({
      error: 'Erreur serveur globale',
      details: globalError.message,
      code: globalError.code || 'UNKNOWN'
    })
  }
}