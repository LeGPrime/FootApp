// pages/api/new-football-import.ts
// üèÜ API ENDPOINT POUR NOUVEAUX IMPORTS FOOTBALL 2025

import { NextApiRequest, NextApiResponse } from 'next'
import { getServerSession } from 'next-auth/next'
import { authOptions } from '../../lib/auth'
import { newFootballAPI } from '../../lib/new-football-api'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const session = await getServerSession(req, res, authOptions)

  if (!session?.user?.id) {
    return res.status(401).json({ error: 'Connexion requise' })
  }

  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' })
  }

  const { action, competitions } = req.body

  try {
    console.log(`üöÄ Nouveau import football: ${action}`)
    
    if (action === 'test_connection') {
      // üîç TESTER LA CONNEXION API
      console.log('üîç Test de connexion au nouveau syst√®me...')
      
      const connectionTest = await newFootballAPI.testConnection()
      
      return res.status(200).json({
        success: connectionTest.success,
        action: 'test_connection',
        message: connectionTest.message,
        details: connectionTest.details,
        recommendations: connectionTest.success 
          ? [
              '‚úÖ API Football connect√©e avec abonnement upgrad√©',
              'üöÄ Pr√™t pour import complet des 15+ comp√©titions',
              '‚ö° 300 requ√™tes/minute disponibles',
              'üìä Import optimis√© pour les 3 derniers mois'
            ]
          : [
              '‚ùå V√©rifiez votre RAPIDAPI_KEY dans .env',
              'üí≥ V√©rifiez que votre abonnement est actif',
              'üîë Assurez-vous d\'√™tre abonn√© √† API-Football sur RapidAPI'
            ]
      })
    }

    if (action === 'import_all_competitions') {
      // üèÜ IMPORT COMPLET TOUTES LES COMP√âTITIONS
      console.log('üèÜ IMPORT COMPLET - Toutes les comp√©titions football 2025')
      console.log('üéØ Cibles: TOP 5 Europe + Internationales + Coupes + √âquipes nationales')
      
      const result = await newFootballAPI.importAllCompetitions()
      
      return res.status(200).json({
        success: true,
        action: 'import_all_competitions',
        message: 'üéâ IMPORT COMPLET TERMIN√â !',
        result,
        summary: {
          totalMatches: result.totalImported,
          competitions: result.competitionsProcessed,
          duration: `${Math.floor(result.duration / 60)}min ${result.duration % 60}s`,
          topMatches: result.summary.topMatches,
          dateRange: result.summary.dateRange,
          breakdown: {
            imported: result.totalImported,
            skipped: result.totalSkipped,
            errors: result.totalErrors
          }
        },
        details: {
          byCompetition: result.byCompetition.map(comp => ({
            name: comp.competition,
            imported: comp.imported,
            examples: comp.examples.slice(0, 2)
          }))
        },
        nextSteps: [
          '‚úÖ V√©rifie la page d\'accueil pour voir les nouveaux matchs',
          'üéØ Teste la notation de quelques √©v√©nements',
          'üìä Explore les diff√©rentes comp√©titions',
          '‚è∞ Configure ensuite l\'automatisation quotidienne'
        ]
      })
    }

    if (action === 'import_specific_competitions' && competitions) {
      // üéØ IMPORT COMP√âTITIONS SP√âCIFIQUES
      console.log('üéØ Import de comp√©titions sp√©cifiques:', competitions)
      
      // Pour l'instant, utilise l'import complet
      // Plus tard on peut ajouter la logique pour des comp√©titions sp√©cifiques
      const result = await newFootballAPI.importAllCompetitions()
      
      return res.status(200).json({
        success: true,
        action: 'import_specific_competitions',
        message: `üéØ Import des comp√©titions s√©lectionn√©es termin√©`,
        result: {
          imported: result.totalImported,
          competitions: competitions.length,
          details: result.byCompetition
        }
      })
    }

    if (action === 'import_daily') {
      // üìÖ IMPORT QUOTIDIEN (pour tester le cron)
      console.log('üìÖ Test import quotidien...')
      
      const result = await newFootballAPI.importDailyMatches()
      
      return res.status(200).json({
        success: true,
        action: 'import_daily',
        message: 'üìÖ Import quotidien termin√©',
        result: {
          imported: result.totalImported,
          skipped: result.totalSkipped,
          newMatches: result.byCompetition.filter(c => c.imported > 0)
        }
      })
    }

    return res.status(400).json({
      error: 'Action non support√©e',
      availableActions: [
        'test_connection',
        'import_all_competitions', 
        'import_specific_competitions',
        'import_daily'
      ],
      note: 'Utilise import_all_competitions pour d√©marrer'
    })

  } catch (error) {
    console.error('‚ùå Erreur nouveau import football:', error)
    
    // Diagnostic d'erreur avanc√©
    let errorMessage = 'Erreur inconnue'
    let troubleshooting = []
    
    if (error instanceof Error) {
      if (error.message.includes('fetch')) {
        errorMessage = 'Erreur de connexion √† l\'API Football'
        troubleshooting = [
          'V√©rifiez votre connexion internet',
          'V√©rifiez que RAPIDAPI_KEY est d√©finie dans .env',
          'V√©rifiez votre abonnement RapidAPI (doit √™tre upgrad√©)',
          'L\'API Football doit √™tre active sur votre compte RapidAPI'
        ]
      } else if (error.message.includes('429')) {
        errorMessage = 'Quota API d√©pass√© malgr√© l\'upgrade'
        troubleshooting = [
          'Votre abonnement est peut-√™tre insuffisant',
          'Attendez quelques minutes et r√©essayez',
          'V√©rifiez votre plan sur RapidAPI',
          'Contactez le support RapidAPI si le probl√®me persiste'
        ]
      } else if (error.message.includes('401')) {
        errorMessage = 'Cl√© API invalide ou abonnement inactif'
        troubleshooting = [
          'V√©rifiez votre RAPIDAPI_KEY dans .env',
          'V√©rifiez que votre abonnement API Football est actif',
          'R√©g√©n√©rez votre cl√© RapidAPI si n√©cessaire',
          'Assurez-vous d\'√™tre abonn√© √† "API-Football" pas "Football-Data"'
        ]
      } else if (error.message.includes('Prisma') || error.message.includes('database')) {
        errorMessage = 'Erreur base de donn√©es'
        troubleshooting = [
          'V√©rifiez que PostgreSQL est d√©marr√©',
          'V√©rifiez DATABASE_URL dans .env',
          'Essayez: npx prisma db push',
          'V√©rifiez l\'espace disque disponible'
        ]
      } else {
        errorMessage = error.message
        troubleshooting = [
          'V√©rifiez les logs du serveur pour plus de d√©tails',
          'Assurez-vous que tous les services sont d√©marr√©s',
          'Red√©marrez le serveur Next.js si n√©cessaire'
        ]
      }
    }
    
    res.status(500).json({
      success: false,
      error: errorMessage,
      originalError: error instanceof Error ? error.message : 'Erreur inconnue',
      action,
      troubleshooting,
      help: {
        documentation: 'Consultez la documentation API-Football sur RapidAPI',
        support: 'Contactez le support RapidAPI si probl√®me de quota',
        configuration: 'V√©rifiez votre fichier .env et votre abonnement',
        apiStatus: 'V√©rifiez le statut de l\'API sur status.rapidapi.com'
      },
      nextSteps: [
        '1. V√©rifiez votre connexion et configuration',
        '2. Testez d\'abord test_connection',
        '3. Si √ßa marche, relancez import_all_competitions',
        '4. Consultez les logs pour plus de d√©tails'
      ]
    })
  }
}