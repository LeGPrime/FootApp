// prisma/schema.prisma - VERSION COMPLÃˆTE avec rivalitÃ©s personnelles

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== AUTHENTIFICATION =====

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// ===== UTILISATEURS =====

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String             @unique
  emailVerified       DateTime?
  image               String?
  username            String?            @unique
  bio                 String?
  password            String?
  createdAt           DateTime           @default(now())
  location            String?            @db.VarChar(255)
  favorite_club       String?            @db.VarChar(255)
  
  // Relations authentification
  accounts            Account[]
  sessions            Session[]
  
  // Relations amitiÃ©
  receivedFriendships Friendship[]       @relation("UserReceivedFriendships")
  sentFriendships     Friendship[]       @relation("UserSentFriendships")
  
  // Relations notifications
  notifications       Notification[]
  
  // Relations matchs professionnels
  playerRatings       PlayerRating[]
  ratings             Rating[]
  replyLikes          ReplyLike[]
  reviewLikes         ReviewLike[]
  reviewReplies       ReviewReply[]
  manOfMatchVotes     ManOfMatchVote[]
  
  // Relations Ã©quipes
  team_follows        TeamFollow[]
  
  // Relations profil avancÃ©
  user_profiles       user_profiles?
  
  // Relations listes de matchs
  matchLists          MatchList[]
  matchListLikes      MatchListLike[]
  
  // Relations suggestions vidÃ©o
  videoSuggestions    VideoSuggestion[]
  videoVotes          VideoVote[]
  videoReports        VideoReport[]

  // ðŸ†• RELATIONS RIVALITÃ‰S PERSONNELLES
  rivalriesAsUser1     PersonalRivalry[]      @relation("PersonalRivalryUser1")
  rivalriesAsUser2     PersonalRivalry[]      @relation("PersonalRivalryUser2") 
  createdRivalries     PersonalRivalry[]      @relation("PersonalRivalryCreator")
  addedMatches         PersonalRivalryMatch[] @relation("PersonalMatchAddedBy")

  @@map("users")
}

// ===== MATCHS PROFESSIONNELS =====

model Match {
  id              String           @id @default(cuid())
  apiMatchId      Int              @unique
  sport           Sport            @default(FOOTBALL)
  homeTeam        String
  awayTeam        String
  homeScore       Int?
  awayScore       Int?
  date            DateTime
  status          String
  competition     String
  season          String
  venue           String?
  referee         String?
  homeTeamLogo    String?
  awayTeamLogo    String?
  details         Json?
  totalRatings    Int              @default(0)
  avgRating       Float            @default(0)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  events          MatchEvent[]
  playerRatings   PlayerRating[]
  ratings         Rating[]
  listItems       MatchListItem[]
  manOfMatchVotes ManOfMatchVote[]
  videoSuggestions VideoSuggestion[]

  @@map("matches")
}

model MatchEvent {
  id      String  @id @default(cuid())
  matchId String
  minute  Int
  type    String
  player  String
  team    String
  detail  String?
  match   Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("match_events")
}

// ===== NOTATIONS MATCHS =====

model Rating {
  id          String        @id @default(cuid())
  userId      String
  matchId     String
  rating      Int
  comment     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  spoilerFree Boolean       @default(true)
  match       Match         @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       ReviewLike[]
  replies     ReviewReply[]

  @@unique([userId, matchId])
  @@map("ratings")
}

model ReviewLike {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())
  review    Rating   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@map("review_likes")
}

model ReviewReply {
  id        String      @id @default(cuid())
  content   String
  userId    String
  reviewId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likes     ReplyLike[]
  review    Rating      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("review_replies")
}

model ReplyLike {
  id        String      @id @default(cuid())
  userId    String
  replyId   String
  createdAt DateTime    @default(now())
  reply     ReviewReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("reply_likes")
}

// ===== JOUEURS ET NOTATIONS =====

model Player {
  id              String           @id @default(cuid())
  name            String
  number          Int?
  position        String?
  team            String
  sport           Sport            @default(FOOTBALL)
  createdAt       DateTime         @default(now())
  ratings         PlayerRating[]
  manOfMatchVotes ManOfMatchVote[]

  @@unique([name, team, sport])
  @@map("players")
}

model PlayerRating {
  id        String   @id @default(cuid())
  userId    String
  playerId  String
  matchId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, playerId, matchId])
  @@map("player_ratings")
}

model ManOfMatchVote {
  id        String   @id @default(cuid())
  userId    String
  playerId  String
  matchId   String
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
  @@map("man_of_match_votes")
}

// ===== NOTIFICATIONS =====

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// ===== AMITIÃ‰S =====

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("UserReceivedFriendships", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User             @relation("UserSentFriendships", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendships")
}

// ===== Ã‰QUIPES =====

model Team {
  id           String       @id @default(dbgenerated("gen_random_uuid()"))
  name         String       @unique @db.VarChar(255)
  logo         String?
  sport        String       @default("FOOTBALL")
  league       String?
  country      String?
  founded      Int?
  website      String?
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?    @default(now()) @db.Timestamptz(6)
  team_follows TeamFollow[]

  @@index([league], map: "idx_teams_league")
  @@index([name], map: "idx_teams_name")
  @@index([sport], map: "idx_teams_sport")
  @@map("teams")
}

model TeamFollow {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  user_id    String
  team_id    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  teams      Team      @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, team_id])
  @@index([team_id], map: "idx_team_follows_team_id")
  @@index([user_id], map: "idx_team_follows_user_id")
  @@map("team_follows")
}

// ===== PROFILS AVANCÃ‰S =====

model user_profiles {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String    @unique
  location                 String?   @db.VarChar(255)
  age                      String?   @db.VarChar(10)
  occupation               String?   @db.VarChar(255)
  favorite_club            String?   @db.VarChar(255)
  favorite_basketball_team String?   @db.VarChar(255)
  favorite_tennis_player   String?   @db.VarChar(100)
  favorite_f1_driver       String?   @db.VarChar(100)
  preferred_sports         Json?     @default("[]")
  watching_habits          String?   @db.VarChar(50)
  languages                Json?     @default("[]")
  visibility               Json?     @default("{}")
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  users                    User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([languages], map: "idx_user_profiles_languages", type: Gin)
  @@index([preferred_sports], map: "idx_user_profiles_preferred_sports", type: Gin)
  @@index([user_id], map: "idx_user_profiles_user_id")
}

// ===== LISTES DE MATCHS =====

model MatchList {
  id          String           @id @default(cuid())
  name        String
  description String?
  userId      String
  isPublic    Boolean          @default(true)
  color       String?
  emoji       String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches     MatchListItem[]
  likes       MatchListLike[]

  @@unique([userId, name])
  @@map("match_lists")
}

model MatchListItem {
  id        String   @id @default(cuid())
  listId    String
  matchId   String
  position  Int      @default(0)
  note      String?
  addedAt   DateTime @default(now())
  
  list      MatchList @relation(fields: [listId], references: [id], onDelete: Cascade)
  match     Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([listId, matchId])
  @@map("match_list_items")
}

model MatchListLike {
  id        String   @id @default(cuid())
  userId    String
  listId    String
  createdAt DateTime @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  list      MatchList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([userId, listId])
  @@map("match_list_likes")
}

// ===== SUGGESTIONS VIDÃ‰O =====

model VideoSuggestion {
  id          String   @id @default(cuid())
  matchId     String
  url         String   // Lien vers la vidÃ©o
  title       String   // Titre de la vidÃ©o
  description String?  // Description optionnelle
  platform    String   // youtube, dailymotion, twitch, other
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  match       Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  
  // MÃ©tadonnÃ©es
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // ModÃ©ration
  isVerified  Boolean  @default(false) // ApprouvÃ© par un admin
  isBlocked   Boolean  @default(false) // BloquÃ© (spam/inappropriÃ©)
  
  // Relations votes et signalements
  votes       VideoVote[]
  reports     VideoReport[]
  
  @@unique([matchId, url]) // EmpÃªcher les doublons d'URL par match
  @@index([matchId], map: "idx_video_suggestions_match_id")
  @@index([createdAt], map: "idx_video_suggestions_created_at")
  @@index([isVerified], map: "idx_video_suggestions_verified")
  @@index([isBlocked], map: "idx_video_suggestions_blocked")
  @@map("video_suggestions")
}

model VideoVote {
  id           String          @id @default(cuid())
  userId       String
  suggestionId String
  voteType     String          // 'up' ou 'down'
  createdAt    DateTime        @default(now())
  
  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestion   VideoSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, suggestionId]) // Un user ne peut voter qu'une fois par suggestion
  @@index([suggestionId], map: "idx_video_votes_suggestion_id")
  @@index([voteType], map: "idx_video_votes_type")
  @@map("video_votes")
}

model VideoReport {
  id           String          @id @default(cuid())
  userId       String
  suggestionId String
  reason       String          // 'spam', 'inappropriate', 'broken_link', 'duplicate', 'other'
  comment      String?         // Commentaire optionnel
  createdAt    DateTime        @default(now())
  
  // ModÃ©ration
  isResolved   Boolean         @default(false)
  resolvedAt   DateTime?
  resolvedBy   String?         // ID de l'admin qui a rÃ©solu
  
  // Relations
  user         User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestion   VideoSuggestion @relation(fields: [suggestionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, suggestionId]) // Un user ne peut signaler qu'une fois par suggestion
  @@index([isResolved], map: "idx_video_reports_resolved")
  @@index([reason], map: "idx_video_reports_reason")
  @@map("video_reports")
}

// ðŸ†• ===== RIVALITÃ‰S PERSONNELLES =====

model PersonalRivalry {
  id        String   @id @default(cuid())
  
  // Participants
  user1Id   String
  user2Id   String
  user1     User     @relation("PersonalRivalryUser1", fields: [user1Id], references: [id], onDelete: Cascade)
  user2     User     @relation("PersonalRivalryUser2", fields: [user2Id], references: [id], onDelete: Cascade)
  
  // Sport de la rivalitÃ©
  sport     String   // tennis, football, basketball, etc.
  
  // Statut de la rivalitÃ©
  status    PersonalRivalryStatus @default(PENDING)
  
  // Qui a crÃ©Ã© la rivalitÃ©
  createdBy String
  creator   User     @relation("PersonalRivalryCreator", fields: [createdBy], references: [id], onDelete: Cascade)
  
  // Message initial optionnel
  message   String?
  
  // MÃ©tadonnÃ©es
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  matches   PersonalRivalryMatch[]
  
  @@unique([user1Id, user2Id, sport])
  @@index([user1Id])
  @@index([user2Id]) 
  @@index([sport])
  @@index([status])
  @@map("personal_rivalries")
}

model PersonalRivalryMatch {
  id        String   @id @default(cuid())
  
  // Relation avec la rivalitÃ©
  rivalryId String
  rivalry   PersonalRivalry @relation(fields: [rivalryId], references: [id], onDelete: Cascade)
  
  // Scores (format libre)
  user1Score String   // "6-4, 6-2" ou "3" ou "78" etc.
  user2Score String   // "4-6, 2-6" ou "1" ou "65" etc.
  
  // DÃ©tails du match
  date      DateTime
  location  String?  // Lieu du match
  comment   String?  // Commentaire sur le match
  
  // Qui a ajoutÃ© ce match
  addedBy   String
  addedByUser User   @relation("PersonalMatchAddedBy", fields: [addedBy], references: [id], onDelete: Cascade)
  
  // MÃ©tadonnÃ©es
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@index([rivalryId])
  @@index([date])
  @@index([addedBy])
  @@map("personal_rivalry_matches")
}

// ===== ENUMS =====

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum Sport {
  FOOTBALL
  BASKETBALL
  MMA
  RUGBY
  F1
  TENNIS 
}

enum PersonalRivalryStatus {
  PENDING     // En attente d'acceptation
  ACTIVE      // RivalitÃ© active
  PAUSED      // Mise en pause
  ENDED       // TerminÃ©e
}