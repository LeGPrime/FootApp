generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String         @id @default(cuid())
  name                String?
  email               String         @unique
  emailVerified       DateTime?
  image               String?
  username            String?        @unique
  bio                 String?
  password            String?
  createdAt           DateTime       @default(now())
  location            String?        @db.VarChar(255)
  favorite_club       String?        @db.VarChar(255)
  accounts            Account[]
  sessions            Session[]
  receivedFriendships Friendship[]   @relation("UserReceivedFriendships")
  sentFriendships     Friendship[]   @relation("UserSentFriendships")
  notifications       Notification[]
  playerRatings       PlayerRating[]
  ratings             Rating[]
  replyLikes          ReplyLike[]
  reviewLikes         ReviewLike[]
  reviewReplies       ReviewReply[]
  team_follows        TeamFollow[]
  user_profiles       user_profiles?
  matchLists          MatchList[]
  matchListLikes      MatchListLike[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id            String         @id @default(cuid())
  apiMatchId    Int            @unique
  sport         Sport          @default(FOOTBALL)
  homeTeam      String
  awayTeam      String
  homeScore     Int?
  awayScore     Int?
  date          DateTime
  status        String
  competition   String
  season        String
  venue         String?
  referee       String?
  homeTeamLogo  String?
  awayTeamLogo  String?
  details       Json?
  totalRatings  Int            @default(0)
  avgRating     Float          @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  events        MatchEvent[]
  playerRatings PlayerRating[]
  ratings       Rating[]
  listItems     MatchListItem[]

  @@map("matches")
}

model MatchEvent {
  id      String  @id @default(cuid())
  matchId String
  minute  Int
  type    String
  player  String
  team    String
  detail  String?
  match   Match   @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("match_events")
}

model Rating {
  id          String        @id @default(cuid())
  userId      String
  matchId     String
  rating      Int
  comment     String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  spoilerFree Boolean       @default(true)
  match       Match         @relation(fields: [matchId], references: [id], onDelete: Cascade)
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes       ReviewLike[]
  replies     ReviewReply[]

  @@unique([userId, matchId])
  @@map("ratings")
}

model ReviewLike {
  id        String   @id @default(cuid())
  userId    String
  reviewId  String
  createdAt DateTime @default(now())
  review    Rating   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, reviewId])
  @@map("review_likes")
}

model ReviewReply {
  id        String      @id @default(cuid())
  content   String
  userId    String
  reviewId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likes     ReplyLike[]
  review    Rating      @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("review_replies")
}

model ReplyLike {
  id        String      @id @default(cuid())
  userId    String
  replyId   String
  createdAt DateTime    @default(now())
  reply     ReviewReply @relation(fields: [replyId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, replyId])
  @@map("reply_likes")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  data      Json?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())
  receiver   User             @relation("UserReceivedFriendships", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User             @relation("UserSentFriendships", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendships")
}

model Player {
  id        String         @id @default(cuid())
  name      String
  number    Int?
  position  String?
  team      String
  sport     Sport          @default(FOOTBALL)
  createdAt DateTime       @default(now())
  ratings   PlayerRating[]

  @@unique([name, team, sport])
  @@map("players")
}

model PlayerRating {
  id        String   @id @default(cuid())
  userId    String
  playerId  String
  matchId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  match     Match    @relation(fields: [matchId], references: [id], onDelete: Cascade)
  player    Player   @relation(fields: [playerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, playerId, matchId])
  @@map("player_ratings")
}

model Team {
  id           String       @id @default(dbgenerated("gen_random_uuid()"))
  name         String       @unique @db.VarChar(255)
  logo         String?
  sport        String       @default("FOOTBALL")
  league       String?
  country      String?
  founded      Int?
  website      String?
  created_at   DateTime?    @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?    @default(now()) @db.Timestamptz(6)
  team_follows TeamFollow[]

  @@index([league], map: "idx_teams_league")
  @@index([name], map: "idx_teams_name")
  @@index([sport], map: "idx_teams_sport")
  @@map("teams")
}

model TeamFollow {
  id         String    @id @default(dbgenerated("gen_random_uuid()"))
  user_id    String
  team_id    String
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  teams      Team      @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([user_id, team_id])
  @@index([team_id], map: "idx_team_follows_team_id")
  @@index([user_id], map: "idx_team_follows_user_id")
  @@map("team_follows")
}

model user_profiles {
  id                       String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String    @unique
  location                 String?   @db.VarChar(255)
  age                      String?   @db.VarChar(10)
  occupation               String?   @db.VarChar(255)
  favorite_club            String?   @db.VarChar(255)
  favorite_basketball_team String?   @db.VarChar(255)
  favorite_tennis_player   String?   @db.VarChar(100)
  favorite_f1_driver       String?   @db.VarChar(100)
  preferred_sports         Json?     @default("[]")
  watching_habits          String?   @db.VarChar(50)
  languages                Json?     @default("[]")
  visibility               Json?     @default("{}")
  created_at               DateTime? @default(now()) @db.Timestamptz(6)
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  users                    User      @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([languages], map: "idx_user_profiles_languages", type: Gin)
  @@index([preferred_sports], map: "idx_user_profiles_preferred_sports", type: Gin)
  @@index([user_id], map: "idx_user_profiles_user_id")
}

// ðŸ†• NOUVEAUX MODÃˆLES POUR LES LISTES
model MatchList {
  id          String           @id @default(cuid())
  name        String
  description String?
  userId      String
  isPublic    Boolean          @default(true)
  color       String?          // Couleur thÃ©matique (blue, red, green, etc.)
  emoji       String?          // Emoji pour personnaliser
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  matches     MatchListItem[]
  likes       MatchListLike[]

  @@unique([userId, name]) // Un utilisateur ne peut pas avoir 2 listes avec le mÃªme nom
  @@map("match_lists")
}

model MatchListItem {
  id        String   @id @default(cuid())
  listId    String
  matchId   String
  position  Int      @default(0) // Pour l'ordre dans la liste
  note      String?  // Note personnelle sur ce match dans cette liste
  addedAt   DateTime @default(now())
  
  list      MatchList @relation(fields: [listId], references: [id], onDelete: Cascade)
  match     Match     @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([listId, matchId]) // Un match ne peut Ãªtre qu'une fois dans une liste
  @@map("match_list_items")
}

model MatchListLike {
  id        String   @id @default(cuid())
  userId    String
  listId    String
  createdAt DateTime @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  list      MatchList @relation(fields: [listId], references: [id], onDelete: Cascade)

  @@unique([userId, listId])
  @@map("match_list_likes")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum Sport {
  FOOTBALL
  BASKETBALL
  MMA
  RUGBY
  F1
}