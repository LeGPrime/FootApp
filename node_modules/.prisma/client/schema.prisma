// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  bio           String?
  password      String?
  createdAt     DateTime  @default(now())

  accounts Account[]
  sessions Session[]
  ratings  Rating[]

  // Relations d'amitiÃ©
  sentFriendships     Friendship[]   @relation("UserSentFriendships")
  receivedFriendships Friendship[]   @relation("UserReceivedFriendships")
  playerRatings       PlayerRating[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Match {
  id         String @id @default(cuid())
  apiMatchId Int    @unique

  // ðŸ†• SPORT AJOUTÃ‰
  sport Sport @default(FOOTBALL)

  homeTeam    String
  awayTeam    String
  homeScore   Int?
  awayScore   Int?
  date        DateTime
  status      String // FINISHED, LIVE, SCHEDULED
  competition String
  season      String
  venue       String?
  referee     String?

  // DÃ©tails du match/Ã©vÃ©nement
  homeTeamLogo String?
  awayTeamLogo String?

  // ðŸ†• DONNÃ‰ES ENRICHIES JSON
  details Json? // Stockage flexible pour chaque sport

  // Statistiques
  totalRatings Int   @default(0)
  avgRating    Float @default(0)

  ratings       Rating[]
  events        MatchEvent[]
  playerRatings PlayerRating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("matches")
}

model MatchEvent {
  id      String  @id @default(cuid())
  matchId String
  minute  Int
  type    String // GOAL, CARD, SUBSTITUTION, ROUND_END, etc.
  player  String
  team    String
  detail  String? // Yellow card, Red card, KO, Decision, etc.

  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@map("match_events")
}

model Rating {
  id        String   @id @default(cuid())
  userId    String
  matchId   String
  rating    Int // 1-5
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  match Match @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, matchId])
  @@map("ratings")
}

model Friendship {
  id         String           @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendshipStatus @default(PENDING)
  createdAt  DateTime         @default(now())

  sender   User @relation("UserSentFriendships", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("UserReceivedFriendships", fields: [receiverId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
  @@map("friendships")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Player {
  id       String  @id @default(cuid())
  name     String
  number   Int?
  position String?
  team     String
  sport    Sport   @default(FOOTBALL)

  ratings PlayerRating[]

  createdAt DateTime @default(now())

  @@unique([name, team, sport])
  @@map("players")
}

model PlayerRating {
  id        String   @id @default(cuid())
  userId    String
  playerId  String
  matchId   String
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  player Player @relation(fields: [playerId], references: [id], onDelete: Cascade)
  match  Match  @relation(fields: [matchId], references: [id], onDelete: Cascade)

  @@unique([userId, playerId, matchId])
  @@map("player_ratings")
}

// ðŸ†• ENUM SPORT
enum Sport {
  FOOTBALL
  BASKETBALL
  MMA
  RUGBY
  F1
}
