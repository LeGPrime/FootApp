"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/cholismo";
exports.ids = ["pages/api/cholismo"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcholismo&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcholismo.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcholismo&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcholismo.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_cholismo_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/cholismo.ts */ \"(api)/./pages/api/cholismo.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_cholismo_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_cholismo_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/cholismo\",\n        pathname: \"/api/cholismo\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_cholismo_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNob2xpc21vJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZjaG9saXNtby50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNvRDtBQUNwRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsbURBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLG1EQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLz81NGE0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvY2hvbGlzbW8udHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9jaG9saXNtb1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2Nob2xpc21vXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcholismo&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcholismo.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./pages/api/cholismo.ts":
/*!*******************************!*\
  !*** ./pages/api/cholismo.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/prisma */ \"(api)/./lib/prisma.ts\");\n// pages/api/cholismo.ts - Classement des meilleurs coachs\n\nasync function handler(req, res) {\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        const { sport = \"FOOTBALL\", minMatches = \"3\", limit = \"50\", period = \"all-time\" } = req.query;\n        console.log(`🏆 Calcul Cholismo du Peuple - Sport: ${sport}, Min matchs: ${minMatches}`);\n        // 1. Construire les filtres pour COACHS UNIQUEMENT\n        let sportFilter = {\n            sport: sport.toString().toUpperCase()\n        };\n        // 2. Filtre par période\n        let dateFilter = {};\n        const now = new Date();\n        switch(period){\n            case \"this-year\":\n                const yearAgo = new Date();\n                yearAgo.setFullYear(now.getFullYear() - 1);\n                dateFilter = {\n                    createdAt: {\n                        gte: yearAgo\n                    }\n                };\n                break;\n            case \"this-season\":\n                const seasonStart = new Date();\n                seasonStart.setMonth(8) // Septembre\n                ;\n                if (now.getMonth() < 8) {\n                    seasonStart.setFullYear(now.getFullYear() - 1);\n                }\n                dateFilter = {\n                    createdAt: {\n                        gte: seasonStart\n                    }\n                };\n                break;\n            case \"last-6-months\":\n                const sixMonthsAgo = new Date();\n                sixMonthsAgo.setMonth(now.getMonth() - 6);\n                dateFilter = {\n                    createdAt: {\n                        gte: sixMonthsAgo\n                    }\n                };\n                break;\n            default:\n                break;\n        }\n        // 3. Récupérer UNIQUEMENT LES COACHS avec leurs notes\n        const coachesWithRatings = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.player.findMany({\n            where: {\n                ...sportFilter,\n                position: \"COACH\",\n                ratings: {\n                    some: dateFilter\n                }\n            },\n            include: {\n                ratings: {\n                    where: dateFilter,\n                    include: {\n                        match: {\n                            select: {\n                                id: true,\n                                homeTeam: true,\n                                awayTeam: true,\n                                date: true,\n                                competition: true,\n                                sport: true,\n                                homeScore: true,\n                                awayScore: true\n                            }\n                        },\n                        user: {\n                            select: {\n                                id: true,\n                                name: true\n                            }\n                        }\n                    },\n                    orderBy: {\n                        createdAt: \"desc\"\n                    }\n                }\n            }\n        });\n        console.log(`👨‍💼 ${coachesWithRatings.length} coachs bruts récupérés`);\n        // 4. 🧠 FUSION INTELLIGENTE DES COACHS (même logique que joueurs)\n        const fusedCoaches = new Map();\n        for (const coach of coachesWithRatings){\n            if (coach.ratings.length === 0) continue;\n            // Normaliser le nom pour la fusion\n            const normalizedName = normalizeCoachName(coach.name);\n            // Si le coach existe déjà (même nom normalisé), fusionner\n            if (fusedCoaches.has(normalizedName)) {\n                const existingCoach = fusedCoaches.get(normalizedName);\n                // Fusionner les données\n                existingCoach.ratings.push(...coach.ratings);\n                existingCoach.teams.add(coach.team);\n                console.log(`🔗 Fusion coach: ${coach.name} (${coach.team}) avec ${existingCoach.name}`);\n            } else {\n                // Nouveau coach\n                fusedCoaches.set(normalizedName, {\n                    originalId: coach.id,\n                    name: coach.name,\n                    normalizedName,\n                    sport: coach.sport,\n                    teams: new Set([\n                        coach.team\n                    ]),\n                    ratings: [\n                        ...coach.ratings\n                    ]\n                });\n            }\n        }\n        console.log(`🔗 Après fusion: ${fusedCoaches.size} coachs uniques`);\n        // 5. Calculer les statistiques pour chaque coach fusionné\n        const cholismoCandidates = [];\n        for (const [normalizedName, fusedCoach] of fusedCoaches.entries()){\n            const ratings = fusedCoach.ratings;\n            if (ratings.length < parseInt(minMatches.toString())) {\n                continue;\n            }\n            // Calculer la moyenne globale\n            const avgRating = ratings.reduce((sum, r)=>sum + r.rating, 0) / ratings.length;\n            // Trouver le meilleur match\n            const bestRating = ratings.reduce((best, current)=>current.rating > best.rating ? current : best);\n            // Récupérer les matchs uniques avec moyenne par match\n            const uniqueMatches = new Map();\n            ratings.forEach((rating)=>{\n                const matchId = rating.match.id;\n                if (!uniqueMatches.has(matchId)) {\n                    uniqueMatches.set(matchId, {\n                        match: rating.match,\n                        ratings: []\n                    });\n                }\n                uniqueMatches.get(matchId).ratings.push(rating);\n            });\n            const totalMatches = uniqueMatches.size;\n            // Calculer les 5 matchs les plus récents\n            const recentMatches = Array.from(uniqueMatches.values()).sort((a, b)=>new Date(b.match.date).getTime() - new Date(a.match.date).getTime()).slice(0, 5).map((matchData)=>{\n                const matchAvgRating = matchData.ratings.reduce((sum, r)=>sum + r.rating, 0) / matchData.ratings.length;\n                const bestComment = matchData.ratings.find((r)=>r.comment)?.comment;\n                // Déterminer l'équipe du coach pour ce match\n                const coachTeam = getCoachTeamForMatch(matchData.match, Array.from(fusedCoach.teams));\n                return {\n                    matchId: matchData.match.id,\n                    rating: Number(matchAvgRating.toFixed(1)),\n                    comment: bestComment,\n                    homeTeam: matchData.match.homeTeam,\n                    awayTeam: matchData.match.awayTeam,\n                    date: matchData.match.date,\n                    competition: matchData.match.competition,\n                    team: coachTeam\n                };\n            });\n            // Calculer l'historique mensuel\n            const ratingHistory = calculateMonthlyHistory(ratings);\n            // Calculer la répartition par équipe\n            const teamBreakdown = calculateTeamBreakdown(ratings, Array.from(fusedCoach.teams));\n            // 🧠 INSIGHTS TACTIQUES SPÉCIFIQUES AUX COACHS\n            const tacticalInsights = calculateTacticalInsights(ratings, Array.from(fusedCoach.teams), uniqueMatches);\n            // Déterminer l'équipe du meilleur match\n            const bestMatchTeam = getCoachTeamForMatch(bestRating.match, Array.from(fusedCoach.teams));\n            cholismoCandidates.push({\n                id: `coach_fused_${normalizedName}`,\n                name: fusedCoach.name,\n                normalizedName,\n                teams: Array.from(fusedCoach.teams),\n                sport: fusedCoach.sport,\n                avgRating: Number(avgRating.toFixed(2)),\n                totalRatings: ratings.length,\n                totalMatches,\n                bestMatch: {\n                    id: bestRating.match.id,\n                    rating: bestRating.rating,\n                    homeTeam: bestRating.match.homeTeam,\n                    awayTeam: bestRating.match.awayTeam,\n                    date: bestRating.match.date,\n                    competition: bestRating.match.competition,\n                    team: bestMatchTeam\n                },\n                recentMatches,\n                ratingHistory,\n                teamBreakdown,\n                tacticalInsights\n            });\n        }\n        // 6. Trier par moyenne des notes (avec bonus pour l'expérience)\n        cholismoCandidates.sort((a, b)=>{\n            // Bonus léger pour l'expérience (plus de matchs)\n            const aScore = a.avgRating + Math.log(a.totalMatches) * 0.05;\n            const bScore = b.avgRating + Math.log(b.totalMatches) * 0.05;\n            if (Math.abs(aScore - bScore) < 0.01) {\n                return b.totalMatches - a.totalMatches;\n            }\n            return bScore - aScore;\n        });\n        // 7. Limiter les résultats\n        const topCoaches = cholismoCandidates.slice(0, parseInt(limit.toString()));\n        // 8. Statistiques globales\n        const globalStats = {\n            totalCoaches: cholismoCandidates.length,\n            totalRatings: cholismoCandidates.reduce((sum, c)=>sum + c.totalRatings, 0),\n            totalMatches: cholismoCandidates.reduce((sum, c)=>sum + c.totalMatches, 0),\n            avgRatingGlobal: cholismoCandidates.length > 0 ? cholismoCandidates.reduce((sum, c)=>sum + c.avgRating, 0) / cholismoCandidates.length : 0,\n            topRating: topCoaches[0]?.avgRating || 0,\n            tacticalStylesBreakdown: calculateTacticalStylesBreakdown(topCoaches),\n            fusionStats: {\n                originalCoaches: coachesWithRatings.length,\n                fusedCoaches: cholismoCandidates.length,\n                fusionReduction: coachesWithRatings.length - cholismoCandidates.length\n            }\n        };\n        console.log(`👨‍💼 Cholismo du Peuple calculé:`);\n        console.log(`   - ${coachesWithRatings.length} coachs originaux`);\n        console.log(`   - ${cholismoCandidates.length} coachs après fusion`);\n        console.log(`   - Leader: ${topCoaches[0]?.name} (${topCoaches[0]?.avgRating}/10)`);\n        console.log(`   - Équipes: ${topCoaches[0]?.teams.join(\", \")}`);\n        res.status(200).json({\n            success: true,\n            cholismo: topCoaches,\n            stats: globalStats,\n            filters: {\n                sport,\n                period,\n                minMatches: parseInt(minMatches.toString())\n            }\n        });\n    } catch (error) {\n        console.error(\"❌ Erreur Cholismo du Peuple:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Erreur serveur\",\n            details: error instanceof Error ? error.message : \"Erreur inconnue\"\n        });\n    }\n}\n// 🧠 Fonction de normalisation des noms de coachs\nfunction normalizeCoachName(name) {\n    let normalized = name.toLowerCase().trim().normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").replace(/[^a-z\\s-]/g, \"\").replace(/\\s+/g, \" \").trim();\n    // Mappings spéciaux pour les coachs célèbres\n    const coachMappings = {\n        \"p guardiola\": \"pep guardiola\",\n        \"pep guardiola\": \"pep guardiola\",\n        \"j mourinho\": \"jose mourinho\",\n        \"jose mourinho\": \"jose mourinho\",\n        \"c ancelotti\": \"carlo ancelotti\",\n        \"carlo ancelotti\": \"carlo ancelotti\",\n        \"j klopp\": \"jurgen klopp\",\n        \"jurgen klopp\": \"jurgen klopp\",\n        \"d simeone\": \"diego simeone\",\n        \"diego simeone\": \"diego simeone\"\n    };\n    if (coachMappings[normalized]) {\n        normalized = coachMappings[normalized];\n    }\n    console.log(`🔍 Normalisation coach: \"${name}\" -> \"${normalized}\"`);\n    return normalized;\n}\n// Fonction pour déterminer l'équipe du coach dans un match\nfunction getCoachTeamForMatch(match, coachTeams) {\n    const homeTeam = match.homeTeam.toLowerCase();\n    const awayTeam = match.awayTeam.toLowerCase();\n    for (const team of coachTeams){\n        const teamLower = team.toLowerCase();\n        if (homeTeam.includes(teamLower) || teamLower.includes(homeTeam.split(\" \")[0])) {\n            return match.homeTeam;\n        }\n        if (awayTeam.includes(teamLower) || teamLower.includes(awayTeam.split(\" \")[0])) {\n            return match.awayTeam;\n        }\n    }\n    return coachTeams[0] || \"\\xc9quipe inconnue\";\n}\n// 🧠 Calcul des insights tactiques spécifiques aux coachs\nfunction calculateTacticalInsights(ratings, teams, uniqueMatches) {\n    // Équipe la plus forte (meilleure moyenne)\n    const teamStats = new Map();\n    teams.forEach((team)=>{\n        teamStats.set(team, {\n            ratings: [],\n            wins: 0,\n            total: 0\n        });\n    });\n    // Analyser chaque match\n    Array.from(uniqueMatches.values()).forEach((matchData)=>{\n        const match = matchData.match;\n        const matchRatings = matchData.ratings;\n        const avgMatchRating = matchRatings.reduce((sum, r)=>sum + r.rating, 0) / matchRatings.length;\n        const coachTeam = getCoachTeamForMatch(match, teams);\n        const normalizedTeam = teams.find((t)=>t.toLowerCase().includes(coachTeam.toLowerCase()) || coachTeam.toLowerCase().includes(t.toLowerCase())) || teams[0];\n        if (teamStats.has(normalizedTeam)) {\n            teamStats.get(normalizedTeam).ratings.push(avgMatchRating);\n            teamStats.get(normalizedTeam).total++;\n            // Considérer comme \"victoire tactique\" si note >= 7\n            if (avgMatchRating >= 7) {\n                teamStats.get(normalizedTeam).wins++;\n            }\n        }\n    });\n    // Trouver l'équipe la plus forte\n    let strongestTeam = teams[0];\n    let bestAvg = 0;\n    for (const [team, stats] of teamStats.entries()){\n        if (stats.ratings.length > 0) {\n            const avg = stats.ratings.reduce((sum, r)=>sum + r, 0) / stats.ratings.length;\n            if (avg > bestAvg) {\n                bestAvg = avg;\n                strongestTeam = team;\n            }\n        }\n    }\n    // Moyenne par compétition\n    const competitionStats = new Map();\n    ratings.forEach((rating)=>{\n        const comp = rating.match.competition;\n        if (!competitionStats.has(comp)) {\n            competitionStats.set(comp, {\n                ratings: [],\n                matches: new Set()\n            });\n        }\n        competitionStats.get(comp).ratings.push(rating.rating);\n        competitionStats.get(comp).matches.add(rating.match.id);\n    });\n    const averageByCompetition = Array.from(competitionStats.entries()).map(([competition, data])=>({\n            competition,\n            avgRating: Number((data.ratings.reduce((sum, r)=>sum + r, 0) / data.ratings.length).toFixed(2)),\n            matchCount: data.matches.size\n        })).sort((a, b)=>b.avgRating - a.avgRating).slice(0, 5);\n    // Taux de \"victoires tactiques\" global\n    const totalGoodMatches = Array.from(uniqueMatches.values()).filter((matchData)=>{\n        const avgRating = matchData.ratings.reduce((sum, r)=>sum + r.rating, 0) / matchData.ratings.length;\n        return avgRating >= 7;\n    }).length;\n    const winRate = uniqueMatches.size > 0 ? totalGoodMatches / uniqueMatches.size * 100 : 0;\n    return {\n        strongestTeam,\n        averageByCompetition,\n        winRate: Number(winRate.toFixed(1))\n    };\n}\n// Calculer la répartition par équipe (réutilisé)\nfunction calculateTeamBreakdown(ratings, teams) {\n    const teamStats = new Map();\n    teams.forEach((team)=>{\n        teamStats.set(team, {\n            team,\n            ratings: [],\n            matches: new Set()\n        });\n    });\n    ratings.forEach((rating)=>{\n        const coachTeam = getCoachTeamForMatch(rating.match, teams);\n        const normalizedTeam = teams.find((t)=>t.toLowerCase().includes(coachTeam.toLowerCase()) || coachTeam.toLowerCase().includes(t.toLowerCase())) || teams[0];\n        if (teamStats.has(normalizedTeam)) {\n            teamStats.get(normalizedTeam).ratings.push(rating.rating);\n            teamStats.get(normalizedTeam).matches.add(rating.match.id);\n        }\n    });\n    return Array.from(teamStats.values()).filter((stats)=>stats.ratings.length > 0).map((stats)=>({\n            team: stats.team,\n            avgRating: Number((stats.ratings.reduce((sum, r)=>sum + r, 0) / stats.ratings.length).toFixed(2)),\n            matchCount: stats.matches.size,\n            ratingCount: stats.ratings.length\n        })).sort((a, b)=>b.avgRating - a.avgRating);\n}\n// Calculer l'historique mensuel (réutilisé)\nfunction calculateMonthlyHistory(ratings) {\n    const monthlyData = new Map();\n    ratings.forEach((rating)=>{\n        const date = new Date(rating.createdAt);\n        const monthKey = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, \"0\")}`;\n        if (!monthlyData.has(monthKey)) {\n            monthlyData.set(monthKey, {\n                ratings: [],\n                matches: new Set()\n            });\n        }\n        monthlyData.get(monthKey).ratings.push(rating.rating);\n        monthlyData.get(monthKey).matches.add(rating.match.id);\n    });\n    return Array.from(monthlyData.entries()).map(([month, data])=>({\n            month,\n            avgRating: Number((data.ratings.reduce((sum, r)=>sum + r, 0) / data.ratings.length).toFixed(2)),\n            matchCount: data.matches.size\n        })).sort((a, b)=>a.month.localeCompare(b.month)).slice(-12);\n}\n// 🆕 Analyser les styles tactiques\nfunction calculateTacticalStylesBreakdown(coaches) {\n    return {\n        totalCoaches: coaches.length,\n        experienceBreakdown: {\n            veterans: coaches.filter((c)=>c.totalMatches >= 10).length,\n            experienced: coaches.filter((c)=>c.totalMatches >= 5 && c.totalMatches < 10).length,\n            emerging: coaches.filter((c)=>c.totalMatches < 5).length\n        },\n        ratingBreakdown: {\n            elite: coaches.filter((c)=>c.avgRating >= 8.5).length,\n            excellent: coaches.filter((c)=>c.avgRating >= 8 && c.avgRating < 8.5).length,\n            good: coaches.filter((c)=>c.avgRating >= 7 && c.avgRating < 8).length,\n            developing: coaches.filter((c)=>c.avgRating < 7).length\n        },\n        multiClubCoaches: coaches.filter((c)=>c.teams.length > 1).length\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/cholismo.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcholismo&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fcholismo.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();