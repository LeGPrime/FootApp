"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/import-mega-historical";
exports.ids = ["pages/api/import-mega-historical"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = import("axios");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-mega-historical&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-mega-historical.ts&middlewareConfigBase64=e30%3D!":
/*!**************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-mega-historical&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-mega-historical.ts&middlewareConfigBase64=e30%3D! ***!
  \**************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_import_mega_historical_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/import-mega-historical.ts */ \"(api)/./pages/api/import-mega-historical.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_import_mega_historical_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_import_mega_historical_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_import_mega_historical_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_import_mega_historical_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/import-mega-historical\",\n        pathname: \"/api/import-mega-historical\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_import_mega_historical_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmltcG9ydC1tZWdhLWhpc3RvcmljYWwmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZwYWdlcyUyRmFwaSUyRmltcG9ydC1tZWdhLWhpc3RvcmljYWwudHMmbWlkZGxld2FyZUNvbmZpZ0Jhc2U2ND1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ0w7QUFDMUQ7QUFDa0U7QUFDbEU7QUFDQSxpRUFBZSx3RUFBSyxDQUFDLGlFQUFRLFlBQVksRUFBQztBQUMxQztBQUNPLGVBQWUsd0VBQUssQ0FBQyxpRUFBUTtBQUNwQztBQUNPLHdCQUF3QixnSEFBbUI7QUFDbEQ7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0wsWUFBWTtBQUNaLENBQUM7O0FBRUQscUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mb290cmF0ZS8/OTM5NiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXMvYXBpL2ltcG9ydC1tZWdhLWhpc3RvcmljYWwudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pbXBvcnQtbWVnYS1oaXN0b3JpY2FsXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvaW1wb3J0LW1lZ2EtaGlzdG9yaWNhbFwiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-mega-historical&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-mega-historical.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/football-api.ts":
/*!*****************************!*\
  !*** ./lib/football-api.ts ***!
  \*****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LEAGUES: () => (/* binding */ LEAGUES),\n/* harmony export */   apiSportsService: () => (/* binding */ apiSportsService)\n/* harmony export */ });\n/* harmony import */ var axios__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! axios */ \"axios\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([axios__WEBPACK_IMPORTED_MODULE_0__]);\naxios__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\nconst RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;\nconst RAPIDAPI_HOST = process.env.RAPIDAPI_HOST;\nif (!RAPIDAPI_KEY || !RAPIDAPI_HOST) {\n    console.warn(\"⚠️ Variables API-Sports manquantes dans .env\");\n}\nconst apiSports = axios__WEBPACK_IMPORTED_MODULE_0__[\"default\"].create({\n    baseURL: `https://${RAPIDAPI_HOST}/v3`,\n    headers: {\n        \"X-RapidAPI-Key\": RAPIDAPI_KEY,\n        \"X-RapidAPI-Host\": RAPIDAPI_HOST\n    }\n});\n// Tracking des requêtes pour respecter le quota FREE\nlet dailyRequestCount = 0;\nconst MAX_DAILY_REQUESTS = 95 // Garde 5 en sécurité sur 100\n;\n// IDs des compétitions principales API-Sports\nconst LEAGUES = {\n    PREMIER_LEAGUE: 39,\n    LIGUE_1: 61,\n    BUNDESLIGA: 78,\n    SERIE_A: 135,\n    LA_LIGA: 140,\n    CHAMPIONS_LEAGUE: 2,\n    EUROPA_LEAGUE: 3,\n    MLS: 253,\n    LIGUE_ARABE: 307,\n    EURO: 4,\n    WORLD_CUP: 1\n};\nclass APISportsService {\n    async makeRequest(endpoint, params = {}) {\n        if (dailyRequestCount >= MAX_DAILY_REQUESTS) {\n            console.log(`⚠️ Quota quotidien atteint (${dailyRequestCount}/${MAX_DAILY_REQUESTS})`);\n            throw new Error(\"Quota quotidien API atteint\");\n        }\n        try {\n            console.log(`🔍 API Request ${dailyRequestCount + 1}/${MAX_DAILY_REQUESTS}: ${endpoint}`);\n            console.log(`📋 Params:`, params);\n            const response = await apiSports.get(endpoint, {\n                params\n            });\n            dailyRequestCount++;\n            console.log(`✅ Requête réussie. Quota: ${dailyRequestCount}/${MAX_DAILY_REQUESTS}`);\n            console.log(`📊 ${response.data.response?.length || 0} résultats reçus`);\n            return response.data.response;\n        } catch (error) {\n            console.error(`❌ Erreur API:`, {\n                status: error.response?.status,\n                message: error.response?.data?.message || error.message,\n                endpoint,\n                params\n            });\n            throw error;\n        }\n    }\n    // Récupérer matchs finis d'une date (format: YYYY-MM-DD)\n    async getFinishedMatchesByDate(date) {\n        const leagueIds = Object.values(LEAGUES).join(\"-\");\n        return this.makeRequest(\"/fixtures\", {\n            date: date,\n            status: \"FT\",\n            league: leagueIds,\n            timezone: \"Europe/Paris\"\n        });\n    }\n    // Récupérer matchs d'une saison complète\n    async getSeasonMatches(leagueId, season) {\n        return this.makeRequest(\"/fixtures\", {\n            league: leagueId,\n            season: season,\n            status: \"FT\",\n            timezone: \"Europe/Paris\"\n        });\n    }\n    // Récupérer matchs d'aujourd'hui\n    async getTodayMatches() {\n        const today = new Date().toISOString().split(\"T\")[0];\n        return this.getFinishedMatchesByDate(today);\n    }\n    // Récupérer matchs d'hier (pour import quotidien)\n    async getYesterdayMatches() {\n        const yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        const dateStr = yesterday.toISOString().split(\"T\")[0];\n        return this.getFinishedMatchesByDate(dateStr);\n    }\n    // Test de connexion API\n    async testConnection() {\n        try {\n            console.log(\"\\uD83E\\uDDEA Test de connexion API-Sports...\");\n            // Test simple : récupérer les ligues disponibles\n            const response = await this.makeRequest(\"/leagues\", {\n                current: true\n            });\n            console.log(`✅ Connexion OK ! ${response.length} ligues disponibles`);\n            return true;\n        } catch (error) {\n            console.error(\"❌ Test de connexion \\xe9chou\\xe9:\", error);\n            return false;\n        }\n    }\n    // Reset du compteur quotidien (à appeler à minuit)\n    resetDailyCount() {\n        dailyRequestCount = 0;\n        console.log(\"\\uD83D\\uDD04 Compteur quotidien remis \\xe0 z\\xe9ro\");\n    }\n    // Statut actuel du quota\n    getQuotaStatus() {\n        return {\n            used: dailyRequestCount,\n            remaining: MAX_DAILY_REQUESTS - dailyRequestCount,\n            total: MAX_DAILY_REQUESTS\n        };\n    }\n}\nconst apiSportsService = new APISportsService();\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/football-api.ts\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./pages/api/import-mega-historical.ts":
/*!*********************************************!*\
  !*** ./pages/api/import-mega-historical.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/prisma */ \"(api)/./lib/prisma.ts\");\n/* harmony import */ var _lib_football_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/football-api */ \"(api)/./lib/football-api.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_lib_football_api__WEBPACK_IMPORTED_MODULE_1__]);\n_lib_football_api__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        console.log(\"\\uD83D\\uDE80 IMPORT MEGA HISTORIQUE - 4 ANS DE DONN\\xc9ES...\");\n        console.log(\"\\uD83D\\uDCC5 Saisons: 2021, 2022, 2023, 2024\");\n        console.log(\"\\uD83C\\uDFC6 Toutes les grandes comp\\xe9titions europ\\xe9ennes + internationales\");\n        console.log(\"⏱️  Temps estim\\xe9: 45-60 minutes (soyez patient !)\");\n        // Toutes les compétitions à importer\n        const targetLeagues = {\n            // 🏴󠁧󠁢󠁥󠁮󠁧󠁿 Premier League\n            \"Premier League\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.PREMIER_LEAGUE,\n            // 🇪🇸 La Liga\n            \"La Liga\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.LA_LIGA,\n            // 🇮🇹 Serie A\n            \"Serie A\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.SERIE_A,\n            // 🇩🇪 Bundesliga\n            \"Bundesliga\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.BUNDESLIGA,\n            // 🇫🇷 Ligue 1\n            \"Ligue 1\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.LIGUE_1,\n            // 🏆 Compétitions européennes\n            \"Champions League\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.CHAMPIONS_LEAGUE,\n            \"Europa League\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.EUROPA_LEAGUE,\n            // 🌍 International\n            \"Euro Championship\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.EURO,\n            \"World Cup\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.WORLD_CUP,\n            // 🇺🇸🇸🇦 Autres grandes ligues\n            \"MLS\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.MLS,\n            \"Saudi Pro League\": _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.LEAGUES.LIGUE_ARABE // 307\n        };\n        // 5 saisons complètes\n        const seasons = [\n            2021,\n            2022,\n            2023,\n            2024,\n            2025\n        ];\n        let totalImported = 0;\n        const summary = {};\n        const errors = [];\n        // Pour chaque saison\n        for (const season of seasons){\n            console.log(`\\n🗓️  === SAISON ${season} ===`);\n            summary[season] = {};\n            // Pour chaque compétition\n            for (const [leagueName, leagueId] of Object.entries(targetLeagues)){\n                try {\n                    console.log(`\\n📊 Import ${leagueName} ${season}...`);\n                    // Récupérer TOUS les matchs de cette saison/compétition\n                    const matches = await _lib_football_api__WEBPACK_IMPORTED_MODULE_1__.apiSportsService.getSeasonMatches(leagueId, season);\n                    console.log(`  📈 ${matches.length} matchs trouvés`);\n                    let leagueSeasonImported = 0;\n                    let processed = 0;\n                    for (const match of matches){\n                        processed++;\n                        try {\n                            // Vérifier si le match existe déjà\n                            const existing = await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findUnique({\n                                where: {\n                                    apiMatchId: match.fixture.id\n                                }\n                            });\n                            // Importer seulement les matchs terminés et non existants\n                            if (!existing && match.fixture.status.short === \"FT\") {\n                                await _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.create({\n                                    data: {\n                                        apiMatchId: match.fixture.id,\n                                        homeTeam: match.teams.home.name,\n                                        awayTeam: match.teams.away.name,\n                                        homeScore: match.goals.home || 0,\n                                        awayScore: match.goals.away || 0,\n                                        date: new Date(match.fixture.date),\n                                        status: \"FINISHED\",\n                                        competition: leagueName,\n                                        season: season.toString(),\n                                        venue: match.fixture.venue?.name,\n                                        homeTeamLogo: match.teams.home.logo,\n                                        awayTeamLogo: match.teams.away.logo\n                                    }\n                                });\n                                leagueSeasonImported++;\n                                // Log des gros matchs pour suivre le progrès\n                                if (isImportantMatch(match.teams.home.name, match.teams.away.name)) {\n                                    console.log(`      ⭐ ${match.teams.home.name} ${match.goals.home}-${match.goals.away} ${match.teams.away.name} (${new Date(match.fixture.date).toLocaleDateString()})`);\n                                }\n                            }\n                            // Progress indicator\n                            if (processed % 50 === 0) {\n                                console.log(`    📊 Progression: ${processed}/${matches.length} (${leagueSeasonImported} importés)`);\n                            }\n                        } catch (matchError) {\n                            console.error(`    ❌ Erreur match ${match.fixture.id}:`, matchError);\n                            errors.push(`${leagueName} ${season}: Match ${match.fixture.id}`);\n                        }\n                    }\n                    summary[season][leagueName] = leagueSeasonImported;\n                    totalImported += leagueSeasonImported;\n                    console.log(`  ✅ ${leagueName} ${season}: ${leagueSeasonImported} matchs importés`);\n                    // Pause entre compétitions pour ménager l'API\n                    console.log(`  ⏱️  Pause 3 secondes...`);\n                    await new Promise((resolve)=>setTimeout(resolve, 3000));\n                } catch (leagueError) {\n                    console.error(`❌ Erreur ${leagueName} ${season}:`, leagueError);\n                    summary[season][leagueName] = 0;\n                    errors.push(`${leagueName} ${season}: ${leagueError.message}`);\n                }\n            }\n            console.log(`\\n📊 BILAN SAISON ${season}:`);\n            const seasonTotal = Object.values(summary[season]).reduce((sum, count)=>sum + count, 0);\n            console.log(`  🎯 Total saison: ${seasonTotal} matchs`);\n            // Pause plus longue entre saisons\n            if (season < seasons[seasons.length - 1]) {\n                console.log(`  💤 Pause 10 secondes avant saison suivante...`);\n                await new Promise((resolve)=>setTimeout(resolve, 10000));\n            }\n        }\n        // Statistiques finales complètes\n        console.log(`\\n🎉 IMPORT MEGA HISTORIQUE TERMINÉ !`);\n        console.log(`🏆 TOTAL FINAL: ${totalImported} matchs sur 4 ans`);\n        console.log(`\\n📈 BILAN PAR SAISON:`);\n        seasons.forEach((season)=>{\n            const seasonTotal = Object.values(summary[season]).reduce((sum, count)=>sum + count, 0);\n            console.log(`  ${season}: ${seasonTotal} matchs`);\n        });\n        console.log(`\\n🏟️  BILAN PAR COMPÉTITION (toutes saisons):`);\n        Object.keys(targetLeagues).forEach((league)=>{\n            const leagueTotal = seasons.reduce((sum, season)=>sum + (summary[season][league] || 0), 0);\n            console.log(`  ${getLeagueEmoji(league)} ${league}: ${leagueTotal} matchs`);\n        });\n        // Calculer des stats impressionnantes\n        const finalStats = await calculateMegaStats();\n        res.status(200).json({\n            success: true,\n            message: \"\\uD83C\\uDF89 IMPORT MEGA HISTORIQUE TERMIN\\xc9 !\",\n            totalImported,\n            breakdown: {\n                bySeason: summary,\n                byCompetition: calculateByCompetition(summary, Object.keys(targetLeagues))\n            },\n            timespan: \"2021-2024 (4 saisons compl\\xe8tes)\",\n            competitions: Object.keys(targetLeagues),\n            stats: finalStats,\n            errors: errors.length > 0 ? errors.slice(0, 10) : undefined,\n            note: \"Base de donn\\xe9es compl\\xe8te ! Tous les matchs du Real Madrid, Barcelona, Arsenal, PSG, Bayern Munich etc. depuis 4 ans sont disponibles !\"\n        });\n    } catch (error) {\n        console.error(\"❌ Erreur g\\xe9n\\xe9rale import mega:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Mega import failed\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\n// Calculer stats par compétition\nfunction calculateByCompetition(summary, competitions) {\n    const result = {};\n    competitions.forEach((comp)=>{\n        result[comp] = Object.values(summary).reduce((total, season)=>{\n            return total + (season[comp] || 0);\n        }, 0);\n    });\n    return result;\n}\n// Détecter les gros matchs pour le suivi\nfunction isImportantMatch(homeTeam, awayTeam) {\n    const bigTeams = [\n        // Espagne\n        \"Real Madrid\",\n        \"Barcelona\",\n        \"Atletico Madrid\",\n        \"Sevilla\",\n        // Angleterre  \n        \"Manchester City\",\n        \"Arsenal\",\n        \"Liverpool\",\n        \"Chelsea\",\n        \"Manchester United\",\n        \"Tottenham\",\n        // France\n        \"Paris Saint-Germain\",\n        \"Olympique de Marseille\",\n        \"AS Monaco\",\n        \"Olympique Lyonnais\",\n        // Allemagne\n        \"Bayern Munich\",\n        \"Borussia Dortmund\",\n        \"RB Leipzig\",\n        \"Bayer Leverkusen\",\n        // Italie\n        \"Inter Milan\",\n        \"AC Milan\",\n        \"Juventus\",\n        \"AS Roma\",\n        \"Napoli\",\n        \"Atalanta\",\n        // MLS\n        \"Inter Miami\",\n        \"LA Galaxy\",\n        \"LAFC\",\n        \"New York City FC\",\n        // Saudi\n        \"Al-Nassr\",\n        \"Al-Hilal\",\n        \"Al-Ittihad\",\n        \"Al-Ahli\"\n    ];\n    return bigTeams.some((team)=>homeTeam.includes(team) || awayTeam.includes(team));\n}\nfunction getLeagueEmoji(league) {\n    const emojis = {\n        \"Premier League\": \"\\uD83C\\uDFF4\\uDB40\\uDC67\\uDB40\\uDC62\\uDB40\\uDC65\\uDB40\\uDC6E\\uDB40\\uDC67\\uDB40\\uDC7F\",\n        \"La Liga\": \"\\uD83C\\uDDEA\\uD83C\\uDDF8\",\n        \"Serie A\": \"\\uD83C\\uDDEE\\uD83C\\uDDF9\",\n        \"Bundesliga\": \"\\uD83C\\uDDE9\\uD83C\\uDDEA\",\n        \"Ligue 1\": \"\\uD83C\\uDDEB\\uD83C\\uDDF7\",\n        \"Champions League\": \"\\uD83C\\uDFC6\",\n        \"Europa League\": \"\\uD83E\\uDD48\",\n        \"Euro Championship\": \"\\uD83C\\uDDEA\\uD83C\\uDDFA\",\n        \"World Cup\": \"\\uD83C\\uDF0D\",\n        \"MLS\": \"\\uD83C\\uDDFA\\uD83C\\uDDF8\",\n        \"Saudi Pro League\": \"\\uD83C\\uDDF8\\uD83C\\uDDE6\"\n    };\n    return emojis[league] || \"⚽\";\n}\n// Calculer des statistiques impressionnantes\nasync function calculateMegaStats() {\n    try {\n        const [totalMatches, totalTeams, biggestWin, mostRatedMatch, competitionCounts] = await Promise.all([\n            // Total matches\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.count(),\n            // Nombre d'équipes uniques\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.groupBy({\n                by: [\n                    \"homeTeam\"\n                ],\n                _count: true\n            }),\n            // Plus grosse victoire\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findFirst({\n                where: {\n                    homeScore: {\n                        not: null\n                    },\n                    awayScore: {\n                        not: null\n                    }\n                },\n                orderBy: [\n                    {\n                        homeScore: \"desc\"\n                    },\n                    {\n                        awayScore: \"asc\"\n                    }\n                ],\n                select: {\n                    homeTeam: true,\n                    awayTeam: true,\n                    homeScore: true,\n                    awayScore: true,\n                    competition: true,\n                    date: true\n                }\n            }),\n            // Match le mieux noté\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findFirst({\n                where: {\n                    totalRatings: {\n                        gt: 0\n                    }\n                },\n                orderBy: [\n                    {\n                        avgRating: \"desc\"\n                    },\n                    {\n                        totalRatings: \"desc\"\n                    }\n                ],\n                select: {\n                    homeTeam: true,\n                    awayTeam: true,\n                    homeScore: true,\n                    awayScore: true,\n                    avgRating: true,\n                    totalRatings: true,\n                    competition: true\n                }\n            }),\n            // Répartition par compétition\n            _lib_prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.groupBy({\n                by: [\n                    \"competition\"\n                ],\n                _count: true,\n                orderBy: {\n                    _count: {\n                        competition: \"desc\"\n                    }\n                }\n            })\n        ]);\n        const goalDifference = biggestWin ? Math.abs((biggestWin.homeScore || 0) - (biggestWin.awayScore || 0)) : 0;\n        return {\n            totalMatches,\n            totalTeams: totalTeams.length,\n            biggestWin: biggestWin ? {\n                match: `${biggestWin.homeTeam} ${biggestWin.homeScore}-${biggestWin.awayScore} ${biggestWin.awayTeam}`,\n                difference: goalDifference,\n                competition: biggestWin.competition,\n                date: biggestWin.date\n            } : null,\n            bestRatedMatch: mostRatedMatch ? {\n                match: `${mostRatedMatch.homeTeam} ${mostRatedMatch.homeScore}-${mostRatedMatch.awayScore} ${mostRatedMatch.awayTeam}`,\n                rating: mostRatedMatch.avgRating,\n                totalRatings: mostRatedMatch.totalRatings,\n                competition: mostRatedMatch.competition\n            } : null,\n            topCompetitions: competitionCounts.slice(0, 5).map((c)=>({\n                    competition: c.competition,\n                    matches: c._count\n                }))\n        };\n    } catch (error) {\n        console.error(\"Erreur calcul stats:\", error);\n        return {\n            error: \"Could not calculate mega stats\"\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/import-mega-historical.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-mega-historical&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-mega-historical.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();