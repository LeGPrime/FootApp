"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/f1-race-details/[id]";
exports.ids = ["pages/api/f1-race-details/[id]"];
exports.modules = {

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/f1-race-details/[id].ts */ \"(api)/./pages/api/f1-race-details/[id].ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/f1-race-details/[id]\",\n        pathname: \"/api/f1-race-details/[id]\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_f1_race_details_id_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmYxLXJhY2UtZGV0YWlscyUyRiU1QmlkJTVEJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZmMS1yYWNlLWRldGFpbHMlMkYlNUJpZCU1RC50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNnRTtBQUNoRTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsNkRBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDZEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLz80MWY1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvZjEtcmFjZS1kZXRhaWxzL1tpZF0udHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9mMS1yYWNlLWRldGFpbHMvW2lkXVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2YxLXJhY2UtZGV0YWlscy9baWRdXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/f1-api.ts":
/*!***********************!*\
  !*** ./lib/f1-api.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   f1API: () => (/* binding */ f1API)\n/* harmony export */ });\n// lib/f1-api.ts\n// Service pour l'API Formula 1 officielle\nconst RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;\nconst RAPIDAPI_HOST = \"api-formula-1.p.rapidapi.com\";\nclass F1APIService {\n    async request(endpoint) {\n        if (!RAPIDAPI_KEY) {\n            throw new Error(\"RAPIDAPI_KEY non configur\\xe9e pour l'API F1\");\n        }\n        const response = await fetch(`${this.baseUrl}${endpoint}`, {\n            method: \"GET\",\n            headers: {\n                \"X-RapidAPI-Key\": RAPIDAPI_KEY,\n                \"X-RapidAPI-Host\": RAPIDAPI_HOST\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Erreur API F1: ${response.status} - ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data.response || data;\n    }\n    // R√©cup√©rer les courses d'une saison\n    async getRaces(season = 2024) {\n        try {\n            console.log(`üèÅ R√©cup√©ration des courses F1 ${season}...`);\n            const races = await this.request(`/races?season=${season}`);\n            console.log(`‚úÖ ${races.length} courses trouv√©es pour ${season}`);\n            return races;\n        } catch (error) {\n            console.error(\"‚ùå Erreur getRaces:\", error);\n            return [];\n        }\n    }\n    // R√©cup√©rer les d√©tails d'une course sp√©cifique\n    async getRaceDetails(raceId) {\n        try {\n            console.log(`üèÅ R√©cup√©ration d√©tails course ${raceId}...`);\n            const race = await this.request(`/races/${raceId}`);\n            return race;\n        } catch (error) {\n            console.error(\"‚ùå Erreur getRaceDetails:\", error);\n            return null;\n        }\n    }\n    // R√©cup√©rer les r√©sultats d'une course\n    async getRaceResults(raceId) {\n        try {\n            console.log(`üèÅ R√©cup√©ration r√©sultats course ${raceId}...`);\n            const results = await this.request(`/races/${raceId}/results`);\n            console.log(`‚úÖ ${results.length} r√©sultats trouv√©s`);\n            return results;\n        } catch (error) {\n            console.error(\"‚ùå Erreur getRaceResults:\", error);\n            return [];\n        }\n    }\n    // R√©cup√©rer tous les pilotes d'une saison\n    async getDrivers(season = 2024) {\n        try {\n            console.log(`üë®‚Äç‚úàÔ∏è R√©cup√©ration pilotes F1 ${season}...`);\n            const drivers = await this.request(`/drivers?season=${season}`);\n            console.log(`‚úÖ ${drivers.length} pilotes trouv√©s pour ${season}`);\n            return drivers;\n        } catch (error) {\n            console.error(\"‚ùå Erreur getDrivers:\", error);\n            return [];\n        }\n    }\n    // R√©cup√©rer le classement des pilotes\n    async getDriversRanking(season = 2024) {\n        try {\n            console.log(`üèÜ R√©cup√©ration classement pilotes ${season}...`);\n            const ranking = await this.request(`/rankings/drivers?season=${season}`);\n            console.log(`‚úÖ Classement de ${ranking.length} pilotes r√©cup√©r√©`);\n            return ranking;\n        } catch (error) {\n            console.error(\"‚ùå Erreur getDriversRanking:\", error);\n            return [];\n        }\n    }\n    // R√©cup√©rer les qualifications d'une course\n    async getQualifying(raceId) {\n        try {\n            console.log(`‚è±Ô∏è R√©cup√©ration qualifications course ${raceId}...`);\n            const qualifying = await this.request(`/races/${raceId}/qualifying`);\n            return qualifying;\n        } catch (error) {\n            console.error(\"‚ùå Erreur getQualifying:\", error);\n            return [];\n        }\n    }\n    // R√©cup√©rer les s√©ances d'entra√Ænement\n    async getPractice(raceId, practiceNumber) {\n        try {\n            console.log(`üèÉ R√©cup√©ration Practice ${practiceNumber} course ${raceId}...`);\n            const practice = await this.request(`/races/${raceId}/practice-${practiceNumber}`);\n            return practice;\n        } catch (error) {\n            console.error(`‚ùå Erreur getPractice${practiceNumber}:`, error);\n            return [];\n        }\n    }\n    // Importer les courses F1 dans la base\n    async importF1Races(season = 2024) {\n        const result = {\n            imported: 0,\n            skipped: 0,\n            errors: 0,\n            examples: []\n        };\n        try {\n            const races = await this.getRaces(season);\n            for (const race of races){\n                try {\n                    // Convertir la course F1 au format Match\n                    const matchData = {\n                        apiMatchId: race.id,\n                        sport: \"F1\",\n                        homeTeam: race.competition.name,\n                        awayTeam: race.circuit.name,\n                        homeScore: null,\n                        awayScore: null,\n                        date: new Date(race.date),\n                        status: this.convertF1Status(race.status),\n                        competition: `Formula 1 ${season}`,\n                        season: season.toString(),\n                        venue: `${race.circuit.name}, ${race.competition.location.city}`,\n                        referee: null,\n                        homeTeamLogo: race.circuit.image,\n                        awayTeamLogo: null,\n                        details: {\n                            circuit: race.circuit,\n                            location: race.competition.location,\n                            fastest_lap: race.fastest_lap,\n                            type: \"F1_GRAND_PRIX\"\n                        }\n                    };\n                    // V√©rifier si la course existe d√©j√†\n                    const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n                    const prisma = new PrismaClient();\n                    const existing = await prisma.match.findUnique({\n                        where: {\n                            apiMatchId: race.id\n                        }\n                    });\n                    if (existing) {\n                        result.skipped++;\n                        continue;\n                    }\n                    await prisma.match.create({\n                        data: matchData\n                    });\n                    result.imported++;\n                    result.examples.push(`${race.competition.name} (${race.circuit.name})`);\n                } catch (error) {\n                    console.error(`‚ùå Erreur import course ${race.id}:`, error);\n                    result.errors++;\n                }\n            }\n        } catch (error) {\n            console.error(\"‚ùå Erreur importF1Races:\", error);\n            result.errors++;\n        }\n        return result;\n    }\n    // Importer les pilotes F1 comme joueurs\n    async importF1Drivers(season = 2024) {\n        const result = {\n            imported: 0,\n            skipped: 0,\n            errors: 0,\n            examples: []\n        };\n        try {\n            const drivers = await this.getDrivers(season);\n            for (const driver of drivers){\n                try {\n                    const currentTeam = driver.teams.find((t)=>t.season === season);\n                    const playerData = {\n                        id: `f1_driver_${driver.id}`,\n                        name: driver.name,\n                        number: driver.number,\n                        position: \"DRIVER\",\n                        team: currentTeam?.team.name || \"Formula 1\",\n                        sport: \"F1\"\n                    };\n                    const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n                    const prisma = new PrismaClient();\n                    const existing = await prisma.player.findUnique({\n                        where: {\n                            id: playerData.id\n                        }\n                    });\n                    if (existing) {\n                        result.skipped++;\n                        continue;\n                    }\n                    await prisma.player.create({\n                        data: playerData\n                    });\n                    result.imported++;\n                    result.examples.push(`${driver.name} (${currentTeam?.team.name || \"F1\"})`);\n                } catch (error) {\n                    console.error(`‚ùå Erreur import pilote ${driver.id}:`, error);\n                    result.errors++;\n                }\n            }\n        } catch (error) {\n            console.error(\"‚ùå Erreur importF1Drivers:\", error);\n            result.errors++;\n        }\n        return result;\n    }\n    // Convertir le statut F1 vers notre format\n    convertF1Status(f1Status) {\n        const statusMap = {\n            \"Completed\": \"FINISHED\",\n            \"Finished\": \"FINISHED\",\n            \"Cancelled\": \"CANCELLED\",\n            \"Postponed\": \"POSTPONED\",\n            \"Scheduled\": \"SCHEDULED\"\n        };\n        return statusMap[f1Status] || f1Status;\n    }\n    // Test de connexion\n    async testConnection() {\n        try {\n            console.log(\"\\uD83D\\uDD0D Test connexion API F1...\");\n            const races = await this.getRaces(2024);\n            return {\n                success: true,\n                message: `‚úÖ API F1 connect√©e - ${races.length} courses trouv√©es pour 2024`,\n                data: {\n                    races: races.length,\n                    examples: races.slice(0, 3).map((r)=>r.competition.name)\n                }\n            };\n        } catch (error) {\n            console.error(\"‚ùå Erreur test F1:\", error);\n            return {\n                success: false,\n                message: `‚ùå Erreur API F1: ${error.message}`\n            };\n        }\n    }\n    constructor(){\n        this.baseUrl = `https://${RAPIDAPI_HOST}`;\n    }\n}\nconst f1API = new F1APIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/f1-api.ts\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./pages/api/f1-race-details/[id].ts":
/*!*******************************************!*\
  !*** ./pages/api/f1-race-details/[id].ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../lib/f1-api */ \"(api)/./lib/f1-api.ts\");\n/* harmony import */ var _lib_prisma__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../lib/prisma */ \"(api)/./lib/prisma.ts\");\n// pages/api/f1-race-details/[id].ts\n\n\nasync function handler(req, res) {\n    const { id } = req.query;\n    if (req.method !== \"GET\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    try {\n        console.log(`üèÅ R√©cup√©ration d√©tails F1 pour match ${id}...`);\n        // 1. R√©cup√©rer le match F1 de la DB\n        const match = await _lib_prisma__WEBPACK_IMPORTED_MODULE_1__.prisma.match.findUnique({\n            where: {\n                id: id\n            }\n        });\n        if (!match || match.sport !== \"F1\") {\n            return res.status(404).json({\n                error: \"Course F1 non trouv\\xe9e\"\n            });\n        }\n        console.log(`üèÅ Course trouv√©e: ${match.homeTeam}`);\n        // 2. Essayer de r√©cup√©rer les donn√©es de l'API F1\n        let raceResults = [];\n        let qualifying = [];\n        let drivers = [];\n        try {\n            console.log(`üîç R√©cup√©ration donn√©es API F1 pour course ${match.apiMatchId}...`);\n            // R√©cup√©rer les r√©sultats de la course\n            raceResults = await _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__.f1API.getRaceResults(match.apiMatchId);\n            console.log(`‚úÖ ${raceResults.length} r√©sultats r√©cup√©r√©s`);\n            // R√©cup√©rer les qualifications\n            qualifying = await _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__.f1API.getQualifying(match.apiMatchId);\n            console.log(`‚úÖ ${qualifying.length} qualifications r√©cup√©r√©es`);\n            // R√©cup√©rer tous les pilotes de la saison\n            const season = parseInt(match.season) || 2024;\n            drivers = await _lib_f1_api__WEBPACK_IMPORTED_MODULE_0__.f1API.getDrivers(season);\n            console.log(`‚úÖ ${drivers.length} pilotes r√©cup√©r√©s`);\n        } catch (apiError) {\n            console.error(\"‚ö†Ô∏è Erreur API F1, g\\xe9n\\xe9ration donn\\xe9es mock:\", apiError);\n            // G√©n√©rer des donn√©es mock si l'API ne r√©pond pas\n            const mockData = generateMockF1Data(match.homeTeam);\n            raceResults = mockData.results;\n            qualifying = mockData.qualifying;\n            drivers = mockData.drivers;\n        }\n        // 3. Retourner les donn√©es\n        res.status(200).json({\n            success: true,\n            race: {\n                id: match.id,\n                name: match.homeTeam,\n                circuit: match.awayTeam,\n                date: match.date,\n                venue: match.venue\n            },\n            results: raceResults,\n            qualifying: qualifying,\n            drivers: drivers,\n            source: raceResults.length > 0 ? \"api\" : \"mock\"\n        });\n    } catch (error) {\n        console.error(\"‚ùå Erreur d\\xe9tails F1:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Erreur lors de la r\\xe9cup\\xe9ration des d\\xe9tails F1\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        });\n    }\n}\n// Fonction pour g√©n√©rer des donn√©es F1 mock r√©alistes\nfunction generateMockF1Data(raceName) {\n    const teams = [\n        \"Red Bull Racing\",\n        \"McLaren\",\n        \"Ferrari\",\n        \"Mercedes\",\n        \"Aston Martin\",\n        \"Alpine\",\n        \"Williams\",\n        \"RB\",\n        \"Kick Sauber\",\n        \"Haas\"\n    ];\n    const drivers = [\n        {\n            name: \"Max Verstappen\",\n            number: 1,\n            team: \"Red Bull Racing\"\n        },\n        {\n            name: \"Sergio P\\xe9rez\",\n            number: 11,\n            team: \"Red Bull Racing\"\n        },\n        {\n            name: \"Lando Norris\",\n            number: 4,\n            team: \"McLaren\"\n        },\n        {\n            name: \"Oscar Piastri\",\n            number: 81,\n            team: \"McLaren\"\n        },\n        {\n            name: \"Charles Leclerc\",\n            number: 16,\n            team: \"Ferrari\"\n        },\n        {\n            name: \"Carlos Sainz\",\n            number: 55,\n            team: \"Ferrari\"\n        },\n        {\n            name: \"Lewis Hamilton\",\n            number: 44,\n            team: \"Mercedes\"\n        },\n        {\n            name: \"George Russell\",\n            number: 63,\n            team: \"Mercedes\"\n        },\n        {\n            name: \"Fernando Alonso\",\n            number: 14,\n            team: \"Aston Martin\"\n        },\n        {\n            name: \"Lance Stroll\",\n            number: 18,\n            team: \"Aston Martin\"\n        },\n        {\n            name: \"Pierre Gasly\",\n            number: 10,\n            team: \"Alpine\"\n        },\n        {\n            name: \"Esteban Ocon\",\n            number: 31,\n            team: \"Alpine\"\n        },\n        {\n            name: \"Alex Albon\",\n            number: 23,\n            team: \"Williams\"\n        },\n        {\n            name: \"Logan Sargeant\",\n            number: 2,\n            team: \"Williams\"\n        },\n        {\n            name: \"Yuki Tsunoda\",\n            number: 22,\n            team: \"RB\"\n        },\n        {\n            name: \"Daniel Ricciardo\",\n            number: 3,\n            team: \"RB\"\n        },\n        {\n            name: \"Valtteri Bottas\",\n            number: 77,\n            team: \"Kick Sauber\"\n        },\n        {\n            name: \"Zhou Guanyu\",\n            number: 24,\n            team: \"Kick Sauber\"\n        },\n        {\n            name: \"Kevin Magnussen\",\n            number: 20,\n            team: \"Haas\"\n        },\n        {\n            name: \"Nico H\\xfclkenberg\",\n            number: 27,\n            team: \"Haas\"\n        }\n    ];\n    // Points F1 r√©alistes\n    const points = [\n        25,\n        18,\n        15,\n        12,\n        10,\n        8,\n        6,\n        4,\n        2,\n        1,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0,\n        0\n    ];\n    // G√©n√©rer les r√©sultats de course\n    const shuffledDrivers = [\n        ...drivers\n    ].sort(()=>Math.random() - 0.5);\n    const results = shuffledDrivers.map((driver, index)=>({\n            id: index + 1,\n            name: driver.name,\n            abbr: driver.name.split(\" \").map((n)=>n[0]).join(\"\"),\n            number: driver.number,\n            team: driver.team,\n            position: index + 1,\n            time: index === 0 ? \"1:42:34.567\" : `+${(index * 12 + Math.random() * 10).toFixed(3)}`,\n            points: points[index] || 0,\n            grid: Math.floor(Math.random() * 20) + 1,\n            fastest_lap: index === 0 ? {\n                lap: Math.floor(Math.random() * 50) + 10,\n                time: \"1:18.234\",\n                speed: \"320.5 km/h\"\n            } : undefined\n        }));\n    // G√©n√©rer les qualifications (ordre diff√©rent)\n    const qualifyingOrder = [\n        ...drivers\n    ].sort(()=>Math.random() - 0.5);\n    const qualifying = qualifyingOrder.map((driver, index)=>({\n            id: index + 1,\n            name: driver.name,\n            abbr: driver.name.split(\" \").map((n)=>n[0]).join(\"\"),\n            number: driver.number,\n            team: driver.team,\n            position: index + 1,\n            time: `1:${(18 + Math.floor(index / 5)).toString().padStart(2, \"0\")}.${Math.floor(Math.random() * 999).toString().padStart(3, \"0\")}`,\n            grid: index + 1\n        }));\n    return {\n        results,\n        qualifying,\n        drivers: results // Les pilotes avec leurs donn√©es de course\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/f1-race-details/[id].ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Ff1-race-details%2F%5Bid%5D&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Ff1-race-details%2F%5Bid%5D.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();