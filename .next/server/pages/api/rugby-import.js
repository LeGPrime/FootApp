"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/rugby-import";
exports.ids = ["pages/api/rugby-import"];
exports.modules = {

/***/ "@next-auth/prisma-adapter":
/*!********************************************!*\
  !*** external "@next-auth/prisma-adapter" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@next-auth/prisma-adapter");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "next-auth/providers/github":
/*!*********************************************!*\
  !*** external "next-auth/providers/github" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/github");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frugby-import&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frugby-import.ts&middlewareConfigBase64=e30%3D!":
/*!******************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frugby-import&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frugby-import.ts&middlewareConfigBase64=e30%3D! ***!
  \******************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_rugby_import_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/rugby-import.ts */ \"(api)/./pages/api/rugby-import.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_rugby_import_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_rugby_import_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/rugby-import\",\n        pathname: \"/api/rugby-import\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_rugby_import_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnJ1Z2J5LWltcG9ydCZwcmVmZXJyZWRSZWdpb249JmFic29sdXRlUGFnZVBhdGg9LiUyRnBhZ2VzJTJGYXBpJTJGcnVnYnktaW1wb3J0LnRzJm1pZGRsZXdhcmVDb25maWdCYXNlNjQ9ZTMwJTNEISIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNMO0FBQzFEO0FBQ3dEO0FBQ3hEO0FBQ0EsaUVBQWUsd0VBQUssQ0FBQyx1REFBUSxZQUFZLEVBQUM7QUFDMUM7QUFDTyxlQUFlLHdFQUFLLENBQUMsdURBQVE7QUFDcEM7QUFDTyx3QkFBd0IsZ0hBQW1CO0FBQ2xEO0FBQ0EsY0FBYyx5RUFBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMLFlBQVk7QUFDWixDQUFDOztBQUVEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vdHJhdGUvP2ViZWEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnZXNBUElSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL3BhZ2VzLWFwaS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBob2lzdCB9IGZyb20gXCJuZXh0L2Rpc3QvYnVpbGQvdGVtcGxhdGVzL2hlbHBlcnNcIjtcbi8vIEltcG9ydCB0aGUgdXNlcmxhbmQgY29kZS5cbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIuL3BhZ2VzL2FwaS9ydWdieS1pbXBvcnQudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9ydWdieS1pbXBvcnRcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9ydWdieS1pbXBvcnRcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frugby-import&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frugby-import.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @next-auth/prisma-adapter */ \"@next-auth/prisma-adapter\");\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/github */ \"next-auth/providers/github\");\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prisma */ \"(api)/./lib/prisma.ts\");\n\n\n\n\n\nconst authOptions = {\n    adapter: (0,_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__.PrismaAdapter)(_prisma__WEBPACK_IMPORTED_MODULE_4__.prisma),\n    providers: [\n        next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GITHUB_ID,\n            clientSecret: process.env.GITHUB_SECRET\n        }),\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2___default()({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Mot de passe\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                const user = await _prisma__WEBPACK_IMPORTED_MODULE_4__.prisma.user.findUnique({\n                    where: {\n                        email: credentials.email\n                    }\n                });\n                if (!user || !user.password) {\n                    return null;\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_3___default().compare(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    username: user.username\n                };\n            }\n        })\n    ],\n    callbacks: {\n        session: async ({ session, token })=>{\n            if (session?.user) {\n                session.user.id = token.sub;\n            }\n            return session;\n        },\n        jwt: async ({ user, token })=>{\n            if (user) {\n                token.uid = user.id;\n            }\n            return token;\n        }\n    },\n    session: {\n        strategy: \"jwt\"\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ3lEO0FBQ0Y7QUFDVTtBQUNwQztBQUNJO0FBRTFCLE1BQU1LLGNBQStCO0lBQzFDQyxTQUFTTix3RUFBYUEsQ0FBQ0ksMkNBQU1BO0lBQzdCRyxXQUFXO1FBQ1ROLGlFQUFjQSxDQUFDO1lBQ2JPLFVBQVVDLFFBQVFDLEdBQUcsQ0FBQ0MsU0FBUztZQUMvQkMsY0FBY0gsUUFBUUMsR0FBRyxDQUFDRyxhQUFhO1FBQ3pDO1FBQ0FYLHNFQUFtQkEsQ0FBQztZQUNsQlksTUFBTTtZQUNOQyxhQUFhO2dCQUNYQyxPQUFPO29CQUFFQyxPQUFPO29CQUFTQyxNQUFNO2dCQUFRO2dCQUN2Q0MsVUFBVTtvQkFBRUYsT0FBTztvQkFBZ0JDLE1BQU07Z0JBQVc7WUFDdEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFDLFNBQVMsQ0FBQ0QsYUFBYUksVUFBVTtvQkFDakQsT0FBTztnQkFDVDtnQkFFQSxNQUFNRSxPQUFPLE1BQU1qQiwyQ0FBTUEsQ0FBQ2lCLElBQUksQ0FBQ0MsVUFBVSxDQUFDO29CQUN4Q0MsT0FBTzt3QkFDTFAsT0FBT0QsWUFBWUMsS0FBSztvQkFDMUI7Z0JBQ0Y7Z0JBRUEsSUFBSSxDQUFDSyxRQUFRLENBQUNBLEtBQUtGLFFBQVEsRUFBRTtvQkFDM0IsT0FBTztnQkFDVDtnQkFFQSxNQUFNSyxrQkFBa0IsTUFBTXJCLHVEQUFjLENBQzFDWSxZQUFZSSxRQUFRLEVBQ3BCRSxLQUFLRixRQUFRO2dCQUdmLElBQUksQ0FBQ0ssaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xFLElBQUlMLEtBQUtLLEVBQUU7b0JBQ1hWLE9BQU9LLEtBQUtMLEtBQUs7b0JBQ2pCRixNQUFNTyxLQUFLUCxJQUFJO29CQUNmYSxVQUFVTixLQUFLTSxRQUFRO2dCQUN6QjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxXQUFXO1FBQ1RDLFNBQVMsT0FBTyxFQUFFQSxPQUFPLEVBQUVDLEtBQUssRUFBRTtZQUNoQyxJQUFJRCxTQUFTUixNQUFNO2dCQUNqQlEsUUFBUVIsSUFBSSxDQUFDSyxFQUFFLEdBQUdJLE1BQU1DLEdBQUc7WUFDN0I7WUFDQSxPQUFPRjtRQUNUO1FBQ0FHLEtBQUssT0FBTyxFQUFFWCxJQUFJLEVBQUVTLEtBQUssRUFBRTtZQUN6QixJQUFJVCxNQUFNO2dCQUNSUyxNQUFNRyxHQUFHLEdBQUdaLEtBQUtLLEVBQUU7WUFDckI7WUFDQSxPQUFPSTtRQUNUO0lBQ0Y7SUFDQUQsU0FBUztRQUNQSyxVQUFVO0lBQ1o7SUFDQUMsT0FBTztRQUNMQyxRQUFRO0lBQ1Y7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vdHJhdGUvLi9saWIvYXV0aC50cz9iZjdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gXCJuZXh0LWF1dGhcIlxuaW1wb3J0IHsgUHJpc21hQWRhcHRlciB9IGZyb20gXCJAbmV4dC1hdXRoL3ByaXNtYS1hZGFwdGVyXCJcbmltcG9ydCBHaXRodWJQcm92aWRlciBmcm9tIFwibmV4dC1hdXRoL3Byb3ZpZGVycy9naXRodWJcIlxuaW1wb3J0IENyZWRlbnRpYWxzUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIlxuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0anNcIlxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSBcIi4vcHJpc21hXCJcblxuZXhwb3J0IGNvbnN0IGF1dGhPcHRpb25zOiBOZXh0QXV0aE9wdGlvbnMgPSB7XG4gIGFkYXB0ZXI6IFByaXNtYUFkYXB0ZXIocHJpc21hKSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgR2l0aHViUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkdJVEhVQl9JRCEsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdJVEhVQl9TRUNSRVQhLFxuICAgIH0pLFxuICAgIENyZWRlbnRpYWxzUHJvdmlkZXIoe1xuICAgICAgbmFtZTogXCJjcmVkZW50aWFsc1wiLFxuICAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgZW1haWw6IHsgbGFiZWw6IFwiRW1haWxcIiwgdHlwZTogXCJlbWFpbFwiIH0sXG4gICAgICAgIHBhc3N3b3JkOiB7IGxhYmVsOiBcIk1vdCBkZSBwYXNzZVwiLCB0eXBlOiBcInBhc3N3b3JkXCIgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jIGF1dGhvcml6ZShjcmVkZW50aWFscykge1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzPy5lbWFpbCB8fCAhY3JlZGVudGlhbHM/LnBhc3N3b3JkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgZW1haWw6IGNyZWRlbnRpYWxzLmVtYWlsXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICghdXNlciB8fCAhdXNlci5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShcbiAgICAgICAgICBjcmVkZW50aWFscy5wYXNzd29yZCxcbiAgICAgICAgICB1c2VyLnBhc3N3b3JkXG4gICAgICAgIClcblxuICAgICAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgICB1c2VybmFtZTogdXNlci51c2VybmFtZSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIF0sXG4gIGNhbGxiYWNrczoge1xuICAgIHNlc3Npb246IGFzeW5jICh7IHNlc3Npb24sIHRva2VuIH0pID0+IHtcbiAgICAgIGlmIChzZXNzaW9uPy51c2VyKSB7XG4gICAgICAgIHNlc3Npb24udXNlci5pZCA9IHRva2VuLnN1YiFcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uXG4gICAgfSxcbiAgICBqd3Q6IGFzeW5jICh7IHVzZXIsIHRva2VuIH0pID0+IHtcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHRva2VuLnVpZCA9IHVzZXIuaWRcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlblxuICAgIH0sXG4gIH0sXG4gIHNlc3Npb246IHtcbiAgICBzdHJhdGVneTogJ2p3dCcsXG4gIH0sXG4gIHBhZ2VzOiB7XG4gICAgc2lnbkluOiAnL2F1dGgvc2lnbmluJyxcbiAgfSxcbn1cbiJdLCJuYW1lcyI6WyJQcmlzbWFBZGFwdGVyIiwiR2l0aHViUHJvdmlkZXIiLCJDcmVkZW50aWFsc1Byb3ZpZGVyIiwiYmNyeXB0IiwicHJpc21hIiwiYXV0aE9wdGlvbnMiLCJhZGFwdGVyIiwicHJvdmlkZXJzIiwiY2xpZW50SWQiLCJwcm9jZXNzIiwiZW52IiwiR0lUSFVCX0lEIiwiY2xpZW50U2VjcmV0IiwiR0lUSFVCX1NFQ1JFVCIsIm5hbWUiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJ0eXBlIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsImlkIiwidXNlcm5hbWUiLCJjYWxsYmFja3MiLCJzZXNzaW9uIiwidG9rZW4iLCJzdWIiLCJqd3QiLCJ1aWQiLCJzdHJhdGVneSIsInBhZ2VzIiwic2lnbkluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/auth.ts\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./lib/rugby-api.ts":
/*!**************************!*\
  !*** ./lib/rugby-api.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   rugbyAPI: () => (/* binding */ rugbyAPI)\n/* harmony export */ });\n// lib/rugby-api.ts - SERVICE API RUGBY 2025\n// 🏉 Import Rugby : Top 14, Champions Cup, Internationaux\nconst RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;\nconst RAPIDAPI_HOST = \"api-rugby.p.rapidapi.com\";\nclass RugbyAPIService {\n    async request(endpoint) {\n        if (!RAPIDAPI_KEY) {\n            throw new Error(\"RAPIDAPI_KEY non configur\\xe9e pour l'API Rugby\");\n        }\n        console.log(`🏉 API Rugby Request: ${endpoint}`);\n        const response = await fetch(`${this.baseUrl}${endpoint}`, {\n            method: \"GET\",\n            headers: {\n                \"X-RapidAPI-Key\": RAPIDAPI_KEY,\n                \"X-RapidAPI-Host\": RAPIDAPI_HOST\n            }\n        });\n        if (!response.ok) {\n            throw new Error(`Erreur API Rugby: ${response.status} - ${response.statusText}`);\n        }\n        const data = await response.json();\n        return data.response || data;\n    }\n    // 🏉 RÉCUPÉRER TOUS LES MATCHS RUGBY 2025\n    async getRugbyMatches2025() {\n        try {\n            console.log(`🏉 Récupération matchs rugby 2025...`);\n            let allMatches = [];\n            // Récupérer les matchs pour chaque compétition cible\n            for (const competition of this.targetCompetitions){\n                try {\n                    console.log(`🔍 Récupération ${competition.name}...`);\n                    // Récupérer les matchs depuis janvier 2025\n                    const matches = await this.request(`/games?league=${competition.id}&season=2025`);\n                    if (matches && matches.length > 0) {\n                        // Filtrer seulement les matchs depuis janvier 2025\n                        const filteredMatches = matches.filter((match)=>{\n                            const matchDate = new Date(match.date);\n                            const startDate = new Date(\"2025-01-01\");\n                            return matchDate >= startDate;\n                        });\n                        console.log(`📊 ${competition.name}: ${filteredMatches.length} matchs trouvés`);\n                        allMatches.push(...filteredMatches);\n                    }\n                    // Délai pour éviter le rate limiting\n                    await new Promise((resolve)=>setTimeout(resolve, 300));\n                } catch (error) {\n                    console.warn(`⚠️ Erreur pour ${competition.name}:`, error);\n                }\n            }\n            console.log(`✅ Total matchs rugby 2025: ${allMatches.length}`);\n            return allMatches;\n        } catch (error) {\n            console.error(\"❌ Erreur getRugbyMatches2025:\", error);\n            return [];\n        }\n    }\n    // 🏉 IMPORT COMPLET RUGBY 2025\n    async importRugbyMatches2025() {\n        const result = {\n            imported: 0,\n            skipped: 0,\n            errors: 0,\n            examples: [],\n            competitions: []\n        };\n        try {\n            const matches = await this.getRugbyMatches2025();\n            console.log(`🏉 ${matches.length} matchs rugby trouvés pour import`);\n            const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n            const prisma = new PrismaClient();\n            const competitionsSet = new Set();\n            for (const match of matches){\n                try {\n                    console.log(`🔍 Traitement match: ${match.teams.home.name} vs ${match.teams.away.name}`);\n                    // Vérifier si le match existe déjà\n                    const existing = await prisma.match.findFirst({\n                        where: {\n                            apiMatchId: match.id,\n                            sport: \"RUGBY\"\n                        }\n                    });\n                    if (existing) {\n                        console.log(`⚠️ Match déjà existant: ${match.id}`);\n                        result.skipped++;\n                        continue;\n                    }\n                    // Convertir le statut\n                    const status = this.convertRugbyStatus(match.status.short);\n                    // Ajouter la compétition aux stats\n                    competitionsSet.add(match.league.name);\n                    // Créer le match rugby\n                    const matchData = {\n                        apiMatchId: match.id,\n                        sport: \"RUGBY\",\n                        homeTeam: match.teams.home.name,\n                        awayTeam: match.teams.away.name,\n                        homeScore: match.scores.home,\n                        awayScore: match.scores.away,\n                        date: new Date(match.date),\n                        status: status,\n                        competition: match.league.name,\n                        season: \"2025\",\n                        venue: match.venue ? `${match.venue.name}, ${match.venue.city}` : null,\n                        referee: null,\n                        homeTeamLogo: match.teams.home.logo || null,\n                        awayTeamLogo: match.teams.away.logo || null,\n                        details: {\n                            type: \"RUGBY_MATCH\",\n                            league: match.league,\n                            country: match.country,\n                            stage: match.stage,\n                            venue: match.venue,\n                            originalStatus: match.status\n                        }\n                    };\n                    await prisma.match.create({\n                        data: matchData\n                    });\n                    result.imported++;\n                    // Ajouter aux exemples\n                    if (result.examples.length < 5) {\n                        result.examples.push(`${match.teams.home.name} vs ${match.teams.away.name} (${match.league.name})`);\n                    }\n                    console.log(`✅ Match rugby importé: ${match.teams.home.name} vs ${match.teams.away.name}`);\n                } catch (error) {\n                    console.error(`❌ Erreur import match ${match.id}:`, error);\n                    result.errors++;\n                }\n            }\n            result.competitions = Array.from(competitionsSet);\n            await prisma.$disconnect();\n        } catch (error) {\n            console.error(\"❌ Erreur importRugbyMatches2025:\", error);\n            result.errors++;\n        }\n        return result;\n    }\n    // 🏉 CONVERTIR STATUTS RUGBY\n    convertRugbyStatus(rugbyStatus) {\n        const statusMap = {\n            \"FT\": \"FINISHED\",\n            \"HT\": \"LIVE\",\n            \"LIVE\": \"LIVE\",\n            \"NS\": \"SCHEDULED\",\n            \"CANC\": \"CANCELLED\",\n            \"POSTP\": \"POSTPONED\",\n            \"ABD\": \"ABANDONED\",\n            \"AWD\": \"FINISHED\",\n            \"WO\": \"FINISHED\" // Walkover\n        };\n        return statusMap[rugbyStatus] || rugbyStatus;\n    }\n    // 🏉 RÉCUPÉRER ÉQUIPES RUGBY\n    async getRugbyTeams() {\n        try {\n            console.log(`🏉 Récupération équipes rugby...`);\n            let allTeams = [];\n            // Récupérer les équipes des compétitions principales\n            for (const competition of this.targetCompetitions.slice(0, 3)){\n                try {\n                    const teams = await this.request(`/teams?league=${competition.id}&season=2025`);\n                    if (teams && teams.length > 0) {\n                        allTeams.push(...teams);\n                        console.log(`📊 ${competition.name}: ${teams.length} équipes`);\n                    }\n                    await new Promise((resolve)=>setTimeout(resolve, 300));\n                } catch (error) {\n                    console.warn(`⚠️ Erreur équipes ${competition.name}:`, error);\n                }\n            }\n            console.log(`✅ Total équipes rugby: ${allTeams.length}`);\n            return allTeams;\n        } catch (error) {\n            console.error(\"❌ Erreur getRugbyTeams:\", error);\n            return [];\n        }\n    }\n    // 🏉 TEST DE CONNEXION API RUGBY\n    async testConnection() {\n        try {\n            console.log(\"\\uD83D\\uDD0D Test connexion API Rugby...\");\n            // Tester avec une requête simple\n            const testData = await this.request(\"/leagues?season=2025\");\n            if (testData && testData.length > 0) {\n                const rugbyLeagues = testData.filter((league)=>league.sport === \"Rugby\" || league.name.toLowerCase().includes(\"rugby\") || this.targetCompetitions.some((comp)=>comp.name.includes(league.name)));\n                return {\n                    success: true,\n                    message: `✅ API Rugby connectée - ${rugbyLeagues.length} ligues rugby trouvées`,\n                    data: {\n                        totalLeagues: testData.length,\n                        rugbyLeagues: rugbyLeagues.length,\n                        targetCompetitions: this.targetCompetitions.length,\n                        examples: rugbyLeagues.slice(0, 3).map((l)=>l.name),\n                        competitions: this.targetCompetitions.map((c)=>c.name)\n                    }\n                };\n            } else {\n                return {\n                    success: false,\n                    message: \"❌ API Rugby: Aucune ligue trouv\\xe9e\"\n                };\n            }\n        } catch (error) {\n            console.error(\"❌ Erreur test rugby:\", error);\n            return {\n                success: false,\n                message: `❌ Erreur API Rugby: ${error.message}`\n            };\n        }\n    }\n    // 🏉 IMPORT QUOTIDIEN RUGBY (pour le cron)\n    async importDailyRugbyMatches() {\n        const result = {\n            imported: 0,\n            updated: 0,\n            errors: 0\n        };\n        try {\n            console.log(\"\\uD83C\\uDFC9 Import quotidien rugby...\");\n            // Récupérer seulement les matchs récents (7 derniers jours)\n            const matches = await this.getRugbyMatches2025();\n            const recentMatches = matches.filter((match)=>{\n                const matchDate = new Date(match.date);\n                const weekAgo = new Date();\n                weekAgo.setDate(weekAgo.getDate() - 7);\n                return matchDate >= weekAgo;\n            });\n            console.log(`🔍 ${recentMatches.length} matchs rugby récents à traiter`);\n            const { PrismaClient } = await Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @prisma/client */ \"@prisma/client\", 23));\n            const prisma = new PrismaClient();\n            for (const match of recentMatches){\n                try {\n                    const existing = await prisma.match.findFirst({\n                        where: {\n                            apiMatchId: match.id,\n                            sport: \"RUGBY\"\n                        }\n                    });\n                    if (existing) {\n                        // Mettre à jour si nécessaire (scores, statut)\n                        if (existing.homeScore !== match.scores.home || existing.awayScore !== match.scores.away || existing.status !== this.convertRugbyStatus(match.status.short)) {\n                            await prisma.match.update({\n                                where: {\n                                    id: existing.id\n                                },\n                                data: {\n                                    homeScore: match.scores.home,\n                                    awayScore: match.scores.away,\n                                    status: this.convertRugbyStatus(match.status.short)\n                                }\n                            });\n                            result.updated++;\n                        }\n                    } else {\n                        // Nouveau match à importer\n                        const matchData = {\n                            apiMatchId: match.id,\n                            sport: \"RUGBY\",\n                            homeTeam: match.teams.home.name,\n                            awayTeam: match.teams.away.name,\n                            homeScore: match.scores.home,\n                            awayScore: match.scores.away,\n                            date: new Date(match.date),\n                            status: this.convertRugbyStatus(match.status.short),\n                            competition: match.league.name,\n                            season: \"2025\",\n                            venue: match.venue ? `${match.venue.name}, ${match.venue.city}` : null,\n                            referee: null,\n                            homeTeamLogo: match.teams.home.logo || null,\n                            awayTeamLogo: match.teams.away.logo || null,\n                            details: {\n                                type: \"RUGBY_MATCH\",\n                                league: match.league,\n                                country: match.country,\n                                stage: match.stage,\n                                venue: match.venue,\n                                originalStatus: match.status\n                            }\n                        };\n                        await prisma.match.create({\n                            data: matchData\n                        });\n                        result.imported++;\n                    }\n                } catch (error) {\n                    console.error(`❌ Erreur traitement match rugby ${match.id}:`, error);\n                    result.errors++;\n                }\n            }\n            await prisma.$disconnect();\n            console.log(`✅ Import quotidien rugby terminé: ${result.imported} nouveaux, ${result.updated} mis à jour`);\n        } catch (error) {\n            console.error(\"❌ Erreur import quotidien rugby:\", error);\n            result.errors++;\n        }\n        return result;\n    }\n    constructor(){\n        this.baseUrl = `https://${RAPIDAPI_HOST}`;\n        // 🏉 COMPÉTITIONS CIBLES 2025\n        this.targetCompetitions = [\n            // 🇫🇷 TOP 14 (Elite française)\n            {\n                id: 16,\n                name: \"Top 14\",\n                priority: 1,\n                type: \"DOMESTIC\"\n            },\n            // 🏆 EUROPEAN RUGBY CHAMPIONS CUP (ex-Heineken Cup)\n            {\n                id: 54,\n                name: \"European Rugby Champions Cup\",\n                priority: 1,\n                type: \"EUROPEAN\"\n            },\n            // 🌍 INTERNATIONAUX (Six Nations + Rugby Championship + Tests)\n            {\n                id: 51,\n                name: \"Six Nations Championship\",\n                priority: 1,\n                type: \"INTERNATIONAL\"\n            },\n            {\n                id: 84,\n                name: \"International Friendlies\",\n                priority: 2,\n                type: \"INTERNATIONAL\"\n            }\n        ];\n    }\n}\nconst rugbyAPI = new RugbyAPIService();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LENBQUMsQ0FBQyxDQUFDLEVBQUVhO29CQUM5REcsT0FBT0csTUFBTTtnQkFDZjtZQUNGO1lBRUEsTUFBTUksT0FBT29DLFdBQVc7WUFDeEI3RSxRQUFRQyxHQUFHLENBQUMsQ0FBQyxrQ0FBa0MsRUFBRWlDLE9BQU9DLFFBQVEsQ0FBQyxXQUFXLEVBQUVELE9BQU8rRCxPQUFPLENBQUMsV0FBVyxDQUFDO1FBRTNHLEVBQUUsT0FBT2xFLE9BQU87WUFDZC9CLFFBQVErQixLQUFLLENBQUMsb0NBQW9DQTtZQUNsREcsT0FBT0csTUFBTTtRQUNmO1FBRUEsT0FBT0g7SUFDVDs7YUExWFE5QixVQUFVLENBQUMsUUFBUSxFQUFFVCxjQUFjLENBQUM7UUFFNUMsOEJBQThCO2FBQ2JvQixxQkFBcUI7WUFDcEMsZ0NBQWdDO1lBQ2hDO2dCQUFFRyxJQUFJO2dCQUFJRixNQUFNO2dCQUFVdUYsVUFBVTtnQkFBR2pDLE1BQU07WUFBVztZQUV4RCxvREFBb0Q7WUFDcEQ7Z0JBQUVwRCxJQUFJO2dCQUFJRixNQUFNO2dCQUFnQ3VGLFVBQVU7Z0JBQUdqQyxNQUFNO1lBQVc7WUFFOUUsK0RBQStEO1lBQy9EO2dCQUFFcEQsSUFBSTtnQkFBSUYsTUFBTTtnQkFBNEJ1RixVQUFVO2dCQUFHakMsTUFBTTtZQUFnQjtZQUMvRTtnQkFBRXBELElBQUk7Z0JBQUlGLE1BQU07Z0JBQTRCdUYsVUFBVTtnQkFBR2pDLE1BQU07WUFBZ0I7U0FHaEY7O0FBNFdIO0FBRU8sTUFBTWtDLFdBQVcsSUFBSTVHLGtCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3J1Z2J5LWFwaS50cz83OTJjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi9ydWdieS1hcGkudHMgLSBTRVJWSUNFIEFQSSBSVUdCWSAyMDI1XG4vLyDwn4+JIEltcG9ydCBSdWdieSA6IFRvcCAxNCwgQ2hhbXBpb25zIEN1cCwgSW50ZXJuYXRpb25hdXhcblxuY29uc3QgUkFQSURBUElfS0VZID0gcHJvY2Vzcy5lbnYuUkFQSURBUElfS0VZXG5jb25zdCBSQVBJREFQSV9IT1NUID0gXCJhcGktcnVnYnkucC5yYXBpZGFwaS5jb21cIlxuXG5pbnRlcmZhY2UgUnVnYnlNYXRjaCB7XG4gIGlkOiBudW1iZXJcbiAgY291bnRyeToge1xuICAgIG5hbWU6IHN0cmluZ1xuICAgIGNvZGU6IHN0cmluZ1xuICAgIGZsYWc6IHN0cmluZ1xuICB9XG4gIGxlYWd1ZToge1xuICAgIGlkOiBudW1iZXJcbiAgICBuYW1lOiBzdHJpbmdcbiAgICB0eXBlOiBzdHJpbmdcbiAgICBsb2dvOiBzdHJpbmdcbiAgfVxuICBzZWFzb246IHN0cmluZ1xuICBzdGFnZTogc3RyaW5nXG4gIGRhdGU6IHN0cmluZ1xuICBzdGF0dXM6IHtcbiAgICBsb25nOiBzdHJpbmdcbiAgICBzaG9ydDogc3RyaW5nXG4gIH1cbiAgdGVhbXM6IHtcbiAgICBob21lOiB7XG4gICAgICBpZDogbnVtYmVyXG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICAgIGxvZ286IHN0cmluZ1xuICAgIH1cbiAgICBhd2F5OiB7XG4gICAgICBpZDogbnVtYmVyXG4gICAgICBuYW1lOiBzdHJpbmdcbiAgICAgIGxvZ286IHN0cmluZ1xuICAgIH1cbiAgfVxuICBzY29yZXM6IHtcbiAgICBob21lOiBudW1iZXIgfCBudWxsXG4gICAgYXdheTogbnVtYmVyIHwgbnVsbFxuICB9XG4gIHZlbnVlOiB7XG4gICAgaWQ6IG51bWJlclxuICAgIG5hbWU6IHN0cmluZ1xuICAgIGNpdHk6IHN0cmluZ1xuICAgIGNhcGFjaXR5OiBudW1iZXJcbiAgfVxufVxuXG5pbnRlcmZhY2UgUnVnYnlUZWFtIHtcbiAgaWQ6IG51bWJlclxuICBuYW1lOiBzdHJpbmdcbiAgbG9nbzogc3RyaW5nXG4gIGZvdW5kZWQ6IG51bWJlclxuICBjb3VudHJ5OiB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgY29kZTogc3RyaW5nXG4gICAgZmxhZzogc3RyaW5nXG4gIH1cbn1cblxuY2xhc3MgUnVnYnlBUElTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBiYXNlVXJsID0gYGh0dHBzOi8vJHtSQVBJREFQSV9IT1NUfWBcbiAgXG4gIC8vIPCfj4kgQ09NUMOJVElUSU9OUyBDSUJMRVMgMjAyNVxuICBwcml2YXRlIHJlYWRvbmx5IHRhcmdldENvbXBldGl0aW9ucyA9IFtcbiAgICAvLyDwn4er8J+HtyBUT1AgMTQgKEVsaXRlIGZyYW7Dp2Fpc2UpXG4gICAgeyBpZDogMTYsIG5hbWU6IFwiVG9wIDE0XCIsIHByaW9yaXR5OiAxLCB0eXBlOiBcIkRPTUVTVElDXCIgfSxcbiAgICBcbiAgICAvLyDwn4+GIEVVUk9QRUFOIFJVR0JZIENIQU1QSU9OUyBDVVAgKGV4LUhlaW5la2VuIEN1cClcbiAgICB7IGlkOiA1NCwgbmFtZTogXCJFdXJvcGVhbiBSdWdieSBDaGFtcGlvbnMgQ3VwXCIsIHByaW9yaXR5OiAxLCB0eXBlOiBcIkVVUk9QRUFOXCIgfSxcbiAgICBcbiAgICAvLyDwn4yNIElOVEVSTkFUSU9OQVVYIChTaXggTmF0aW9ucyArIFJ1Z2J5IENoYW1waW9uc2hpcCArIFRlc3RzKVxuICAgIHsgaWQ6IDUxLCBuYW1lOiBcIlNpeCBOYXRpb25zIENoYW1waW9uc2hpcFwiLCBwcmlvcml0eTogMSwgdHlwZTogXCJJTlRFUk5BVElPTkFMXCIgfSxcbiAgICB7IGlkOiA4NCwgbmFtZTogXCJJbnRlcm5hdGlvbmFsIEZyaWVuZGxpZXNcIiwgcHJpb3JpdHk6IDIsIHR5cGU6IFwiSU5URVJOQVRJT05BTFwiIH0sXG4gICAgXG4gICAgXG4gIF1cblxuICBwcml2YXRlIGFzeW5jIHJlcXVlc3QoZW5kcG9pbnQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgaWYgKCFSQVBJREFQSV9LRVkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUkFQSURBUElfS0VZIG5vbiBjb25maWd1csOpZSBwb3VyIGxcXCdBUEkgUnVnYnknKVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGDwn4+JIEFQSSBSdWdieSBSZXF1ZXN0OiAke2VuZHBvaW50fWApXG5cbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke3RoaXMuYmFzZVVybH0ke2VuZHBvaW50fWAsIHtcbiAgICAgIG1ldGhvZDogJ0dFVCcsXG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgICdYLVJhcGlkQVBJLUtleSc6IFJBUElEQVBJX0tFWSxcbiAgICAgICAgJ1gtUmFwaWRBUEktSG9zdCc6IFJBUElEQVBJX0hPU1QsXG4gICAgICB9XG4gICAgfSlcblxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyZXVyIEFQSSBSdWdieTogJHtyZXNwb25zZS5zdGF0dXN9IC0gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIHJldHVybiBkYXRhLnJlc3BvbnNlIHx8IGRhdGFcbiAgfVxuXG4gIC8vIPCfj4kgUsOJQ1VQw4lSRVIgVE9VUyBMRVMgTUFUQ0hTIFJVR0JZIDIwMjVcbiAgYXN5bmMgZ2V0UnVnYnlNYXRjaGVzMjAyNSgpOiBQcm9taXNlPFJ1Z2J5TWF0Y2hbXT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZyhg8J+PiSBSw6ljdXDDqXJhdGlvbiBtYXRjaHMgcnVnYnkgMjAyNS4uLmApXG4gICAgICBcbiAgICAgIGxldCBhbGxNYXRjaGVzOiBSdWdieU1hdGNoW10gPSBbXVxuICAgICAgXG4gICAgICAvLyBSw6ljdXDDqXJlciBsZXMgbWF0Y2hzIHBvdXIgY2hhcXVlIGNvbXDDqXRpdGlvbiBjaWJsZVxuICAgICAgZm9yIChjb25zdCBjb21wZXRpdGlvbiBvZiB0aGlzLnRhcmdldENvbXBldGl0aW9ucykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGDwn5SNIFLDqWN1cMOpcmF0aW9uICR7Y29tcGV0aXRpb24ubmFtZX0uLi5gKVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIFLDqWN1cMOpcmVyIGxlcyBtYXRjaHMgZGVwdWlzIGphbnZpZXIgMjAyNVxuICAgICAgICAgIGNvbnN0IG1hdGNoZXMgPSBhd2FpdCB0aGlzLnJlcXVlc3QoYC9nYW1lcz9sZWFndWU9JHtjb21wZXRpdGlvbi5pZH0mc2Vhc29uPTIwMjVgKVxuICAgICAgICAgIFxuICAgICAgICAgIGlmIChtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gRmlsdHJlciBzZXVsZW1lbnQgbGVzIG1hdGNocyBkZXB1aXMgamFudmllciAyMDI1XG4gICAgICAgICAgICBjb25zdCBmaWx0ZXJlZE1hdGNoZXMgPSBtYXRjaGVzLmZpbHRlcigobWF0Y2g6IGFueSkgPT4ge1xuICAgICAgICAgICAgICBjb25zdCBtYXRjaERhdGUgPSBuZXcgRGF0ZShtYXRjaC5kYXRlKVxuICAgICAgICAgICAgICBjb25zdCBzdGFydERhdGUgPSBuZXcgRGF0ZSgnMjAyNS0wMS0wMScpXG4gICAgICAgICAgICAgIHJldHVybiBtYXRjaERhdGUgPj0gc3RhcnREYXRlXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiiAke2NvbXBldGl0aW9uLm5hbWV9OiAke2ZpbHRlcmVkTWF0Y2hlcy5sZW5ndGh9IG1hdGNocyB0cm91dsOpc2ApXG4gICAgICAgICAgICBhbGxNYXRjaGVzLnB1c2goLi4uZmlsdGVyZWRNYXRjaGVzKVxuICAgICAgICAgIH1cbiAgICAgICAgICBcbiAgICAgICAgICAvLyBEw6lsYWkgcG91ciDDqXZpdGVyIGxlIHJhdGUgbGltaXRpbmdcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMzAwKSlcbiAgICAgICAgICBcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyBFcnJldXIgcG91ciAke2NvbXBldGl0aW9uLm5hbWV9OmAsIGVycm9yKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGDinIUgVG90YWwgbWF0Y2hzIHJ1Z2J5IDIwMjU6ICR7YWxsTWF0Y2hlcy5sZW5ndGh9YClcbiAgICAgIHJldHVybiBhbGxNYXRjaGVzXG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycmV1ciBnZXRSdWdieU1hdGNoZXMyMDI1OicsIGVycm9yKVxuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICB9XG5cbiAgLy8g8J+PiSBJTVBPUlQgQ09NUExFVCBSVUdCWSAyMDI1XG4gIGFzeW5jIGltcG9ydFJ1Z2J5TWF0Y2hlczIwMjUoKTogUHJvbWlzZTx7XG4gICAgaW1wb3J0ZWQ6IG51bWJlclxuICAgIHNraXBwZWQ6IG51bWJlclxuICAgIGVycm9yczogbnVtYmVyXG4gICAgZXhhbXBsZXM6IHN0cmluZ1tdXG4gICAgY29tcGV0aXRpb25zOiBzdHJpbmdbXVxuICB9PiB7XG4gICAgY29uc3QgcmVzdWx0ID0ge1xuICAgICAgaW1wb3J0ZWQ6IDAsXG4gICAgICBza2lwcGVkOiAwLFxuICAgICAgZXJyb3JzOiAwLFxuICAgICAgZXhhbXBsZXM6IFtdIGFzIHN0cmluZ1tdLFxuICAgICAgY29tcGV0aXRpb25zOiBbXSBhcyBzdHJpbmdbXVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCBtYXRjaGVzID0gYXdhaXQgdGhpcy5nZXRSdWdieU1hdGNoZXMyMDI1KClcbiAgICAgIGNvbnNvbGUubG9nKGDwn4+JICR7bWF0Y2hlcy5sZW5ndGh9IG1hdGNocyBydWdieSB0cm91dsOpcyBwb3VyIGltcG9ydGApXG4gICAgICBcbiAgICAgIGNvbnN0IHsgUHJpc21hQ2xpZW50IH0gPSBhd2FpdCBpbXBvcnQoJ0BwcmlzbWEvY2xpZW50JylcbiAgICAgIGNvbnN0IHByaXNtYSA9IG5ldyBQcmlzbWFDbGllbnQoKVxuICAgICAgXG4gICAgICBjb25zdCBjb21wZXRpdGlvbnNTZXQgPSBuZXcgU2V0PHN0cmluZz4oKVxuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IG1hdGNoIG9mIG1hdGNoZXMpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhg8J+UjSBUcmFpdGVtZW50IG1hdGNoOiAke21hdGNoLnRlYW1zLmhvbWUubmFtZX0gdnMgJHttYXRjaC50ZWFtcy5hd2F5Lm5hbWV9YClcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBWw6lyaWZpZXIgc2kgbGUgbWF0Y2ggZXhpc3RlIGTDqWrDoFxuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgcHJpc21hLm1hdGNoLmZpbmRGaXJzdCh7XG4gICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICBhcGlNYXRjaElkOiBtYXRjaC5pZCxcbiAgICAgICAgICAgICAgc3BvcnQ6IFwiUlVHQllcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGDimqDvuI8gTWF0Y2ggZMOpasOgIGV4aXN0YW50OiAke21hdGNoLmlkfWApXG4gICAgICAgICAgICByZXN1bHQuc2tpcHBlZCsrXG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIENvbnZlcnRpciBsZSBzdGF0dXRcbiAgICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmNvbnZlcnRSdWdieVN0YXR1cyhtYXRjaC5zdGF0dXMuc2hvcnQpXG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQWpvdXRlciBsYSBjb21ww6l0aXRpb24gYXV4IHN0YXRzXG4gICAgICAgICAgY29tcGV0aXRpb25zU2V0LmFkZChtYXRjaC5sZWFndWUubmFtZSlcblxuICAgICAgICAgIC8vIENyw6llciBsZSBtYXRjaCBydWdieVxuICAgICAgICAgIGNvbnN0IG1hdGNoRGF0YSA9IHtcbiAgICAgICAgICAgIGFwaU1hdGNoSWQ6IG1hdGNoLmlkLFxuICAgICAgICAgICAgc3BvcnQ6ICdSVUdCWScgYXMgY29uc3QsXG4gICAgICAgICAgICBob21lVGVhbTogbWF0Y2gudGVhbXMuaG9tZS5uYW1lLFxuICAgICAgICAgICAgYXdheVRlYW06IG1hdGNoLnRlYW1zLmF3YXkubmFtZSxcbiAgICAgICAgICAgIGhvbWVTY29yZTogbWF0Y2guc2NvcmVzLmhvbWUsXG4gICAgICAgICAgICBhd2F5U2NvcmU6IG1hdGNoLnNjb3Jlcy5hd2F5LFxuICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUobWF0Y2guZGF0ZSksXG4gICAgICAgICAgICBzdGF0dXM6IHN0YXR1cyxcbiAgICAgICAgICAgIGNvbXBldGl0aW9uOiBtYXRjaC5sZWFndWUubmFtZSxcbiAgICAgICAgICAgIHNlYXNvbjogXCIyMDI1XCIsXG4gICAgICAgICAgICB2ZW51ZTogbWF0Y2gudmVudWUgPyBgJHttYXRjaC52ZW51ZS5uYW1lfSwgJHttYXRjaC52ZW51ZS5jaXR5fWAgOiBudWxsLFxuICAgICAgICAgICAgcmVmZXJlZTogbnVsbCwgLy8gw4AgY29tcGzDqXRlciBzaSBkaXNwb25pYmxlIGRhbnMgbCdBUElcbiAgICAgICAgICAgIGhvbWVUZWFtTG9nbzogbWF0Y2gudGVhbXMuaG9tZS5sb2dvIHx8IG51bGwsXG4gICAgICAgICAgICBhd2F5VGVhbUxvZ286IG1hdGNoLnRlYW1zLmF3YXkubG9nbyB8fCBudWxsLFxuICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICB0eXBlOiAnUlVHQllfTUFUQ0gnLFxuICAgICAgICAgICAgICBsZWFndWU6IG1hdGNoLmxlYWd1ZSxcbiAgICAgICAgICAgICAgY291bnRyeTogbWF0Y2guY291bnRyeSxcbiAgICAgICAgICAgICAgc3RhZ2U6IG1hdGNoLnN0YWdlLFxuICAgICAgICAgICAgICB2ZW51ZTogbWF0Y2gudmVudWUsXG4gICAgICAgICAgICAgIG9yaWdpbmFsU3RhdHVzOiBtYXRjaC5zdGF0dXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBhd2FpdCBwcmlzbWEubWF0Y2guY3JlYXRlKHsgZGF0YTogbWF0Y2hEYXRhIH0pXG4gICAgICAgICAgcmVzdWx0LmltcG9ydGVkKytcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBBam91dGVyIGF1eCBleGVtcGxlc1xuICAgICAgICAgIGlmIChyZXN1bHQuZXhhbXBsZXMubGVuZ3RoIDwgNSkge1xuICAgICAgICAgICAgcmVzdWx0LmV4YW1wbGVzLnB1c2goYCR7bWF0Y2gudGVhbXMuaG9tZS5uYW1lfSB2cyAke21hdGNoLnRlYW1zLmF3YXkubmFtZX0gKCR7bWF0Y2gubGVhZ3VlLm5hbWV9KWApXG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnNvbGUubG9nKGDinIUgTWF0Y2ggcnVnYnkgaW1wb3J0w6k6ICR7bWF0Y2gudGVhbXMuaG9tZS5uYW1lfSB2cyAke21hdGNoLnRlYW1zLmF3YXkubmFtZX1gKVxuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycmV1ciBpbXBvcnQgbWF0Y2ggJHttYXRjaC5pZH06YCwgZXJyb3IpXG4gICAgICAgICAgcmVzdWx0LmVycm9ycysrXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmVzdWx0LmNvbXBldGl0aW9ucyA9IEFycmF5LmZyb20oY29tcGV0aXRpb25zU2V0KVxuICAgICAgYXdhaXQgcHJpc21hLiRkaXNjb25uZWN0KClcblxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyZXVyIGltcG9ydFJ1Z2J5TWF0Y2hlczIwMjU6JywgZXJyb3IpXG4gICAgICByZXN1bHQuZXJyb3JzKytcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvLyDwn4+JIENPTlZFUlRJUiBTVEFUVVRTIFJVR0JZXG4gIHByaXZhdGUgY29udmVydFJ1Z2J5U3RhdHVzKHJ1Z2J5U3RhdHVzOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHN0YXR1c01hcDogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcbiAgICAgICdGVCc6ICdGSU5JU0hFRCcsICAgICAgLy8gRnVsbCBUaW1lXG4gICAgICAnSFQnOiAnTElWRScsICAgICAgICAgIC8vIEhhbGYgVGltZSAgXG4gICAgICAnTElWRSc6ICdMSVZFJywgICAgICAgIC8vIEVuIGNvdXJzXG4gICAgICAnTlMnOiAnU0NIRURVTEVEJywgICAgIC8vIE5vdCBTdGFydGVkXG4gICAgICAnQ0FOQyc6ICdDQU5DRUxMRUQnLCAgIC8vIENhbmNlbGxlZFxuICAgICAgJ1BPU1RQJzogJ1BPU1RQT05FRCcsICAvLyBQb3N0cG9uZWRcbiAgICAgICdBQkQnOiAnQUJBTkRPTkVEJywgICAgLy8gQWJhbmRvbmVkXG4gICAgICAnQVdEJzogJ0ZJTklTSEVEJywgICAgIC8vIEF3YXJkZWQgKHZpY3RvaXJlIHN1ciB0YXBpcyB2ZXJ0KVxuICAgICAgJ1dPJzogJ0ZJTklTSEVEJyAgICAgICAvLyBXYWxrb3ZlclxuICAgIH1cbiAgICBcbiAgICByZXR1cm4gc3RhdHVzTWFwW3J1Z2J5U3RhdHVzXSB8fCBydWdieVN0YXR1c1xuICB9XG5cbiAgLy8g8J+PiSBSw4lDVVDDiVJFUiDDiVFVSVBFUyBSVUdCWVxuICBhc3luYyBnZXRSdWdieVRlYW1zKCk6IFByb21pc2U8UnVnYnlUZWFtW10+IHtcbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coYPCfj4kgUsOpY3Vww6lyYXRpb24gw6lxdWlwZXMgcnVnYnkuLi5gKVxuICAgICAgXG4gICAgICBsZXQgYWxsVGVhbXM6IFJ1Z2J5VGVhbVtdID0gW11cbiAgICAgIFxuICAgICAgLy8gUsOpY3Vww6lyZXIgbGVzIMOpcXVpcGVzIGRlcyBjb21ww6l0aXRpb25zIHByaW5jaXBhbGVzXG4gICAgICBmb3IgKGNvbnN0IGNvbXBldGl0aW9uIG9mIHRoaXMudGFyZ2V0Q29tcGV0aXRpb25zLnNsaWNlKDAsIDMpKSB7IC8vIFRvcCAzIGNvbXDDqXRpdGlvbnNcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCB0ZWFtcyA9IGF3YWl0IHRoaXMucmVxdWVzdChgL3RlYW1zP2xlYWd1ZT0ke2NvbXBldGl0aW9uLmlkfSZzZWFzb249MjAyNWApXG4gICAgICAgICAgaWYgKHRlYW1zICYmIHRlYW1zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGFsbFRlYW1zLnB1c2goLi4udGVhbXMpXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhg8J+TiiAke2NvbXBldGl0aW9uLm5hbWV9OiAke3RlYW1zLmxlbmd0aH0gw6lxdWlwZXNgKVxuICAgICAgICAgIH1cbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMzAwKSlcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oYOKaoO+4jyBFcnJldXIgw6lxdWlwZXMgJHtjb21wZXRpdGlvbi5uYW1lfTpgLCBlcnJvcilcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zb2xlLmxvZyhg4pyFIFRvdGFsIMOpcXVpcGVzIHJ1Z2J5OiAke2FsbFRlYW1zLmxlbmd0aH1gKVxuICAgICAgcmV0dXJuIGFsbFRlYW1zXG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycmV1ciBnZXRSdWdieVRlYW1zOicsIGVycm9yKVxuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICB9XG5cbiAgLy8g8J+PiSBURVNUIERFIENPTk5FWElPTiBBUEkgUlVHQllcbiAgYXN5bmMgdGVzdENvbm5lY3Rpb24oKTogUHJvbWlzZTx7XG4gICAgc3VjY2VzczogYm9vbGVhblxuICAgIG1lc3NhZ2U6IHN0cmluZ1xuICAgIGRhdGE/OiBhbnlcbiAgfT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+UjSBUZXN0IGNvbm5leGlvbiBBUEkgUnVnYnkuLi4nKVxuICAgICAgXG4gICAgICAvLyBUZXN0ZXIgYXZlYyB1bmUgcmVxdcOqdGUgc2ltcGxlXG4gICAgICBjb25zdCB0ZXN0RGF0YSA9IGF3YWl0IHRoaXMucmVxdWVzdCgnL2xlYWd1ZXM/c2Vhc29uPTIwMjUnKVxuICAgICAgXG4gICAgICBpZiAodGVzdERhdGEgJiYgdGVzdERhdGEubGVuZ3RoID4gMCkge1xuICAgICAgICBjb25zdCBydWdieUxlYWd1ZXMgPSB0ZXN0RGF0YS5maWx0ZXIoKGxlYWd1ZTogYW55KSA9PiBcbiAgICAgICAgICBsZWFndWUuc3BvcnQgPT09ICdSdWdieScgfHwgXG4gICAgICAgICAgbGVhZ3VlLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcygncnVnYnknKSB8fFxuICAgICAgICAgIHRoaXMudGFyZ2V0Q29tcGV0aXRpb25zLnNvbWUoY29tcCA9PiBjb21wLm5hbWUuaW5jbHVkZXMobGVhZ3VlLm5hbWUpKVxuICAgICAgICApXG4gICAgICAgIFxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgbWVzc2FnZTogYOKchSBBUEkgUnVnYnkgY29ubmVjdMOpZSAtICR7cnVnYnlMZWFndWVzLmxlbmd0aH0gbGlndWVzIHJ1Z2J5IHRyb3V2w6llc2AsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgdG90YWxMZWFndWVzOiB0ZXN0RGF0YS5sZW5ndGgsXG4gICAgICAgICAgICBydWdieUxlYWd1ZXM6IHJ1Z2J5TGVhZ3Vlcy5sZW5ndGgsXG4gICAgICAgICAgICB0YXJnZXRDb21wZXRpdGlvbnM6IHRoaXMudGFyZ2V0Q29tcGV0aXRpb25zLmxlbmd0aCxcbiAgICAgICAgICAgIGV4YW1wbGVzOiBydWdieUxlYWd1ZXMuc2xpY2UoMCwgMykubWFwKChsOiBhbnkpID0+IGwubmFtZSksXG4gICAgICAgICAgICBjb21wZXRpdGlvbnM6IHRoaXMudGFyZ2V0Q29tcGV0aXRpb25zLm1hcChjID0+IGMubmFtZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgbWVzc2FnZTogJ+KdjCBBUEkgUnVnYnk6IEF1Y3VuZSBsaWd1ZSB0cm91dsOpZSdcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcign4p2MIEVycmV1ciB0ZXN0IHJ1Z2J5OicsIGVycm9yKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgIG1lc3NhZ2U6IGDinYwgRXJyZXVyIEFQSSBSdWdieTogJHtlcnJvci5tZXNzYWdlfWBcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyDwn4+JIElNUE9SVCBRVU9USURJRU4gUlVHQlkgKHBvdXIgbGUgY3JvbilcbiAgYXN5bmMgaW1wb3J0RGFpbHlSdWdieU1hdGNoZXMoKTogUHJvbWlzZTx7XG4gICAgaW1wb3J0ZWQ6IG51bWJlclxuICAgIHVwZGF0ZWQ6IG51bWJlclxuICAgIGVycm9yczogbnVtYmVyXG4gIH0+IHtcbiAgICBjb25zdCByZXN1bHQgPSB7XG4gICAgICBpbXBvcnRlZDogMCxcbiAgICAgIHVwZGF0ZWQ6IDAsXG4gICAgICBlcnJvcnM6IDBcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc29sZS5sb2coJ/Cfj4kgSW1wb3J0IHF1b3RpZGllbiBydWdieS4uLicpXG4gICAgICBcbiAgICAgIC8vIFLDqWN1cMOpcmVyIHNldWxlbWVudCBsZXMgbWF0Y2hzIHLDqWNlbnRzICg3IGRlcm5pZXJzIGpvdXJzKVxuICAgICAgY29uc3QgbWF0Y2hlcyA9IGF3YWl0IHRoaXMuZ2V0UnVnYnlNYXRjaGVzMjAyNSgpXG4gICAgICBjb25zdCByZWNlbnRNYXRjaGVzID0gbWF0Y2hlcy5maWx0ZXIobWF0Y2ggPT4ge1xuICAgICAgICBjb25zdCBtYXRjaERhdGUgPSBuZXcgRGF0ZShtYXRjaC5kYXRlKVxuICAgICAgICBjb25zdCB3ZWVrQWdvID0gbmV3IERhdGUoKVxuICAgICAgICB3ZWVrQWdvLnNldERhdGUod2Vla0Fnby5nZXREYXRlKCkgLSA3KVxuICAgICAgICByZXR1cm4gbWF0Y2hEYXRlID49IHdlZWtBZ29cbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKGDwn5SNICR7cmVjZW50TWF0Y2hlcy5sZW5ndGh9IG1hdGNocyBydWdieSByw6ljZW50cyDDoCB0cmFpdGVyYClcbiAgICAgIFxuICAgICAgY29uc3QgeyBQcmlzbWFDbGllbnQgfSA9IGF3YWl0IGltcG9ydCgnQHByaXNtYS9jbGllbnQnKVxuICAgICAgY29uc3QgcHJpc21hID0gbmV3IFByaXNtYUNsaWVudCgpXG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgcmVjZW50TWF0Y2hlcykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgcHJpc21hLm1hdGNoLmZpbmRGaXJzdCh7XG4gICAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgICBhcGlNYXRjaElkOiBtYXRjaC5pZCxcbiAgICAgICAgICAgICAgc3BvcnQ6IFwiUlVHQllcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIC8vIE1ldHRyZSDDoCBqb3VyIHNpIG7DqWNlc3NhaXJlIChzY29yZXMsIHN0YXR1dClcbiAgICAgICAgICAgIGlmIChleGlzdGluZy5ob21lU2NvcmUgIT09IG1hdGNoLnNjb3Jlcy5ob21lIHx8IFxuICAgICAgICAgICAgICAgIGV4aXN0aW5nLmF3YXlTY29yZSAhPT0gbWF0Y2guc2NvcmVzLmF3YXkgfHxcbiAgICAgICAgICAgICAgICBleGlzdGluZy5zdGF0dXMgIT09IHRoaXMuY29udmVydFJ1Z2J5U3RhdHVzKG1hdGNoLnN0YXR1cy5zaG9ydCkpIHtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIGF3YWl0IHByaXNtYS5tYXRjaC51cGRhdGUoe1xuICAgICAgICAgICAgICAgIHdoZXJlOiB7IGlkOiBleGlzdGluZy5pZCB9LFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgIGhvbWVTY29yZTogbWF0Y2guc2NvcmVzLmhvbWUsXG4gICAgICAgICAgICAgICAgICBhd2F5U2NvcmU6IG1hdGNoLnNjb3Jlcy5hd2F5LFxuICAgICAgICAgICAgICAgICAgc3RhdHVzOiB0aGlzLmNvbnZlcnRSdWdieVN0YXR1cyhtYXRjaC5zdGF0dXMuc2hvcnQpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICByZXN1bHQudXBkYXRlZCsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5vdXZlYXUgbWF0Y2ggw6AgaW1wb3J0ZXJcbiAgICAgICAgICAgIGNvbnN0IG1hdGNoRGF0YSA9IHtcbiAgICAgICAgICAgICAgYXBpTWF0Y2hJZDogbWF0Y2guaWQsXG4gICAgICAgICAgICAgIHNwb3J0OiAnUlVHQlknIGFzIGNvbnN0LFxuICAgICAgICAgICAgICBob21lVGVhbTogbWF0Y2gudGVhbXMuaG9tZS5uYW1lLFxuICAgICAgICAgICAgICBhd2F5VGVhbTogbWF0Y2gudGVhbXMuYXdheS5uYW1lLFxuICAgICAgICAgICAgICBob21lU2NvcmU6IG1hdGNoLnNjb3Jlcy5ob21lLFxuICAgICAgICAgICAgICBhd2F5U2NvcmU6IG1hdGNoLnNjb3Jlcy5hd2F5LFxuICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShtYXRjaC5kYXRlKSxcbiAgICAgICAgICAgICAgc3RhdHVzOiB0aGlzLmNvbnZlcnRSdWdieVN0YXR1cyhtYXRjaC5zdGF0dXMuc2hvcnQpLFxuICAgICAgICAgICAgICBjb21wZXRpdGlvbjogbWF0Y2gubGVhZ3VlLm5hbWUsXG4gICAgICAgICAgICAgIHNlYXNvbjogXCIyMDI1XCIsXG4gICAgICAgICAgICAgIHZlbnVlOiBtYXRjaC52ZW51ZSA/IGAke21hdGNoLnZlbnVlLm5hbWV9LCAke21hdGNoLnZlbnVlLmNpdHl9YCA6IG51bGwsXG4gICAgICAgICAgICAgIHJlZmVyZWU6IG51bGwsXG4gICAgICAgICAgICAgIGhvbWVUZWFtTG9nbzogbWF0Y2gudGVhbXMuaG9tZS5sb2dvIHx8IG51bGwsXG4gICAgICAgICAgICAgIGF3YXlUZWFtTG9nbzogbWF0Y2gudGVhbXMuYXdheS5sb2dvIHx8IG51bGwsXG4gICAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnUlVHQllfTUFUQ0gnLFxuICAgICAgICAgICAgICAgIGxlYWd1ZTogbWF0Y2gubGVhZ3VlLFxuICAgICAgICAgICAgICAgIGNvdW50cnk6IG1hdGNoLmNvdW50cnksXG4gICAgICAgICAgICAgICAgc3RhZ2U6IG1hdGNoLnN0YWdlLFxuICAgICAgICAgICAgICAgIHZlbnVlOiBtYXRjaC52ZW51ZSxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbFN0YXR1czogbWF0Y2guc3RhdHVzXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXdhaXQgcHJpc21hLm1hdGNoLmNyZWF0ZSh7IGRhdGE6IG1hdGNoRGF0YSB9KVxuICAgICAgICAgICAgcmVzdWx0LmltcG9ydGVkKytcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycmV1ciB0cmFpdGVtZW50IG1hdGNoIHJ1Z2J5ICR7bWF0Y2guaWR9OmAsIGVycm9yKVxuICAgICAgICAgIHJlc3VsdC5lcnJvcnMrK1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBcbiAgICAgIGF3YWl0IHByaXNtYS4kZGlzY29ubmVjdCgpXG4gICAgICBjb25zb2xlLmxvZyhg4pyFIEltcG9ydCBxdW90aWRpZW4gcnVnYnkgdGVybWluw6k6ICR7cmVzdWx0LmltcG9ydGVkfSBub3V2ZWF1eCwgJHtyZXN1bHQudXBkYXRlZH0gbWlzIMOgIGpvdXJgKVxuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ+KdjCBFcnJldXIgaW1wb3J0IHF1b3RpZGllbiBydWdieTonLCBlcnJvcilcbiAgICAgIHJlc3VsdC5lcnJvcnMrK1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcnVnYnlBUEkgPSBuZXcgUnVnYnlBUElTZXJ2aWNlKClcbmV4cG9ydCB0eXBlIHsgUnVnYnlNYXRjaCwgUnVnYnlUZWFtIH0iXSwibmFtZXMiOlsiUkFQSURBUElfS0VZIiwicHJvY2VzcyIsImVudiIsIlJBUElEQVBJX0hPU1QiLCJSdWdieUFQSVNlcnZpY2UiLCJyZXF1ZXN0IiwiZW5kcG9pbnQiLCJFcnJvciIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsImZldGNoIiwiYmFzZVVybCIsIm1ldGhvZCIsImhlYWRlcnMiLCJvayIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJkYXRhIiwianNvbiIsImdldFJ1Z2J5TWF0Y2hlczIwMjUiLCJhbGxNYXRjaGVzIiwiY29tcGV0aXRpb24iLCJ0YXJnZXRDb21wZXRpdGlvbnMiLCJuYW1lIiwibWF0Y2hlcyIsImlkIiwibGVuZ3RoIiwiZmlsdGVyZWRNYXRjaGVzIiwiZmlsdGVyIiwibWF0Y2giLCJtYXRjaERhdGUiLCJEYXRlIiwiZGF0ZSIsInN0YXJ0RGF0ZSIsInB1c2giLCJQcm9taXNlIiwicmVzb2x2ZSIsInNldFRpbWVvdXQiLCJlcnJvciIsIndhcm4iLCJpbXBvcnRSdWdieU1hdGNoZXMyMDI1IiwicmVzdWx0IiwiaW1wb3J0ZWQiLCJza2lwcGVkIiwiZXJyb3JzIiwiZXhhbXBsZXMiLCJjb21wZXRpdGlvbnMiLCJQcmlzbWFDbGllbnQiLCJwcmlzbWEiLCJjb21wZXRpdGlvbnNTZXQiLCJTZXQiLCJ0ZWFtcyIsImhvbWUiLCJhd2F5IiwiZXhpc3RpbmciLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImFwaU1hdGNoSWQiLCJzcG9ydCIsImNvbnZlcnRSdWdieVN0YXR1cyIsInNob3J0IiwiYWRkIiwibGVhZ3VlIiwibWF0Y2hEYXRhIiwiaG9tZVRlYW0iLCJhd2F5VGVhbSIsImhvbWVTY29yZSIsInNjb3JlcyIsImF3YXlTY29yZSIsInNlYXNvbiIsInZlbnVlIiwiY2l0eSIsInJlZmVyZWUiLCJob21lVGVhbUxvZ28iLCJsb2dvIiwiYXdheVRlYW1Mb2dvIiwiZGV0YWlscyIsInR5cGUiLCJjb3VudHJ5Iiwic3RhZ2UiLCJvcmlnaW5hbFN0YXR1cyIsImNyZWF0ZSIsIkFycmF5IiwiZnJvbSIsIiRkaXNjb25uZWN0IiwicnVnYnlTdGF0dXMiLCJzdGF0dXNNYXAiLCJnZXRSdWdieVRlYW1zIiwiYWxsVGVhbXMiLCJzbGljZSIsInRlc3RDb25uZWN0aW9uIiwidGVzdERhdGEiLCJydWdieUxlYWd1ZXMiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwic29tZSIsImNvbXAiLCJzdWNjZXNzIiwibWVzc2FnZSIsInRvdGFsTGVhZ3VlcyIsIm1hcCIsImwiLCJjIiwiaW1wb3J0RGFpbHlSdWdieU1hdGNoZXMiLCJ1cGRhdGVkIiwicmVjZW50TWF0Y2hlcyIsIndlZWtBZ28iLCJzZXREYXRlIiwiZ2V0RGF0ZSIsInVwZGF0ZSIsInByaW9yaXR5IiwicnVnYnlBUEkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/rugby-api.ts\n");

/***/ }),

/***/ "(api)/./pages/api/rugby-import.ts":
/*!***********************************!*\
  !*** ./pages/api/rugby-import.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/auth */ \"(api)/./lib/auth.ts\");\n/* harmony import */ var _lib_rugby_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/rugby-api */ \"(api)/./lib/rugby-api.ts\");\n// pages/api/rugby-import.ts\n// 🏉 API ENDPOINT POUR IMPORT RUGBY 2025\n\n\n\nasync function handler(req, res) {\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(req, res, _lib_auth__WEBPACK_IMPORTED_MODULE_1__.authOptions);\n    if (!session?.user?.id) {\n        return res.status(401).json({\n            error: \"Connexion requise\"\n        });\n    }\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { action } = req.body;\n    try {\n        console.log(`🏉 Import Rugby: ${action}`);\n        if (action === \"test_connection\") {\n            // 🔍 TESTER LA CONNEXION API RUGBY\n            console.log(\"\\uD83D\\uDD0D Test de connexion API Rugby...\");\n            const connectionTest = await _lib_rugby_api__WEBPACK_IMPORTED_MODULE_2__.rugbyAPI.testConnection();\n            return res.status(200).json({\n                success: connectionTest.success,\n                action: \"test_connection\",\n                message: connectionTest.message,\n                details: connectionTest.data,\n                recommendations: connectionTest.success ? [\n                    \"✅ API Rugby connect\\xe9e et op\\xe9rationnelle\",\n                    \"\\uD83C\\uDFC9 Comp\\xe9titions cibles : Top 14, Champions Cup, Six Nations\",\n                    \"\\uD83D\\uDCC5 Pr\\xeat pour import saison 2025 (depuis janvier)\",\n                    \"⚡ Import optimis\\xe9 pour \\xe9viter le rate limiting\"\n                ] : [\n                    \"❌ V\\xe9rifiez votre RAPIDAPI_KEY dans .env\",\n                    \"\\uD83D\\uDCB3 V\\xe9rifiez que votre abonnement RapidAPI est actif\",\n                    \"\\uD83D\\uDD11 Assurez-vous d'\\xeatre abonn\\xe9 \\xe0 API-Rugby sur RapidAPI\",\n                    \"\\uD83C\\uDFC9 Certaines APIs rugby peuvent n\\xe9cessiter un plan premium\"\n                ]\n            });\n        }\n        if (action === \"import_rugby_2025\") {\n            // 🏉 IMPORT COMPLET RUGBY 2025\n            console.log(\"\\uD83C\\uDFC9 IMPORT COMPLET - Rugby 2025\");\n            console.log(\"\\uD83C\\uDFAF Cibles: Top 14, Champions Cup, Six Nations, Internationaux\");\n            const result = await _lib_rugby_api__WEBPACK_IMPORTED_MODULE_2__.rugbyAPI.importRugbyMatches2025();\n            return res.status(200).json({\n                success: true,\n                action: \"import_rugby_2025\",\n                message: \"\\uD83C\\uDFC9 IMPORT RUGBY TERMIN\\xc9 !\",\n                result,\n                summary: {\n                    totalMatches: result.imported,\n                    competitions: result.competitions,\n                    examples: result.examples,\n                    breakdown: {\n                        imported: result.imported,\n                        skipped: result.skipped,\n                        errors: result.errors\n                    }\n                },\n                competitions: {\n                    domestic: [\n                        \"Top 14\",\n                        \"Gallagher Premiership\"\n                    ],\n                    european: [\n                        \"European Rugby Champions Cup\"\n                    ],\n                    international: [\n                        \"Six Nations Championship\",\n                        \"Rugby Championship\",\n                        \"International Friendlies\"\n                    ],\n                    other: [\n                        \"United Rugby Championship\"\n                    ]\n                },\n                nextSteps: [\n                    \"✅ V\\xe9rifie la page d'accueil pour voir les nouveaux matchs rugby\",\n                    '\\uD83C\\uDFC9 Filtre par sport \"Rugby\" pour voir tous les matchs',\n                    \"\\uD83C\\uDFAF Teste la notation de quelques matchs de rugby\",\n                    \"\\uD83D\\uDCCA Explore les diff\\xe9rentes comp\\xe9titions (Top 14, Champions Cup...)\",\n                    \"⏰ Configure l'import quotidien pour les mises \\xe0 jour automatiques\"\n                ]\n            });\n        }\n        if (action === \"import_daily_rugby\") {\n            // 📅 IMPORT QUOTIDIEN RUGBY (pour tester le cron)\n            console.log(\"\\uD83D\\uDCC5 Test import quotidien rugby...\");\n            const result = await _lib_rugby_api__WEBPACK_IMPORTED_MODULE_2__.rugbyAPI.importDailyRugbyMatches();\n            return res.status(200).json({\n                success: true,\n                action: \"import_daily_rugby\",\n                message: \"\\uD83D\\uDCC5 Import quotidien rugby termin\\xe9\",\n                result: {\n                    imported: result.imported,\n                    updated: result.updated,\n                    errors: result.errors\n                }\n            });\n        }\n        return res.status(400).json({\n            error: \"Action non support\\xe9e\",\n            availableActions: [\n                \"test_connection\",\n                \"import_rugby_2025\",\n                \"import_daily_rugby\"\n            ],\n            note: \"Utilise import_rugby_2025 pour d\\xe9marrer\"\n        });\n    } catch (error) {\n        console.error(\"❌ Erreur import rugby:\", error);\n        // Diagnostic d'erreur avancé pour le rugby\n        let errorMessage = \"Erreur inconnue\";\n        let troubleshooting = [];\n        if (error instanceof Error) {\n            if (error.message.includes(\"fetch\")) {\n                errorMessage = \"Erreur de connexion \\xe0 l'API Rugby\";\n                troubleshooting = [\n                    \"V\\xe9rifiez votre connexion internet\",\n                    \"V\\xe9rifiez que RAPIDAPI_KEY est d\\xe9finie dans .env\",\n                    \"V\\xe9rifiez votre abonnement RapidAPI\",\n                    \"L'API Rugby peut n\\xe9cessiter un plan premium selon le provider\"\n                ];\n            } else if (error.message.includes(\"429\")) {\n                errorMessage = \"Quota API Rugby d\\xe9pass\\xe9\";\n                troubleshooting = [\n                    \"L'API Rugby a des limites strictes\",\n                    \"Attendez quelques minutes et r\\xe9essayez\",\n                    \"V\\xe9rifiez votre plan RapidAPI\",\n                    \"Consid\\xe9rez un upgrade si n\\xe9cessaire\"\n                ];\n            } else if (error.message.includes(\"401\") || error.message.includes(\"403\")) {\n                errorMessage = \"Acc\\xe8s refus\\xe9 \\xe0 l'API Rugby\";\n                troubleshooting = [\n                    \"V\\xe9rifiez votre RAPIDAPI_KEY dans .env\",\n                    \"Assurez-vous d'\\xeatre abonn\\xe9 \\xe0 l'API Rugby\",\n                    \"Certaines APIs rugby n\\xe9cessitent une approbation manuelle\",\n                    \"V\\xe9rifiez que votre abonnement couvre le rugby\"\n                ];\n            } else if (error.message.includes(\"Prisma\") || error.message.includes(\"database\")) {\n                errorMessage = \"Erreur base de donn\\xe9es\";\n                troubleshooting = [\n                    \"V\\xe9rifiez que PostgreSQL est d\\xe9marr\\xe9\",\n                    \"V\\xe9rifiez DATABASE_URL dans .env\",\n                    \"Essayez: npx prisma db push\",\n                    \"V\\xe9rifiez que le mod\\xe8le Match supporte RUGBY\"\n                ];\n            } else {\n                errorMessage = error.message;\n                troubleshooting = [\n                    \"V\\xe9rifiez les logs du serveur pour plus de d\\xe9tails\",\n                    \"L'API Rugby peut avoir des sp\\xe9cificit\\xe9s\",\n                    \"Red\\xe9marrez le serveur Next.js si n\\xe9cessaire\"\n                ];\n            }\n        }\n        res.status(500).json({\n            success: false,\n            error: errorMessage,\n            originalError: error instanceof Error ? error.message : \"Erreur inconnue\",\n            action,\n            troubleshooting,\n            help: {\n                documentation: \"Consultez la documentation de l'API Rugby sur RapidAPI\",\n                rugby_specifics: \"Les APIs rugby peuvent avoir des limitations sp\\xe9ciales\",\n                competitions: \"V\\xe9rifiez que Top 14, Champions Cup sont disponibles\",\n                season: \"Assurez-vous que la saison 2025 est disponible\"\n            },\n            nextSteps: [\n                \"1. V\\xe9rifiez votre acc\\xe8s \\xe0 l'API Rugby sur RapidAPI\",\n                \"2. Testez d'abord test_connection\",\n                \"3. Si \\xe7a marche, relancez import_rugby_2025\",\n                \"4. Les APIs rugby peuvent n\\xe9cessiter un plan premium\"\n            ]\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/rugby-import.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Frugby-import&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Frugby-import.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();