"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/import-all-sports";
exports.ids = ["pages/api/import-all-sports"];
exports.modules = {

/***/ "@next-auth/prisma-adapter":
/*!********************************************!*\
  !*** external "@next-auth/prisma-adapter" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@next-auth/prisma-adapter");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "next-auth/providers/github":
/*!*********************************************!*\
  !*** external "next-auth/providers/github" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/github");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-all-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-all-sports.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-all-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-all-sports.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_import_all_sports_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/import-all-sports.ts */ \"(api)/./pages/api/import-all-sports.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_import_all_sports_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_import_all_sports_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/import-all-sports\",\n        pathname: \"/api/import-all-sports\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_import_all_sports_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmltcG9ydC1hbGwtc3BvcnRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZpbXBvcnQtYWxsLXNwb3J0cy50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUM2RDtBQUM3RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsNERBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDREQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLz8wNDg4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvaW1wb3J0LWFsbC1zcG9ydHMudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pbXBvcnQtYWxsLXNwb3J0c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2ltcG9ydC1hbGwtc3BvcnRzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-all-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-all-sports.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @next-auth/prisma-adapter */ \"@next-auth/prisma-adapter\");\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/github */ \"next-auth/providers/github\");\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prisma */ \"(api)/./lib/prisma.ts\");\n\n\n\n\n\nconst authOptions = {\n    adapter: (0,_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__.PrismaAdapter)(_prisma__WEBPACK_IMPORTED_MODULE_4__.prisma),\n    providers: [\n        next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GITHUB_ID,\n            clientSecret: process.env.GITHUB_SECRET\n        }),\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2___default()({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Mot de passe\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                const user = await _prisma__WEBPACK_IMPORTED_MODULE_4__.prisma.user.findUnique({\n                    where: {\n                        email: credentials.email\n                    }\n                });\n                if (!user || !user.password) {\n                    return null;\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_3___default().compare(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    username: user.username\n                };\n            }\n        })\n    ],\n    callbacks: {\n        session: async ({ session, token })=>{\n            if (session?.user) {\n                session.user.id = token.sub;\n            }\n            return session;\n        },\n        jwt: async ({ user, token })=>{\n            if (user) {\n                token.uid = user.id;\n            }\n            return token;\n        }\n    },\n    session: {\n        strategy: \"jwt\"\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ3lEO0FBQ0Y7QUFDVTtBQUNwQztBQUNJO0FBRTFCLE1BQU1LLGNBQStCO0lBQzFDQyxTQUFTTix3RUFBYUEsQ0FBQ0ksMkNBQU1BO0lBQzdCRyxXQUFXO1FBQ1ROLGlFQUFjQSxDQUFDO1lBQ2JPLFVBQVVDLFFBQVFDLEdBQUcsQ0FBQ0MsU0FBUztZQUMvQkMsY0FBY0gsUUFBUUMsR0FBRyxDQUFDRyxhQUFhO1FBQ3pDO1FBQ0FYLHNFQUFtQkEsQ0FBQztZQUNsQlksTUFBTTtZQUNOQyxhQUFhO2dCQUNYQyxPQUFPO29CQUFFQyxPQUFPO29CQUFTQyxNQUFNO2dCQUFRO2dCQUN2Q0MsVUFBVTtvQkFBRUYsT0FBTztvQkFBZ0JDLE1BQU07Z0JBQVc7WUFDdEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFDLFNBQVMsQ0FBQ0QsYUFBYUksVUFBVTtvQkFDakQsT0FBTztnQkFDVDtnQkFFQSxNQUFNRSxPQUFPLE1BQU1qQiwyQ0FBTUEsQ0FBQ2lCLElBQUksQ0FBQ0MsVUFBVSxDQUFDO29CQUN4Q0MsT0FBTzt3QkFDTFAsT0FBT0QsWUFBWUMsS0FBSztvQkFDMUI7Z0JBQ0Y7Z0JBRUEsSUFBSSxDQUFDSyxRQUFRLENBQUNBLEtBQUtGLFFBQVEsRUFBRTtvQkFDM0IsT0FBTztnQkFDVDtnQkFFQSxNQUFNSyxrQkFBa0IsTUFBTXJCLHVEQUFjLENBQzFDWSxZQUFZSSxRQUFRLEVBQ3BCRSxLQUFLRixRQUFRO2dCQUdmLElBQUksQ0FBQ0ssaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xFLElBQUlMLEtBQUtLLEVBQUU7b0JBQ1hWLE9BQU9LLEtBQUtMLEtBQUs7b0JBQ2pCRixNQUFNTyxLQUFLUCxJQUFJO29CQUNmYSxVQUFVTixLQUFLTSxRQUFRO2dCQUN6QjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxXQUFXO1FBQ1RDLFNBQVMsT0FBTyxFQUFFQSxPQUFPLEVBQUVDLEtBQUssRUFBRTtZQUNoQyxJQUFJRCxTQUFTUixNQUFNO2dCQUNqQlEsUUFBUVIsSUFBSSxDQUFDSyxFQUFFLEdBQUdJLE1BQU1DLEdBQUc7WUFDN0I7WUFDQSxPQUFPRjtRQUNUO1FBQ0FHLEtBQUssT0FBTyxFQUFFWCxJQUFJLEVBQUVTLEtBQUssRUFBRTtZQUN6QixJQUFJVCxNQUFNO2dCQUNSUyxNQUFNRyxHQUFHLEdBQUdaLEtBQUtLLEVBQUU7WUFDckI7WUFDQSxPQUFPSTtRQUNUO0lBQ0Y7SUFDQUQsU0FBUztRQUNQSyxVQUFVO0lBQ1o7SUFDQUMsT0FBTztRQUNMQyxRQUFRO0lBQ1Y7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vdHJhdGUvLi9saWIvYXV0aC50cz9iZjdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gXCJuZXh0LWF1dGhcIlxuaW1wb3J0IHsgUHJpc21hQWRhcHRlciB9IGZyb20gXCJAbmV4dC1hdXRoL3ByaXNtYS1hZGFwdGVyXCJcbmltcG9ydCBHaXRodWJQcm92aWRlciBmcm9tIFwibmV4dC1hdXRoL3Byb3ZpZGVycy9naXRodWJcIlxuaW1wb3J0IENyZWRlbnRpYWxzUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIlxuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0anNcIlxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSBcIi4vcHJpc21hXCJcblxuZXhwb3J0IGNvbnN0IGF1dGhPcHRpb25zOiBOZXh0QXV0aE9wdGlvbnMgPSB7XG4gIGFkYXB0ZXI6IFByaXNtYUFkYXB0ZXIocHJpc21hKSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgR2l0aHViUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkdJVEhVQl9JRCEsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdJVEhVQl9TRUNSRVQhLFxuICAgIH0pLFxuICAgIENyZWRlbnRpYWxzUHJvdmlkZXIoe1xuICAgICAgbmFtZTogXCJjcmVkZW50aWFsc1wiLFxuICAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgZW1haWw6IHsgbGFiZWw6IFwiRW1haWxcIiwgdHlwZTogXCJlbWFpbFwiIH0sXG4gICAgICAgIHBhc3N3b3JkOiB7IGxhYmVsOiBcIk1vdCBkZSBwYXNzZVwiLCB0eXBlOiBcInBhc3N3b3JkXCIgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jIGF1dGhvcml6ZShjcmVkZW50aWFscykge1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzPy5lbWFpbCB8fCAhY3JlZGVudGlhbHM/LnBhc3N3b3JkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgZW1haWw6IGNyZWRlbnRpYWxzLmVtYWlsXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICghdXNlciB8fCAhdXNlci5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShcbiAgICAgICAgICBjcmVkZW50aWFscy5wYXNzd29yZCxcbiAgICAgICAgICB1c2VyLnBhc3N3b3JkXG4gICAgICAgIClcblxuICAgICAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgICB1c2VybmFtZTogdXNlci51c2VybmFtZSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIF0sXG4gIGNhbGxiYWNrczoge1xuICAgIHNlc3Npb246IGFzeW5jICh7IHNlc3Npb24sIHRva2VuIH0pID0+IHtcbiAgICAgIGlmIChzZXNzaW9uPy51c2VyKSB7XG4gICAgICAgIHNlc3Npb24udXNlci5pZCA9IHRva2VuLnN1YiFcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uXG4gICAgfSxcbiAgICBqd3Q6IGFzeW5jICh7IHVzZXIsIHRva2VuIH0pID0+IHtcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHRva2VuLnVpZCA9IHVzZXIuaWRcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlblxuICAgIH0sXG4gIH0sXG4gIHNlc3Npb246IHtcbiAgICBzdHJhdGVneTogJ2p3dCcsXG4gIH0sXG4gIHBhZ2VzOiB7XG4gICAgc2lnbkluOiAnL2F1dGgvc2lnbmluJyxcbiAgfSxcbn1cbiJdLCJuYW1lcyI6WyJQcmlzbWFBZGFwdGVyIiwiR2l0aHViUHJvdmlkZXIiLCJDcmVkZW50aWFsc1Byb3ZpZGVyIiwiYmNyeXB0IiwicHJpc21hIiwiYXV0aE9wdGlvbnMiLCJhZGFwdGVyIiwicHJvdmlkZXJzIiwiY2xpZW50SWQiLCJwcm9jZXNzIiwiZW52IiwiR0lUSFVCX0lEIiwiY2xpZW50U2VjcmV0IiwiR0lUSFVCX1NFQ1JFVCIsIm5hbWUiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJ0eXBlIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsImlkIiwidXNlcm5hbWUiLCJjYWxsYmFja3MiLCJzZXNzaW9uIiwidG9rZW4iLCJzdWIiLCJqd3QiLCJ1aWQiLCJzdHJhdGVneSIsInBhZ2VzIiwic2lnbkluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/auth.ts\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./lib/unified-sports-api.ts":
/*!***********************************!*\
  !*** ./lib/unified-sports-api.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   unifiedSportsAPI: () => (/* binding */ unifiedSportsAPI)\n/* harmony export */ });\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prisma */ \"(api)/./lib/prisma.ts\");\n// lib/unified-sports-api.ts\n\nconst RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;\n// 🏆 APIs SPORTS COMPLÈTES - RapidAPI\nconst SPORT_APIS = {\n    football: \"api-football-v1.p.rapidapi.com\",\n    basketball: \"api-basketball.p.rapidapi.com\",\n    mma: \"mma-stats.p.rapidapi.com\",\n    rugby: \"api-rugby.p.rapidapi.com\",\n    f1: \"api-formula-1.p.rapidapi.com\" // 🏎️ Formule 1\n};\n// 🏆 COMPÉTITIONS PRINCIPALES PAR SPORT\nconst SPORT_LEAGUES = {\n    football: {\n        \"Premier League\": 39,\n        \"La Liga\": 140,\n        \"Serie A\": 135,\n        \"Bundesliga\": 78,\n        \"Ligue 1\": 61,\n        \"Champions League\": 2,\n        \"Europa League\": 3,\n        \"Euro 2024\": 4,\n        \"World Cup\": 1\n    },\n    basketball: {\n        \"NBA\": 12,\n        \"EuroLeague\": 120,\n        \"WNBA\": 2,\n        \"NBA Playoffs\": 12,\n        \"EuroCup\": 121\n    },\n    mma: {\n        \"UFC\": 1,\n        \"Bellator\": 2,\n        \"ONE Championship\": 3,\n        \"PFL\": 4\n    },\n    rugby: {\n        \"Six Nations\": 1,\n        \"Rugby World Cup\": 2,\n        \"Top 14\": 3,\n        \"Premiership\": 4,\n        \"URC\": 5\n    },\n    f1: {\n        \"Formula 1\": 1 // Une seule série principale\n    }\n};\nclass UnifiedSportsAPI {\n    // 🌍 REQUÊTE UNIFIÉE vers toutes les APIs\n    async makeRequest(sport, endpoint, params = {}) {\n        try {\n            const host = SPORT_APIS[sport];\n            const url = new URL(`https://${host}${endpoint}`);\n            Object.entries(params).forEach(([key, value])=>{\n                url.searchParams.append(key, String(value));\n            });\n            const response = await fetch(url.toString(), {\n                headers: {\n                    \"X-RapidAPI-Key\": RAPIDAPI_KEY,\n                    \"X-RapidAPI-Host\": host\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status}`);\n            }\n            const data = await response.json();\n            return data.response || data.results || data;\n        } catch (error) {\n            console.error(`❌ Erreur API ${sport} (${SPORT_APIS[sport]}):`, error);\n            return [];\n        }\n    }\n    // ⚽ FOOTBALL COMPLET - Toutes les données\n    async importAllFootball() {\n        let total = 0;\n        console.log(\"⚽ Import COMPLET Football 2024-2025...\");\n        for (const [competitionName, leagueId] of Object.entries(SPORT_LEAGUES.football)){\n            console.log(`📊 Import ${competitionName}...`);\n            for (const season of [\n                2024,\n                2025\n            ]){\n                try {\n                    console.log(`  📅 Saison ${season}...`);\n                    // 🎯 Récupérer TOUS les matchs avec détails complets\n                    const fixtures = await this.makeRequest(\"football\", \"/v3/fixtures\", {\n                        league: leagueId,\n                        season: season,\n                        status: \"FT\"\n                    });\n                    let imported = 0;\n                    for (const fixture of fixtures.slice(0, 100)){\n                        try {\n                            // 📊 Récupérer les détails complets du match\n                            const [events, lineups, statistics] = await Promise.all([\n                                this.makeRequest(\"football\", \"/v3/fixtures/events\", {\n                                    fixture: fixture.fixture.id\n                                }),\n                                this.makeRequest(\"football\", \"/v3/fixtures/lineups\", {\n                                    fixture: fixture.fixture.id\n                                }),\n                                this.makeRequest(\"football\", \"/v3/fixtures/statistics\", {\n                                    fixture: fixture.fixture.id\n                                })\n                            ]);\n                            const match = {\n                                externalId: `football_${leagueId}_${fixture.fixture.id}`,\n                                sport: \"football\",\n                                competition: competitionName,\n                                homeTeam: fixture.teams.home.name,\n                                awayTeam: fixture.teams.away.name,\n                                homeScore: fixture.goals.home || 0,\n                                awayScore: fixture.goals.away || 0,\n                                date: new Date(fixture.fixture.date),\n                                status: \"FINISHED\",\n                                venue: fixture.fixture.venue?.name,\n                                season: season.toString(),\n                                details: {\n                                    referee: fixture.fixture.referee,\n                                    attendance: fixture.fixture.status?.attendance,\n                                    events: events || [],\n                                    lineups: lineups || [],\n                                    statistics: statistics || [],\n                                    logos: {\n                                        home: fixture.teams.home.logo,\n                                        away: fixture.teams.away.logo\n                                    }\n                                }\n                            };\n                            const saved = await this.saveMatch(match);\n                            if (saved) imported++;\n                        } catch (error) {\n                            console.error(`Erreur match football:`, error);\n                        }\n                    }\n                    console.log(`    ✅ ${imported} matchs football importés`);\n                    total += imported;\n                    await this.sleep(2000) // Pause API\n                    ;\n                } catch (error) {\n                    console.error(`❌ Erreur ${competitionName} ${season}:`, error);\n                }\n            }\n        }\n        return total;\n    }\n    // 🏀 BASKETBALL COMPLET - CORRIGÉ avec vraie API\n    async importAllBasketball() {\n        let total = 0;\n        console.log(\"\\uD83C\\uDFC0 Import COMPLET Basketball NBA 2024-2025...\");\n        // Utiliser les vraies données NBA\n        const seasons = [\n            \"2023-2024\",\n            \"2024-2025\"\n        ];\n        for (const season of seasons){\n            try {\n                console.log(`  📅 NBA Saison ${season}...`);\n                // 🎯 Requête avec la vraie structure API\n                const games = await this.makeRequest(\"basketball\", \"/games\", {\n                    league: 12,\n                    season: season\n                });\n                console.log(`    📊 ${games.length} matchs NBA trouvés pour ${season}`);\n                let imported = 0;\n                for (const game of games){\n                    try {\n                        // Vérifier que le match est terminé\n                        if (game.status?.short === \"FT\") {\n                            const match = {\n                                externalId: `basketball_nba_${game.id}`,\n                                sport: \"basketball\",\n                                competition: \"NBA\",\n                                homeTeam: game.teams?.home?.name || \"Home\",\n                                awayTeam: game.teams?.away?.name || \"Away\",\n                                homeScore: game.scores?.home?.total || 0,\n                                awayScore: game.scores?.away?.total || 0,\n                                date: new Date(game.date),\n                                status: \"FINISHED\",\n                                venue: game.venue || \"NBA Arena\",\n                                season: season,\n                                details: {\n                                    // 📊 Quarters détaillés\n                                    quarters: {\n                                        q1: {\n                                            home: game.scores?.home?.quarter_1 || 0,\n                                            away: game.scores?.away?.quarter_1 || 0\n                                        },\n                                        q2: {\n                                            home: game.scores?.home?.quarter_2 || 0,\n                                            away: game.scores?.away?.quarter_2 || 0\n                                        },\n                                        q3: {\n                                            home: game.scores?.home?.quarter_3 || 0,\n                                            away: game.scores?.away?.quarter_3 || 0\n                                        },\n                                        q4: {\n                                            home: game.scores?.home?.quarter_4 || 0,\n                                            away: game.scores?.away?.quarter_4 || 0\n                                        },\n                                        overtime: game.scores?.home?.over_time ? {\n                                            home: game.scores.home.over_time,\n                                            away: game.scores.away.over_time\n                                        } : null\n                                    },\n                                    // 🏀 Logos des équipes\n                                    logos: {\n                                        home: game.teams?.home?.logo,\n                                        away: game.teams?.away?.logo\n                                    },\n                                    // ⏰ Infos du match\n                                    gameTime: game.time,\n                                    timestamp: game.timestamp,\n                                    leagueInfo: {\n                                        name: game.league?.name,\n                                        logo: game.league?.logo,\n                                        country: game.league?.country?.name\n                                    }\n                                }\n                            };\n                            const saved = await this.saveMatch(match);\n                            if (saved) {\n                                imported++;\n                                console.log(`      ✅ ${game.teams.home.name} ${game.scores.home.total}-${game.scores.away.total} ${game.teams.away.name}`);\n                            }\n                        }\n                    } catch (error) {\n                        console.error(`Erreur match basketball ${game.id}:`, error);\n                    }\n                }\n                console.log(`    ✅ ${imported} matchs NBA importés pour ${season}`);\n                total += imported;\n                // Pause entre saisons\n                await this.sleep(3000);\n            } catch (error) {\n                console.error(`❌ Erreur NBA ${season}:`, error);\n            }\n        }\n        console.log(`🏀 Basketball terminé: ${total} matchs NBA importés`);\n        return total;\n    }\n    // 🥊 MMA COMPLET\n    async importAllMMA() {\n        let total = 0;\n        console.log(\"\\uD83E\\uDD4A Import COMPLET MMA 2024-2025...\");\n        for (const [organizationName, orgId] of Object.entries(SPORT_LEAGUES.mma)){\n            console.log(`📊 Import ${organizationName}...`);\n            for (const year of [\n                2024,\n                2025\n            ]){\n                try {\n                    console.log(`  📅 Année ${year}...`);\n                    const events = await this.makeRequest(\"mma\", \"/v1/events\", {\n                        organization: orgId,\n                        year: year\n                    });\n                    let imported = 0;\n                    for (const event of events.slice(0, 30)){\n                        try {\n                            // Récupérer détails des combats\n                            const fights = await this.makeRequest(\"mma\", \"/v1/fights\", {\n                                event: event.id\n                            });\n                            for (const fight of fights.slice(0, 5)){\n                                if (fight.status === \"finished\") {\n                                    const match = {\n                                        externalId: `mma_${orgId}_${fight.id}`,\n                                        sport: \"mma\",\n                                        competition: organizationName,\n                                        homeTeam: fight.fighter1?.name || \"Fighter 1\",\n                                        awayTeam: fight.fighter2?.name || \"Fighter 2\",\n                                        homeScore: fight.result?.winner === 1 ? \"W\" : \"L\",\n                                        awayScore: fight.result?.winner === 2 ? \"W\" : \"L\",\n                                        date: new Date(event.date),\n                                        status: \"FINISHED\",\n                                        venue: event.venue,\n                                        season: year.toString(),\n                                        details: {\n                                            weightClass: fight.weightClass,\n                                            method: fight.result?.method,\n                                            round: fight.result?.round,\n                                            time: fight.result?.time,\n                                            referee: fight.referee,\n                                            titleFight: fight.titleFight || false,\n                                            fighter1: {\n                                                ...fight.fighter1,\n                                                record: fight.fighter1?.record\n                                            },\n                                            fighter2: {\n                                                ...fight.fighter2,\n                                                record: fight.fighter2?.record\n                                            }\n                                        }\n                                    };\n                                    const saved = await this.saveMatch(match);\n                                    if (saved) imported++;\n                                }\n                            }\n                        } catch (error) {\n                            console.error(`Erreur event MMA:`, error);\n                        }\n                    }\n                    console.log(`    ✅ ${imported} combats MMA importés`);\n                    total += imported;\n                    await this.sleep(3000);\n                } catch (error) {\n                    console.error(`❌ Erreur ${organizationName} ${year}:`, error);\n                }\n            }\n        }\n        return total;\n    }\n    // 🏉 RUGBY COMPLET\n    async importAllRugby() {\n        let total = 0;\n        console.log(\"\\uD83C\\uDFC9 Import COMPLET Rugby 2024-2025...\");\n        for (const [competitionName, leagueId] of Object.entries(SPORT_LEAGUES.rugby)){\n            console.log(`📊 Import ${competitionName}...`);\n            for (const season of [\n                2024,\n                2025\n            ]){\n                try {\n                    console.log(`  📅 Saison ${season}...`);\n                    const fixtures = await this.makeRequest(\"rugby\", \"/v1/fixtures\", {\n                        league: leagueId,\n                        season: season,\n                        status: \"FT\"\n                    });\n                    let imported = 0;\n                    for (const fixture of fixtures.slice(0, 40)){\n                        try {\n                            // Récupérer détails match rugby\n                            const matchDetails = await this.makeRequest(\"rugby\", \"/v1/fixtures/details\", {\n                                id: fixture.id\n                            });\n                            const match = {\n                                externalId: `rugby_${leagueId}_${fixture.id}`,\n                                sport: \"rugby\",\n                                competition: competitionName,\n                                homeTeam: fixture.teams?.home?.name || \"Home\",\n                                awayTeam: fixture.teams?.away?.name || \"Away\",\n                                homeScore: fixture.scores?.home || 0,\n                                awayScore: fixture.scores?.away || 0,\n                                date: new Date(fixture.date),\n                                status: \"FINISHED\",\n                                venue: fixture.venue,\n                                season: season.toString(),\n                                details: {\n                                    halftimeScore: fixture.halftime || {},\n                                    tries: matchDetails?.tries || [],\n                                    conversions: matchDetails?.conversions || [],\n                                    penalties: matchDetails?.penalties || [],\n                                    cards: matchDetails?.cards || [],\n                                    referee: fixture.referee,\n                                    attendance: fixture.attendance,\n                                    weather: fixture.weather\n                                }\n                            };\n                            const saved = await this.saveMatch(match);\n                            if (saved) imported++;\n                        } catch (error) {\n                            console.error(`Erreur match rugby:`, error);\n                        }\n                    }\n                    console.log(`    ✅ ${imported} matchs rugby importés`);\n                    total += imported;\n                    await this.sleep(2500);\n                } catch (error) {\n                    console.error(`❌ Erreur ${competitionName} ${season}:`, error);\n                }\n            }\n        }\n        return total;\n    }\n    // 🏎️ FORMULE 1 COMPLÈTE\n    async importAllF1() {\n        let total = 0;\n        console.log(\"\\uD83C\\uDFCE️ Import COMPLET Formule 1 2024-2025...\");\n        for (const season of [\n            2024,\n            2025\n        ]){\n            try {\n                console.log(`📅 Saison F1 ${season}...`);\n                // Récupérer toutes les courses\n                const races = await this.makeRequest(\"f1\", \"/v1/races\", {\n                    season: season\n                });\n                let imported = 0;\n                for (const race of races){\n                    try {\n                        // Récupérer résultats détaillés\n                        const [results, qualifying, practices] = await Promise.all([\n                            this.makeRequest(\"f1\", \"/v1/races/results\", {\n                                race: race.id\n                            }),\n                            this.makeRequest(\"f1\", \"/v1/qualifying\", {\n                                race: race.id\n                            }),\n                            this.makeRequest(\"f1\", \"/v1/practice\", {\n                                race: race.id\n                            })\n                        ]);\n                        if (results.length > 0) {\n                            const winner = results[0];\n                            const podium = results.slice(0, 3);\n                            const match = {\n                                externalId: `f1_${season}_${race.id}`,\n                                sport: \"f1\",\n                                competition: \"Formula 1\",\n                                homeTeam: winner.driver?.name || \"Winner\",\n                                awayTeam: \"Field\",\n                                homeScore: \"1st\",\n                                awayScore: `${results.length}`,\n                                date: new Date(race.date),\n                                status: \"FINISHED\",\n                                venue: race.circuit?.name,\n                                season: season.toString(),\n                                details: {\n                                    grandPrix: race.name,\n                                    circuit: race.circuit,\n                                    laps: race.laps,\n                                    distance: race.distance,\n                                    podium: podium.map((r)=>({\n                                            position: r.position,\n                                            driver: r.driver?.name,\n                                            team: r.team?.name,\n                                            time: r.time,\n                                            points: r.points\n                                        })),\n                                    fullResults: results.slice(0, 20),\n                                    qualifying: qualifying || [],\n                                    practices: practices || [],\n                                    fastestLap: race.fastestLap,\n                                    weather: race.weather\n                                }\n                            };\n                            const saved = await this.saveMatch(match);\n                            if (saved) imported++;\n                        }\n                    } catch (error) {\n                        console.error(`Erreur course F1:`, error);\n                    }\n                }\n                console.log(`    ✅ ${imported} courses F1 importées`);\n                total += imported;\n                await this.sleep(3000);\n            } catch (error) {\n                console.error(`❌ Erreur F1 ${season}:`, error);\n            }\n        }\n        return total;\n    }\n    // 🚀 IMPORT COMPLET DE TOUS LES SPORTS\n    async importEverything() {\n        console.log(\"\\uD83D\\uDE80 IMPORT COMPLET - TOUS LES SPORTS 2024-2025\");\n        console.log(\"⏱️  Temps estim\\xe9 : 20-30 minutes...\");\n        console.log(\"\\uD83C\\uDFC6 Football + Basketball + MMA + Rugby + F1\");\n        const startTime = Date.now();\n        // Import en parallèle pour optimiser\n        const [football, basketball, mma, rugby, f1] = await Promise.all([\n            this.importAllFootball(),\n            this.importAllBasketball(),\n            this.importAllMMA(),\n            this.importAllRugby(),\n            this.importAllF1()\n        ]);\n        const total = football + basketball + mma + rugby + f1;\n        const duration = Math.round((Date.now() - startTime) / 1000);\n        console.log(`\\n🎉 IMPORT TERMINÉ en ${duration}s !`);\n        console.log(`⚽ Football: ${football} matchs`);\n        console.log(`🏀 Basketball: ${basketball} matchs`);\n        console.log(`🥊 MMA: ${mma} combats`);\n        console.log(`🏉 Rugby: ${rugby} matchs`);\n        console.log(`🏎️ F1: ${f1} courses`);\n        console.log(`📊 TOTAL: ${total} événements`);\n        return {\n            football,\n            basketball,\n            mma,\n            rugby,\n            f1,\n            total\n        };\n    }\n    // 💾 SAUVEGARDER UN MATCH\n    async saveMatch(match) {\n        try {\n            const existing = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findFirst({\n                where: {\n                    homeTeam: match.homeTeam,\n                    awayTeam: match.awayTeam,\n                    competition: match.competition,\n                    date: {\n                        gte: new Date(match.date.getTime() - 24 * 60 * 60 * 1000),\n                        lte: new Date(match.date.getTime() + 24 * 60 * 60 * 1000)\n                    }\n                }\n            });\n            if (existing) return false;\n            await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.create({\n                data: {\n                    apiMatchId: Math.floor(Math.random() * 900000) + 100000,\n                    homeTeam: match.homeTeam,\n                    awayTeam: match.awayTeam,\n                    homeScore: typeof match.homeScore === \"number\" ? match.homeScore : 0,\n                    awayScore: typeof match.awayScore === \"number\" ? match.awayScore : 0,\n                    date: match.date,\n                    status: match.status,\n                    competition: match.competition,\n                    season: match.season,\n                    venue: match.venue,\n                    homeTeamLogo: match.details?.logos?.home || this.getDefaultLogo(match.homeTeam),\n                    awayTeamLogo: match.details?.logos?.away || this.getDefaultLogo(match.awayTeam)\n                }\n            });\n            return true;\n        } catch (error) {\n            return false;\n        }\n    }\n    getDefaultLogo(teamName) {\n        return `https://via.placeholder.com/50x50/007ACC/ffffff?text=${teamName.charAt(0)}`;\n    }\n    async sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n    // 🔄 IMPORT QUOTIDIEN AUTOMATIQUE (dernières 24h)\n    async importRecentFinished() {\n        console.log(\"\\uD83D\\uDD04 Import automatique des derni\\xe8res 24h...\");\n        const yesterday = new Date();\n        yesterday.setDate(yesterday.getDate() - 1);\n        let totalImported = 0;\n        const sportsImported = [];\n        // Vérifier chaque sport\n        try {\n            // Football récent\n            const footballRecent = await this.makeRequest(\"football\", \"/v3/fixtures\", {\n                date: yesterday.toISOString().split(\"T\")[0],\n                status: \"FT\"\n            });\n            for (const match of footballRecent.slice(0, 20)){\n                const unified = {\n                    externalId: `auto_football_${match.fixture.id}`,\n                    sport: \"football\",\n                    competition: match.league.name,\n                    homeTeam: match.teams.home.name,\n                    awayTeam: match.teams.away.name,\n                    homeScore: match.goals.home || 0,\n                    awayScore: match.goals.away || 0,\n                    date: new Date(match.fixture.date),\n                    status: \"FINISHED\",\n                    venue: match.fixture.venue?.name,\n                    season: \"2024\"\n                };\n                if (await this.saveMatch(unified)) {\n                    totalImported++;\n                    if (!sportsImported.includes(\"football\")) sportsImported.push(\"football\");\n                }\n            }\n        // Même logique pour autres sports...\n        // Basketball, MMA, Rugby, F1 récents\n        } catch (error) {\n            console.error(\"❌ Erreur import automatique:\", error);\n        }\n        return {\n            imported: totalImported,\n            sports: sportsImported\n        };\n    }\n}\nconst unifiedSportsAPI = new UnifiedSportsAPI();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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USxRQUFRUDtRQUFlO0lBQzNEO0FBQ0Y7QUFFTyxNQUFNUSxtQkFBbUIsSUFBSTNLLG1CQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3VuaWZpZWQtc3BvcnRzLWFwaS50cz85NmQxIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGxpYi91bmlmaWVkLXNwb3J0cy1hcGkudHNcbmltcG9ydCB7IHByaXNtYSB9IGZyb20gJy4vcHJpc21hJ1xuXG5jb25zdCBSQVBJREFQSV9LRVkgPSBwcm9jZXNzLmVudi5SQVBJREFQSV9LRVlcblxuLy8g8J+PhiBBUElzIFNQT1JUUyBDT01QTMOIVEVTIC0gUmFwaWRBUElcbmNvbnN0IFNQT1JUX0FQSVMgPSB7XG4gIGZvb3RiYWxsOiAnYXBpLWZvb3RiYWxsLXYxLnAucmFwaWRhcGkuY29tJywgICAgIC8vIOKavSBGb290YmFsbFxuICBiYXNrZXRiYWxsOiAnYXBpLWJhc2tldGJhbGwucC5yYXBpZGFwaS5jb20nLCAgIC8vIPCfj4AgQmFza2V0YmFsbCAgXG4gIG1tYTogJ21tYS1zdGF0cy5wLnJhcGlkYXBpLmNvbScsICAgICAgICAgICAgICAvLyDwn6WKIE1NQS9VRkNcbiAgcnVnYnk6ICdhcGktcnVnYnkucC5yYXBpZGFwaS5jb20nLCAgICAgICAgICAgIC8vIPCfj4kgUnVnYnlcbiAgZjE6ICdhcGktZm9ybXVsYS0xLnAucmFwaWRhcGkuY29tJyAgICAgICAgICAgIC8vIPCfj47vuI8gRm9ybXVsZSAxXG59XG5cbi8vIPCfj4YgQ09NUMOJVElUSU9OUyBQUklOQ0lQQUxFUyBQQVIgU1BPUlRcbmNvbnN0IFNQT1JUX0xFQUdVRVMgPSB7XG4gIGZvb3RiYWxsOiB7XG4gICAgJ1ByZW1pZXIgTGVhZ3VlJzogMzksXG4gICAgJ0xhIExpZ2EnOiAxNDAsXG4gICAgJ1NlcmllIEEnOiAxMzUsXG4gICAgJ0J1bmRlc2xpZ2EnOiA3OCxcbiAgICAnTGlndWUgMSc6IDYxLFxuICAgICdDaGFtcGlvbnMgTGVhZ3VlJzogMixcbiAgICAnRXVyb3BhIExlYWd1ZSc6IDMsXG4gICAgJ0V1cm8gMjAyNCc6IDQsXG4gICAgJ1dvcmxkIEN1cCc6IDFcbiAgfSxcbiAgYmFza2V0YmFsbDoge1xuICAgICdOQkEnOiAxMixcbiAgICAnRXVyb0xlYWd1ZSc6IDEyMCxcbiAgICAnV05CQSc6IDIsXG4gICAgJ05CQSBQbGF5b2Zmcyc6IDEyLCAvLyBNw6ptZSBJRCBtYWlzIHNhaXNvbiBwbGF5b2Zmc1xuICAgICdFdXJvQ3VwJzogMTIxXG4gIH0sXG4gIG1tYToge1xuICAgICdVRkMnOiAxLFxuICAgICdCZWxsYXRvcic6IDIsXG4gICAgJ09ORSBDaGFtcGlvbnNoaXAnOiAzLFxuICAgICdQRkwnOiA0XG4gIH0sXG4gIHJ1Z2J5OiB7XG4gICAgJ1NpeCBOYXRpb25zJzogMSxcbiAgICAnUnVnYnkgV29ybGQgQ3VwJzogMixcbiAgICAnVG9wIDE0JzogMyxcbiAgICAnUHJlbWllcnNoaXAnOiA0LFxuICAgICdVUkMnOiA1XG4gIH0sXG4gIGYxOiB7XG4gICAgJ0Zvcm11bGEgMSc6IDEgIC8vIFVuZSBzZXVsZSBzw6lyaWUgcHJpbmNpcGFsZVxuICB9XG59XG5cbmludGVyZmFjZSBVbmlmaWVkTWF0Y2gge1xuICBleHRlcm5hbElkOiBzdHJpbmdcbiAgc3BvcnQ6ICdmb290YmFsbCcgfCAnYmFza2V0YmFsbCcgfCAnbW1hJyB8ICdydWdieScgfCAnZjEnXG4gIGNvbXBldGl0aW9uOiBzdHJpbmdcbiAgaG9tZVRlYW06IHN0cmluZ1xuICBhd2F5VGVhbTogc3RyaW5nXG4gIGhvbWVTY29yZTogbnVtYmVyIHwgc3RyaW5nXG4gIGF3YXlTY29yZTogbnVtYmVyIHwgc3RyaW5nXG4gIGRhdGU6IERhdGVcbiAgc3RhdHVzOiBzdHJpbmdcbiAgdmVudWU/OiBzdHJpbmdcbiAgc2Vhc29uOiBzdHJpbmdcbiAgLy8gRG9ubsOpZXMgZW5yaWNoaWVzIHBhciBzcG9ydFxuICBkZXRhaWxzPzogYW55XG59XG5cbmNsYXNzIFVuaWZpZWRTcG9ydHNBUEkge1xuXG4gIC8vIPCfjI0gUkVRVcOKVEUgVU5JRknDiUUgdmVycyB0b3V0ZXMgbGVzIEFQSXNcbiAgcHJpdmF0ZSBhc3luYyBtYWtlUmVxdWVzdChzcG9ydDoga2V5b2YgdHlwZW9mIFNQT1JUX0FQSVMsIGVuZHBvaW50OiBzdHJpbmcsIHBhcmFtczogYW55ID0ge30pIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaG9zdCA9IFNQT1JUX0FQSVNbc3BvcnRdXG4gICAgICBjb25zdCB1cmwgPSBuZXcgVVJMKGBodHRwczovLyR7aG9zdH0ke2VuZHBvaW50fWApXG4gICAgICBcbiAgICAgIE9iamVjdC5lbnRyaWVzKHBhcmFtcykuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgU3RyaW5nKHZhbHVlKSlcbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLnRvU3RyaW5nKCksIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdYLVJhcGlkQVBJLUtleSc6IFJBUElEQVBJX0tFWSEsXG4gICAgICAgICAgJ1gtUmFwaWRBUEktSG9zdCc6IGhvc3QsXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIVFRQICR7cmVzcG9uc2Uuc3RhdHVzfWApXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKClcbiAgICAgIHJldHVybiBkYXRhLnJlc3BvbnNlIHx8IGRhdGEucmVzdWx0cyB8fCBkYXRhXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYOKdjCBFcnJldXIgQVBJICR7c3BvcnR9ICgke1NQT1JUX0FQSVNbc3BvcnRdfSk6YCwgZXJyb3IpXG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gIH1cblxuICAvLyDimr0gRk9PVEJBTEwgQ09NUExFVCAtIFRvdXRlcyBsZXMgZG9ubsOpZXNcbiAgYXN5bmMgaW1wb3J0QWxsRm9vdGJhbGwoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBsZXQgdG90YWwgPSAwXG4gICAgY29uc29sZS5sb2coJ+KavSBJbXBvcnQgQ09NUExFVCBGb290YmFsbCAyMDI0LTIwMjUuLi4nKVxuXG4gICAgZm9yIChjb25zdCBbY29tcGV0aXRpb25OYW1lLCBsZWFndWVJZF0gb2YgT2JqZWN0LmVudHJpZXMoU1BPUlRfTEVBR1VFUy5mb290YmFsbCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIEltcG9ydCAke2NvbXBldGl0aW9uTmFtZX0uLi5gKVxuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IHNlYXNvbiBvZiBbMjAyNCwgMjAyNV0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICDwn5OFIFNhaXNvbiAke3NlYXNvbn0uLi5gKVxuICAgICAgICAgIFxuICAgICAgICAgIC8vIPCfjq8gUsOpY3Vww6lyZXIgVE9VUyBsZXMgbWF0Y2hzIGF2ZWMgZMOpdGFpbHMgY29tcGxldHNcbiAgICAgICAgICBjb25zdCBmaXh0dXJlcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJ2Zvb3RiYWxsJywgJy92My9maXh0dXJlcycsIHtcbiAgICAgICAgICAgIGxlYWd1ZTogbGVhZ3VlSWQsXG4gICAgICAgICAgICBzZWFzb246IHNlYXNvbixcbiAgICAgICAgICAgIHN0YXR1czogJ0ZUJ1xuICAgICAgICAgIH0pXG5cbiAgICAgICAgICBsZXQgaW1wb3J0ZWQgPSAwXG4gICAgICAgICAgZm9yIChjb25zdCBmaXh0dXJlIG9mIGZpeHR1cmVzLnNsaWNlKDAsIDEwMCkpIHsgLy8gTGltaXRlIHBvdXIgw6l2aXRlciBsZSBzcGFtXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyDwn5OKIFLDqWN1cMOpcmVyIGxlcyBkw6l0YWlscyBjb21wbGV0cyBkdSBtYXRjaFxuICAgICAgICAgICAgICBjb25zdCBbZXZlbnRzLCBsaW5ldXBzLCBzdGF0aXN0aWNzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VSZXF1ZXN0KCdmb290YmFsbCcsICcvdjMvZml4dHVyZXMvZXZlbnRzJywgeyBmaXh0dXJlOiBmaXh0dXJlLmZpeHR1cmUuaWQgfSksXG4gICAgICAgICAgICAgICAgdGhpcy5tYWtlUmVxdWVzdCgnZm9vdGJhbGwnLCAnL3YzL2ZpeHR1cmVzL2xpbmV1cHMnLCB7IGZpeHR1cmU6IGZpeHR1cmUuZml4dHVyZS5pZCB9KSxcbiAgICAgICAgICAgICAgICB0aGlzLm1ha2VSZXF1ZXN0KCdmb290YmFsbCcsICcvdjMvZml4dHVyZXMvc3RhdGlzdGljcycsIHsgZml4dHVyZTogZml4dHVyZS5maXh0dXJlLmlkIH0pXG4gICAgICAgICAgICAgIF0pXG5cbiAgICAgICAgICAgICAgY29uc3QgbWF0Y2g6IFVuaWZpZWRNYXRjaCA9IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbElkOiBgZm9vdGJhbGxfJHtsZWFndWVJZH1fJHtmaXh0dXJlLmZpeHR1cmUuaWR9YCxcbiAgICAgICAgICAgICAgICBzcG9ydDogJ2Zvb3RiYWxsJyxcbiAgICAgICAgICAgICAgICBjb21wZXRpdGlvbjogY29tcGV0aXRpb25OYW1lLFxuICAgICAgICAgICAgICAgIGhvbWVUZWFtOiBmaXh0dXJlLnRlYW1zLmhvbWUubmFtZSxcbiAgICAgICAgICAgICAgICBhd2F5VGVhbTogZml4dHVyZS50ZWFtcy5hd2F5Lm5hbWUsXG4gICAgICAgICAgICAgICAgaG9tZVNjb3JlOiBmaXh0dXJlLmdvYWxzLmhvbWUgfHwgMCxcbiAgICAgICAgICAgICAgICBhd2F5U2NvcmU6IGZpeHR1cmUuZ29hbHMuYXdheSB8fCAwLFxuICAgICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKGZpeHR1cmUuZml4dHVyZS5kYXRlKSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdGSU5JU0hFRCcsXG4gICAgICAgICAgICAgICAgdmVudWU6IGZpeHR1cmUuZml4dHVyZS52ZW51ZT8ubmFtZSxcbiAgICAgICAgICAgICAgICBzZWFzb246IHNlYXNvbi50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgICAgIHJlZmVyZWU6IGZpeHR1cmUuZml4dHVyZS5yZWZlcmVlLFxuICAgICAgICAgICAgICAgICAgYXR0ZW5kYW5jZTogZml4dHVyZS5maXh0dXJlLnN0YXR1cz8uYXR0ZW5kYW5jZSxcbiAgICAgICAgICAgICAgICAgIGV2ZW50czogZXZlbnRzIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgbGluZXVwczogbGluZXVwcyB8fCBbXSxcbiAgICAgICAgICAgICAgICAgIHN0YXRpc3RpY3M6IHN0YXRpc3RpY3MgfHwgW10sXG4gICAgICAgICAgICAgICAgICBsb2dvczoge1xuICAgICAgICAgICAgICAgICAgICBob21lOiBmaXh0dXJlLnRlYW1zLmhvbWUubG9nbyxcbiAgICAgICAgICAgICAgICAgICAgYXdheTogZml4dHVyZS50ZWFtcy5hd2F5LmxvZ29cbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBzYXZlZCA9IGF3YWl0IHRoaXMuc2F2ZU1hdGNoKG1hdGNoKVxuICAgICAgICAgICAgICBpZiAoc2F2ZWQpIGltcG9ydGVkKytcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycmV1ciBtYXRjaCBmb290YmFsbDpgLCBlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhgICAgIOKchSAke2ltcG9ydGVkfSBtYXRjaHMgZm9vdGJhbGwgaW1wb3J0w6lzYClcbiAgICAgICAgICB0b3RhbCArPSBpbXBvcnRlZFxuICAgICAgICAgIGF3YWl0IHRoaXMuc2xlZXAoMjAwMCkgLy8gUGF1c2UgQVBJXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycmV1ciAke2NvbXBldGl0aW9uTmFtZX0gJHtzZWFzb259OmAsIGVycm9yKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvdGFsXG4gIH1cblxuICAvLyDwn4+AIEJBU0tFVEJBTEwgQ09NUExFVCAtIENPUlJJR8OJIGF2ZWMgdnJhaWUgQVBJXG4gIGFzeW5jIGltcG9ydEFsbEJhc2tldGJhbGwoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBsZXQgdG90YWwgPSAwXG4gICAgY29uc29sZS5sb2coJ/Cfj4AgSW1wb3J0IENPTVBMRVQgQmFza2V0YmFsbCBOQkEgMjAyNC0yMDI1Li4uJylcblxuICAgIC8vIFV0aWxpc2VyIGxlcyB2cmFpZXMgZG9ubsOpZXMgTkJBXG4gICAgY29uc3Qgc2Vhc29ucyA9IFsnMjAyMy0yMDI0JywgJzIwMjQtMjAyNSddXG4gICAgXG4gICAgZm9yIChjb25zdCBzZWFzb24gb2Ygc2Vhc29ucykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coYCAg8J+ThSBOQkEgU2Fpc29uICR7c2Vhc29ufS4uLmApXG4gICAgICAgIFxuICAgICAgICAvLyDwn46vIFJlcXXDqnRlIGF2ZWMgbGEgdnJhaWUgc3RydWN0dXJlIEFQSVxuICAgICAgICBjb25zdCBnYW1lcyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJ2Jhc2tldGJhbGwnLCAnL2dhbWVzJywge1xuICAgICAgICAgIGxlYWd1ZTogMTIsIC8vIE5CQSBJRCBjb25maXJtw6lcbiAgICAgICAgICBzZWFzb246IHNlYXNvblxuICAgICAgICB9KVxuXG4gICAgICAgIGNvbnNvbGUubG9nKGAgICAg8J+TiiAke2dhbWVzLmxlbmd0aH0gbWF0Y2hzIE5CQSB0cm91dsOpcyBwb3VyICR7c2Vhc29ufWApXG5cbiAgICAgICAgbGV0IGltcG9ydGVkID0gMFxuICAgICAgICBmb3IgKGNvbnN0IGdhbWUgb2YgZ2FtZXMpIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVsOpcmlmaWVyIHF1ZSBsZSBtYXRjaCBlc3QgdGVybWluw6lcbiAgICAgICAgICAgIGlmIChnYW1lLnN0YXR1cz8uc2hvcnQgPT09ICdGVCcpIHtcbiAgICAgICAgICAgICAgY29uc3QgbWF0Y2g6IFVuaWZpZWRNYXRjaCA9IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbElkOiBgYmFza2V0YmFsbF9uYmFfJHtnYW1lLmlkfWAsXG4gICAgICAgICAgICAgICAgc3BvcnQ6ICdiYXNrZXRiYWxsJyxcbiAgICAgICAgICAgICAgICBjb21wZXRpdGlvbjogJ05CQScsXG4gICAgICAgICAgICAgICAgaG9tZVRlYW06IGdhbWUudGVhbXM/LmhvbWU/Lm5hbWUgfHwgJ0hvbWUnLFxuICAgICAgICAgICAgICAgIGF3YXlUZWFtOiBnYW1lLnRlYW1zPy5hd2F5Py5uYW1lIHx8ICdBd2F5JyxcbiAgICAgICAgICAgICAgICBob21lU2NvcmU6IGdhbWUuc2NvcmVzPy5ob21lPy50b3RhbCB8fCAwLFxuICAgICAgICAgICAgICAgIGF3YXlTY29yZTogZ2FtZS5zY29yZXM/LmF3YXk/LnRvdGFsIHx8IDAsXG4gICAgICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUoZ2FtZS5kYXRlKSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdGSU5JU0hFRCcsXG4gICAgICAgICAgICAgICAgdmVudWU6IGdhbWUudmVudWUgfHwgJ05CQSBBcmVuYScsXG4gICAgICAgICAgICAgICAgc2Vhc29uOiBzZWFzb24sXG4gICAgICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICAgICAgLy8g8J+TiiBRdWFydGVycyBkw6l0YWlsbMOpc1xuICAgICAgICAgICAgICAgICAgcXVhcnRlcnM6IHtcbiAgICAgICAgICAgICAgICAgICAgcTE6IHtcbiAgICAgICAgICAgICAgICAgICAgICBob21lOiBnYW1lLnNjb3Jlcz8uaG9tZT8ucXVhcnRlcl8xIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgYXdheTogZ2FtZS5zY29yZXM/LmF3YXk/LnF1YXJ0ZXJfMSB8fCAwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHEyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgaG9tZTogZ2FtZS5zY29yZXM/LmhvbWU/LnF1YXJ0ZXJfMiB8fCAwLFxuICAgICAgICAgICAgICAgICAgICAgIGF3YXk6IGdhbWUuc2NvcmVzPy5hd2F5Py5xdWFydGVyXzIgfHwgMFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBxMzoge1xuICAgICAgICAgICAgICAgICAgICAgIGhvbWU6IGdhbWUuc2NvcmVzPy5ob21lPy5xdWFydGVyXzMgfHwgMCxcbiAgICAgICAgICAgICAgICAgICAgICBhd2F5OiBnYW1lLnNjb3Jlcz8uYXdheT8ucXVhcnRlcl8zIHx8IDBcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcTQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICBob21lOiBnYW1lLnNjb3Jlcz8uaG9tZT8ucXVhcnRlcl80IHx8IDAsXG4gICAgICAgICAgICAgICAgICAgICAgYXdheTogZ2FtZS5zY29yZXM/LmF3YXk/LnF1YXJ0ZXJfNCB8fCAwXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIG92ZXJ0aW1lOiBnYW1lLnNjb3Jlcz8uaG9tZT8ub3Zlcl90aW1lID8ge1xuICAgICAgICAgICAgICAgICAgICAgIGhvbWU6IGdhbWUuc2NvcmVzLmhvbWUub3Zlcl90aW1lLFxuICAgICAgICAgICAgICAgICAgICAgIGF3YXk6IGdhbWUuc2NvcmVzLmF3YXkub3Zlcl90aW1lXG4gICAgICAgICAgICAgICAgICAgIH0gOiBudWxsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgLy8g8J+PgCBMb2dvcyBkZXMgw6lxdWlwZXNcbiAgICAgICAgICAgICAgICAgIGxvZ29zOiB7XG4gICAgICAgICAgICAgICAgICAgIGhvbWU6IGdhbWUudGVhbXM/LmhvbWU/LmxvZ28sXG4gICAgICAgICAgICAgICAgICAgIGF3YXk6IGdhbWUudGVhbXM/LmF3YXk/LmxvZ29cbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAvLyDij7AgSW5mb3MgZHUgbWF0Y2hcbiAgICAgICAgICAgICAgICAgIGdhbWVUaW1lOiBnYW1lLnRpbWUsXG4gICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IGdhbWUudGltZXN0YW1wLFxuICAgICAgICAgICAgICAgICAgbGVhZ3VlSW5mbzoge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBnYW1lLmxlYWd1ZT8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgbG9nbzogZ2FtZS5sZWFndWU/LmxvZ28sXG4gICAgICAgICAgICAgICAgICAgIGNvdW50cnk6IGdhbWUubGVhZ3VlPy5jb3VudHJ5Py5uYW1lXG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3Qgc2F2ZWQgPSBhd2FpdCB0aGlzLnNhdmVNYXRjaChtYXRjaClcbiAgICAgICAgICAgICAgaWYgKHNhdmVkKSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0ZWQrK1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgICAgICDinIUgJHtnYW1lLnRlYW1zLmhvbWUubmFtZX0gJHtnYW1lLnNjb3Jlcy5ob21lLnRvdGFsfS0ke2dhbWUuc2NvcmVzLmF3YXkudG90YWx9ICR7Z2FtZS50ZWFtcy5hd2F5Lm5hbWV9YClcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJldXIgbWF0Y2ggYmFza2V0YmFsbCAke2dhbWUuaWR9OmAsIGVycm9yKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnNvbGUubG9nKGAgICAg4pyFICR7aW1wb3J0ZWR9IG1hdGNocyBOQkEgaW1wb3J0w6lzIHBvdXIgJHtzZWFzb259YClcbiAgICAgICAgdG90YWwgKz0gaW1wb3J0ZWRcbiAgICAgICAgXG4gICAgICAgIC8vIFBhdXNlIGVudHJlIHNhaXNvbnNcbiAgICAgICAgYXdhaXQgdGhpcy5zbGVlcCgzMDAwKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycmV1ciBOQkEgJHtzZWFzb259OmAsIGVycm9yKVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnNvbGUubG9nKGDwn4+AIEJhc2tldGJhbGwgdGVybWluw6k6ICR7dG90YWx9IG1hdGNocyBOQkEgaW1wb3J0w6lzYClcbiAgICByZXR1cm4gdG90YWxcbiAgfVxuXG5cbiAgLy8g8J+liiBNTUEgQ09NUExFVFxuICBhc3luYyBpbXBvcnRBbGxNTUEoKTogUHJvbWlzZTxudW1iZXI+IHtcbiAgICBsZXQgdG90YWwgPSAwXG4gICAgY29uc29sZS5sb2coJ/CfpYogSW1wb3J0IENPTVBMRVQgTU1BIDIwMjQtMjAyNS4uLicpXG5cbiAgICBmb3IgKGNvbnN0IFtvcmdhbml6YXRpb25OYW1lLCBvcmdJZF0gb2YgT2JqZWN0LmVudHJpZXMoU1BPUlRfTEVBR1VFUy5tbWEpKSB7XG4gICAgICBjb25zb2xlLmxvZyhg8J+TiiBJbXBvcnQgJHtvcmdhbml6YXRpb25OYW1lfS4uLmApXG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgeWVhciBvZiBbMjAyNCwgMjAyNV0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICDwn5OFIEFubsOpZSAke3llYXJ9Li4uYClcbiAgICAgICAgICBcbiAgICAgICAgICBjb25zdCBldmVudHMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KCdtbWEnLCAnL3YxL2V2ZW50cycsIHtcbiAgICAgICAgICAgIG9yZ2FuaXphdGlvbjogb3JnSWQsXG4gICAgICAgICAgICB5ZWFyOiB5ZWFyXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGxldCBpbXBvcnRlZCA9IDBcbiAgICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IG9mIGV2ZW50cy5zbGljZSgwLCAzMCkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgIC8vIFLDqWN1cMOpcmVyIGTDqXRhaWxzIGRlcyBjb21iYXRzXG4gICAgICAgICAgICAgIGNvbnN0IGZpZ2h0cyA9IGF3YWl0IHRoaXMubWFrZVJlcXVlc3QoJ21tYScsICcvdjEvZmlnaHRzJywge1xuICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudC5pZFxuICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgIGZvciAoY29uc3QgZmlnaHQgb2YgZmlnaHRzLnNsaWNlKDAsIDUpKSB7IC8vIFRvcCA1IGNvbWJhdHMgcGFyIGV2ZW50XG4gICAgICAgICAgICAgICAgaWYgKGZpZ2h0LnN0YXR1cyA9PT0gJ2ZpbmlzaGVkJykge1xuICAgICAgICAgICAgICAgICAgY29uc3QgbWF0Y2g6IFVuaWZpZWRNYXRjaCA9IHtcbiAgICAgICAgICAgICAgICAgICAgZXh0ZXJuYWxJZDogYG1tYV8ke29yZ0lkfV8ke2ZpZ2h0LmlkfWAsXG4gICAgICAgICAgICAgICAgICAgIHNwb3J0OiAnbW1hJyxcbiAgICAgICAgICAgICAgICAgICAgY29tcGV0aXRpb246IG9yZ2FuaXphdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgICAgIGhvbWVUZWFtOiBmaWdodC5maWdodGVyMT8ubmFtZSB8fCAnRmlnaHRlciAxJyxcbiAgICAgICAgICAgICAgICAgICAgYXdheVRlYW06IGZpZ2h0LmZpZ2h0ZXIyPy5uYW1lIHx8ICdGaWdodGVyIDInLFxuICAgICAgICAgICAgICAgICAgICBob21lU2NvcmU6IGZpZ2h0LnJlc3VsdD8ud2lubmVyID09PSAxID8gJ1cnIDogJ0wnLFxuICAgICAgICAgICAgICAgICAgICBhd2F5U2NvcmU6IGZpZ2h0LnJlc3VsdD8ud2lubmVyID09PSAyID8gJ1cnIDogJ0wnLFxuICAgICAgICAgICAgICAgICAgICBkYXRlOiBuZXcgRGF0ZShldmVudC5kYXRlKSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzOiAnRklOSVNIRUQnLFxuICAgICAgICAgICAgICAgICAgICB2ZW51ZTogZXZlbnQudmVudWUsXG4gICAgICAgICAgICAgICAgICAgIHNlYXNvbjogeWVhci50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWxzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0Q2xhc3M6IGZpZ2h0LndlaWdodENsYXNzLFxuICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogZmlnaHQucmVzdWx0Py5tZXRob2QsXG4gICAgICAgICAgICAgICAgICAgICAgcm91bmQ6IGZpZ2h0LnJlc3VsdD8ucm91bmQsXG4gICAgICAgICAgICAgICAgICAgICAgdGltZTogZmlnaHQucmVzdWx0Py50aW1lLFxuICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZWU6IGZpZ2h0LnJlZmVyZWUsXG4gICAgICAgICAgICAgICAgICAgICAgdGl0bGVGaWdodDogZmlnaHQudGl0bGVGaWdodCB8fCBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICBmaWdodGVyMToge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4uZmlnaHQuZmlnaHRlcjEsXG4gICAgICAgICAgICAgICAgICAgICAgICByZWNvcmQ6IGZpZ2h0LmZpZ2h0ZXIxPy5yZWNvcmRcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIGZpZ2h0ZXIyOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5maWdodC5maWdodGVyMixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlY29yZDogZmlnaHQuZmlnaHRlcjI/LnJlY29yZFxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBjb25zdCBzYXZlZCA9IGF3YWl0IHRoaXMuc2F2ZU1hdGNoKG1hdGNoKVxuICAgICAgICAgICAgICAgICAgaWYgKHNhdmVkKSBpbXBvcnRlZCsrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGBFcnJldXIgZXZlbnQgTU1BOmAsIGVycm9yKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnNvbGUubG9nKGAgICAg4pyFICR7aW1wb3J0ZWR9IGNvbWJhdHMgTU1BIGltcG9ydMOpc2ApXG4gICAgICAgICAgdG90YWwgKz0gaW1wb3J0ZWRcbiAgICAgICAgICBhd2FpdCB0aGlzLnNsZWVwKDMwMDApXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycmV1ciAke29yZ2FuaXphdGlvbk5hbWV9ICR7eWVhcn06YCwgZXJyb3IpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG90YWxcbiAgfVxuXG4gIC8vIPCfj4kgUlVHQlkgQ09NUExFVFxuICBhc3luYyBpbXBvcnRBbGxSdWdieSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGxldCB0b3RhbCA9IDBcbiAgICBjb25zb2xlLmxvZygn8J+PiSBJbXBvcnQgQ09NUExFVCBSdWdieSAyMDI0LTIwMjUuLi4nKVxuXG4gICAgZm9yIChjb25zdCBbY29tcGV0aXRpb25OYW1lLCBsZWFndWVJZF0gb2YgT2JqZWN0LmVudHJpZXMoU1BPUlRfTEVBR1VFUy5ydWdieSkpIHtcbiAgICAgIGNvbnNvbGUubG9nKGDwn5OKIEltcG9ydCAke2NvbXBldGl0aW9uTmFtZX0uLi5gKVxuICAgICAgXG4gICAgICBmb3IgKGNvbnN0IHNlYXNvbiBvZiBbMjAyNCwgMjAyNV0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgICDwn5OFIFNhaXNvbiAke3NlYXNvbn0uLi5gKVxuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IGZpeHR1cmVzID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgncnVnYnknLCAnL3YxL2ZpeHR1cmVzJywge1xuICAgICAgICAgICAgbGVhZ3VlOiBsZWFndWVJZCxcbiAgICAgICAgICAgIHNlYXNvbjogc2Vhc29uLFxuICAgICAgICAgICAgc3RhdHVzOiAnRlQnXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGxldCBpbXBvcnRlZCA9IDBcbiAgICAgICAgICBmb3IgKGNvbnN0IGZpeHR1cmUgb2YgZml4dHVyZXMuc2xpY2UoMCwgNDApKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAvLyBSw6ljdXDDqXJlciBkw6l0YWlscyBtYXRjaCBydWdieVxuICAgICAgICAgICAgICBjb25zdCBtYXRjaERldGFpbHMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KCdydWdieScsICcvdjEvZml4dHVyZXMvZGV0YWlscycsIHtcbiAgICAgICAgICAgICAgICBpZDogZml4dHVyZS5pZFxuICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgIGNvbnN0IG1hdGNoOiBVbmlmaWVkTWF0Y2ggPSB7XG4gICAgICAgICAgICAgICAgZXh0ZXJuYWxJZDogYHJ1Z2J5XyR7bGVhZ3VlSWR9XyR7Zml4dHVyZS5pZH1gLFxuICAgICAgICAgICAgICAgIHNwb3J0OiAncnVnYnknLFxuICAgICAgICAgICAgICAgIGNvbXBldGl0aW9uOiBjb21wZXRpdGlvbk5hbWUsXG4gICAgICAgICAgICAgICAgaG9tZVRlYW06IGZpeHR1cmUudGVhbXM/LmhvbWU/Lm5hbWUgfHwgJ0hvbWUnLFxuICAgICAgICAgICAgICAgIGF3YXlUZWFtOiBmaXh0dXJlLnRlYW1zPy5hd2F5Py5uYW1lIHx8ICdBd2F5JyxcbiAgICAgICAgICAgICAgICBob21lU2NvcmU6IGZpeHR1cmUuc2NvcmVzPy5ob21lIHx8IDAsXG4gICAgICAgICAgICAgICAgYXdheVNjb3JlOiBmaXh0dXJlLnNjb3Jlcz8uYXdheSB8fCAwLFxuICAgICAgICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKGZpeHR1cmUuZGF0ZSksXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnRklOSVNIRUQnLFxuICAgICAgICAgICAgICAgIHZlbnVlOiBmaXh0dXJlLnZlbnVlLFxuICAgICAgICAgICAgICAgIHNlYXNvbjogc2Vhc29uLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgZGV0YWlsczoge1xuICAgICAgICAgICAgICAgICAgaGFsZnRpbWVTY29yZTogZml4dHVyZS5oYWxmdGltZSB8fCB7fSxcbiAgICAgICAgICAgICAgICAgIHRyaWVzOiBtYXRjaERldGFpbHM/LnRyaWVzIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgY29udmVyc2lvbnM6IG1hdGNoRGV0YWlscz8uY29udmVyc2lvbnMgfHwgW10sXG4gICAgICAgICAgICAgICAgICBwZW5hbHRpZXM6IG1hdGNoRGV0YWlscz8ucGVuYWx0aWVzIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgY2FyZHM6IG1hdGNoRGV0YWlscz8uY2FyZHMgfHwgW10sXG4gICAgICAgICAgICAgICAgICByZWZlcmVlOiBmaXh0dXJlLnJlZmVyZWUsXG4gICAgICAgICAgICAgICAgICBhdHRlbmRhbmNlOiBmaXh0dXJlLmF0dGVuZGFuY2UsXG4gICAgICAgICAgICAgICAgICB3ZWF0aGVyOiBmaXh0dXJlLndlYXRoZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBjb25zdCBzYXZlZCA9IGF3YWl0IHRoaXMuc2F2ZU1hdGNoKG1hdGNoKVxuICAgICAgICAgICAgICBpZiAoc2F2ZWQpIGltcG9ydGVkKytcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycmV1ciBtYXRjaCBydWdieTpgLCBlcnJvcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zb2xlLmxvZyhgICAgIOKchSAke2ltcG9ydGVkfSBtYXRjaHMgcnVnYnkgaW1wb3J0w6lzYClcbiAgICAgICAgICB0b3RhbCArPSBpbXBvcnRlZFxuICAgICAgICAgIGF3YWl0IHRoaXMuc2xlZXAoMjUwMClcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGDinYwgRXJyZXVyICR7Y29tcGV0aXRpb25OYW1lfSAke3NlYXNvbn06YCwgZXJyb3IpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdG90YWxcbiAgfVxuXG4gIC8vIPCfj47vuI8gRk9STVVMRSAxIENPTVBMw4hURVxuICBhc3luYyBpbXBvcnRBbGxGMSgpOiBQcm9taXNlPG51bWJlcj4ge1xuICAgIGxldCB0b3RhbCA9IDBcbiAgICBjb25zb2xlLmxvZygn8J+Pju+4jyBJbXBvcnQgQ09NUExFVCBGb3JtdWxlIDEgMjAyNC0yMDI1Li4uJylcblxuICAgIGZvciAoY29uc3Qgc2Vhc29uIG9mIFsyMDI0LCAyMDI1XSkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc29sZS5sb2coYPCfk4UgU2Fpc29uIEYxICR7c2Vhc29ufS4uLmApXG4gICAgICAgIFxuICAgICAgICAvLyBSw6ljdXDDqXJlciB0b3V0ZXMgbGVzIGNvdXJzZXNcbiAgICAgICAgY29uc3QgcmFjZXMgPSBhd2FpdCB0aGlzLm1ha2VSZXF1ZXN0KCdmMScsICcvdjEvcmFjZXMnLCB7XG4gICAgICAgICAgc2Vhc29uOiBzZWFzb25cbiAgICAgICAgfSlcblxuICAgICAgICBsZXQgaW1wb3J0ZWQgPSAwXG4gICAgICAgIGZvciAoY29uc3QgcmFjZSBvZiByYWNlcykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBSw6ljdXDDqXJlciByw6lzdWx0YXRzIGTDqXRhaWxsw6lzXG4gICAgICAgICAgICBjb25zdCBbcmVzdWx0cywgcXVhbGlmeWluZywgcHJhY3RpY2VzXSA9IGF3YWl0IFByb21pc2UuYWxsKFtcbiAgICAgICAgICAgICAgdGhpcy5tYWtlUmVxdWVzdCgnZjEnLCAnL3YxL3JhY2VzL3Jlc3VsdHMnLCB7IHJhY2U6IHJhY2UuaWQgfSksXG4gICAgICAgICAgICAgIHRoaXMubWFrZVJlcXVlc3QoJ2YxJywgJy92MS9xdWFsaWZ5aW5nJywgeyByYWNlOiByYWNlLmlkIH0pLFxuICAgICAgICAgICAgICB0aGlzLm1ha2VSZXF1ZXN0KCdmMScsICcvdjEvcHJhY3RpY2UnLCB7IHJhY2U6IHJhY2UuaWQgfSlcbiAgICAgICAgICAgIF0pXG5cbiAgICAgICAgICAgIGlmIChyZXN1bHRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3Qgd2lubmVyID0gcmVzdWx0c1swXVxuICAgICAgICAgICAgICBjb25zdCBwb2RpdW0gPSByZXN1bHRzLnNsaWNlKDAsIDMpXG5cbiAgICAgICAgICAgICAgY29uc3QgbWF0Y2g6IFVuaWZpZWRNYXRjaCA9IHtcbiAgICAgICAgICAgICAgICBleHRlcm5hbElkOiBgZjFfJHtzZWFzb259XyR7cmFjZS5pZH1gLFxuICAgICAgICAgICAgICAgIHNwb3J0OiAnZjEnLFxuICAgICAgICAgICAgICAgIGNvbXBldGl0aW9uOiAnRm9ybXVsYSAxJyxcbiAgICAgICAgICAgICAgICBob21lVGVhbTogd2lubmVyLmRyaXZlcj8ubmFtZSB8fCAnV2lubmVyJyxcbiAgICAgICAgICAgICAgICBhd2F5VGVhbTogJ0ZpZWxkJywgLy8gTGUgcmVzdGUgZHUgcGxhdGVhdVxuICAgICAgICAgICAgICAgIGhvbWVTY29yZTogJzFzdCcsIC8vIFBvc2l0aW9uXG4gICAgICAgICAgICAgICAgYXdheVNjb3JlOiBgJHtyZXN1bHRzLmxlbmd0aH1gLCAvLyBOb21icmUgdG90YWwgcGFydGljaXBhbnRzXG4gICAgICAgICAgICAgICAgZGF0ZTogbmV3IERhdGUocmFjZS5kYXRlKSxcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdGSU5JU0hFRCcsXG4gICAgICAgICAgICAgICAgdmVudWU6IHJhY2UuY2lyY3VpdD8ubmFtZSxcbiAgICAgICAgICAgICAgICBzZWFzb246IHNlYXNvbi50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIGRldGFpbHM6IHtcbiAgICAgICAgICAgICAgICAgIGdyYW5kUHJpeDogcmFjZS5uYW1lLFxuICAgICAgICAgICAgICAgICAgY2lyY3VpdDogcmFjZS5jaXJjdWl0LFxuICAgICAgICAgICAgICAgICAgbGFwczogcmFjZS5sYXBzLFxuICAgICAgICAgICAgICAgICAgZGlzdGFuY2U6IHJhY2UuZGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgICBwb2RpdW06IHBvZGl1bS5tYXAoKHI6IGFueSkgPT4gKHtcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHIucG9zaXRpb24sXG4gICAgICAgICAgICAgICAgICAgIGRyaXZlcjogci5kcml2ZXI/Lm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHRlYW06IHIudGVhbT8ubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgdGltZTogci50aW1lLFxuICAgICAgICAgICAgICAgICAgICBwb2ludHM6IHIucG9pbnRzXG4gICAgICAgICAgICAgICAgICB9KSksXG4gICAgICAgICAgICAgICAgICBmdWxsUmVzdWx0czogcmVzdWx0cy5zbGljZSgwLCAyMCksIC8vIFRvcCAyMFxuICAgICAgICAgICAgICAgICAgcXVhbGlmeWluZzogcXVhbGlmeWluZyB8fCBbXSxcbiAgICAgICAgICAgICAgICAgIHByYWN0aWNlczogcHJhY3RpY2VzIHx8IFtdLFxuICAgICAgICAgICAgICAgICAgZmFzdGVzdExhcDogcmFjZS5mYXN0ZXN0TGFwLFxuICAgICAgICAgICAgICAgICAgd2VhdGhlcjogcmFjZS53ZWF0aGVyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgY29uc3Qgc2F2ZWQgPSBhd2FpdCB0aGlzLnNhdmVNYXRjaChtYXRjaClcbiAgICAgICAgICAgICAgaWYgKHNhdmVkKSBpbXBvcnRlZCsrXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYEVycmV1ciBjb3Vyc2UgRjE6YCwgZXJyb3IpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coYCAgICDinIUgJHtpbXBvcnRlZH0gY291cnNlcyBGMSBpbXBvcnTDqWVzYClcbiAgICAgICAgdG90YWwgKz0gaW1wb3J0ZWRcbiAgICAgICAgYXdhaXQgdGhpcy5zbGVlcCgzMDAwKVxuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihg4p2MIEVycmV1ciBGMSAke3NlYXNvbn06YCwgZXJyb3IpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRvdGFsXG4gIH1cblxuICAvLyDwn5qAIElNUE9SVCBDT01QTEVUIERFIFRPVVMgTEVTIFNQT1JUU1xuICBhc3luYyBpbXBvcnRFdmVyeXRoaW5nKCk6IFByb21pc2U8eyBmb290YmFsbDogbnVtYmVyLCBiYXNrZXRiYWxsOiBudW1iZXIsIG1tYTogbnVtYmVyLCBydWdieTogbnVtYmVyLCBmMTogbnVtYmVyLCB0b3RhbDogbnVtYmVyIH0+IHtcbiAgICBjb25zb2xlLmxvZygn8J+agCBJTVBPUlQgQ09NUExFVCAtIFRPVVMgTEVTIFNQT1JUUyAyMDI0LTIwMjUnKVxuICAgIGNvbnNvbGUubG9nKCfij7HvuI8gIFRlbXBzIGVzdGltw6kgOiAyMC0zMCBtaW51dGVzLi4uJylcbiAgICBjb25zb2xlLmxvZygn8J+PhiBGb290YmFsbCArIEJhc2tldGJhbGwgKyBNTUEgKyBSdWdieSArIEYxJylcblxuICAgIGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KClcblxuICAgIC8vIEltcG9ydCBlbiBwYXJhbGzDqGxlIHBvdXIgb3B0aW1pc2VyXG4gICAgY29uc3QgW2Zvb3RiYWxsLCBiYXNrZXRiYWxsLCBtbWEsIHJ1Z2J5LCBmMV0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLmltcG9ydEFsbEZvb3RiYWxsKCksXG4gICAgICB0aGlzLmltcG9ydEFsbEJhc2tldGJhbGwoKSxcbiAgICAgIHRoaXMuaW1wb3J0QWxsTU1BKCksXG4gICAgICB0aGlzLmltcG9ydEFsbFJ1Z2J5KCksXG4gICAgICB0aGlzLmltcG9ydEFsbEYxKClcbiAgICBdKVxuXG4gICAgY29uc3QgdG90YWwgPSBmb290YmFsbCArIGJhc2tldGJhbGwgKyBtbWEgKyBydWdieSArIGYxXG4gICAgY29uc3QgZHVyYXRpb24gPSBNYXRoLnJvdW5kKChEYXRlLm5vdygpIC0gc3RhcnRUaW1lKSAvIDEwMDApXG5cbiAgICBjb25zb2xlLmxvZyhgXFxu8J+OiSBJTVBPUlQgVEVSTUlOw4kgZW4gJHtkdXJhdGlvbn1zICFgKVxuICAgIGNvbnNvbGUubG9nKGDimr0gRm9vdGJhbGw6ICR7Zm9vdGJhbGx9IG1hdGNoc2ApXG4gICAgY29uc29sZS5sb2coYPCfj4AgQmFza2V0YmFsbDogJHtiYXNrZXRiYWxsfSBtYXRjaHNgKVxuICAgIGNvbnNvbGUubG9nKGDwn6WKIE1NQTogJHttbWF9IGNvbWJhdHNgKVxuICAgIGNvbnNvbGUubG9nKGDwn4+JIFJ1Z2J5OiAke3J1Z2J5fSBtYXRjaHNgKVxuICAgIGNvbnNvbGUubG9nKGDwn4+O77iPIEYxOiAke2YxfSBjb3Vyc2VzYClcbiAgICBjb25zb2xlLmxvZyhg8J+TiiBUT1RBTDogJHt0b3RhbH0gw6l2w6luZW1lbnRzYClcblxuICAgIHJldHVybiB7IGZvb3RiYWxsLCBiYXNrZXRiYWxsLCBtbWEsIHJ1Z2J5LCBmMSwgdG90YWwgfVxuICB9XG5cbiAgLy8g8J+SviBTQVVWRUdBUkRFUiBVTiBNQVRDSFxuICBwcml2YXRlIGFzeW5jIHNhdmVNYXRjaChtYXRjaDogVW5pZmllZE1hdGNoKTogUHJvbWlzZTxib29sZWFuPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGV4aXN0aW5nID0gYXdhaXQgcHJpc21hLm1hdGNoLmZpbmRGaXJzdCh7XG4gICAgICAgIHdoZXJlOiB7XG4gICAgICAgICAgaG9tZVRlYW06IG1hdGNoLmhvbWVUZWFtLFxuICAgICAgICAgIGF3YXlUZWFtOiBtYXRjaC5hd2F5VGVhbSxcbiAgICAgICAgICBjb21wZXRpdGlvbjogbWF0Y2guY29tcGV0aXRpb24sXG4gICAgICAgICAgZGF0ZToge1xuICAgICAgICAgICAgZ3RlOiBuZXcgRGF0ZShtYXRjaC5kYXRlLmdldFRpbWUoKSAtIDI0KjYwKjYwKjEwMDApLFxuICAgICAgICAgICAgbHRlOiBuZXcgRGF0ZShtYXRjaC5kYXRlLmdldFRpbWUoKSArIDI0KjYwKjYwKjEwMDApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gICAgICBpZiAoZXhpc3RpbmcpIHJldHVybiBmYWxzZVxuXG4gICAgICBhd2FpdCBwcmlzbWEubWF0Y2guY3JlYXRlKHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIGFwaU1hdGNoSWQ6IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDkwMDAwMCkgKyAxMDAwMDAsXG4gICAgICAgICAgaG9tZVRlYW06IG1hdGNoLmhvbWVUZWFtLFxuICAgICAgICAgIGF3YXlUZWFtOiBtYXRjaC5hd2F5VGVhbSxcbiAgICAgICAgICBob21lU2NvcmU6IHR5cGVvZiBtYXRjaC5ob21lU2NvcmUgPT09ICdudW1iZXInID8gbWF0Y2guaG9tZVNjb3JlIDogMCxcbiAgICAgICAgICBhd2F5U2NvcmU6IHR5cGVvZiBtYXRjaC5hd2F5U2NvcmUgPT09ICdudW1iZXInID8gbWF0Y2guYXdheVNjb3JlIDogMCxcbiAgICAgICAgICBkYXRlOiBtYXRjaC5kYXRlLFxuICAgICAgICAgIHN0YXR1czogbWF0Y2guc3RhdHVzLFxuICAgICAgICAgIGNvbXBldGl0aW9uOiBtYXRjaC5jb21wZXRpdGlvbixcbiAgICAgICAgICBzZWFzb246IG1hdGNoLnNlYXNvbixcbiAgICAgICAgICB2ZW51ZTogbWF0Y2gudmVudWUsXG4gICAgICAgICAgaG9tZVRlYW1Mb2dvOiBtYXRjaC5kZXRhaWxzPy5sb2dvcz8uaG9tZSB8fCB0aGlzLmdldERlZmF1bHRMb2dvKG1hdGNoLmhvbWVUZWFtKSxcbiAgICAgICAgICBhd2F5VGVhbUxvZ286IG1hdGNoLmRldGFpbHM/LmxvZ29zPy5hd2F5IHx8IHRoaXMuZ2V0RGVmYXVsdExvZ28obWF0Y2guYXdheVRlYW0pLFxuICAgICAgICAgIC8vIFN0b2NrZXIgbGVzIGTDqXRhaWxzIGVuIEpTT04gc2kgYmVzb2luXG4gICAgICAgICAgLy8gZGV0YWlsczogSlNPTi5zdHJpbmdpZnkobWF0Y2guZGV0YWlscylcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBnZXREZWZhdWx0TG9nbyh0ZWFtTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYGh0dHBzOi8vdmlhLnBsYWNlaG9sZGVyLmNvbS81MHg1MC8wMDdBQ0MvZmZmZmZmP3RleHQ9JHt0ZWFtTmFtZS5jaGFyQXQoMCl9YFxuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBzbGVlcChtczogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpXG4gIH1cblxuICAvLyDwn5SEIElNUE9SVCBRVU9USURJRU4gQVVUT01BVElRVUUgKGRlcm5pw6hyZXMgMjRoKVxuICBhc3luYyBpbXBvcnRSZWNlbnRGaW5pc2hlZCgpOiBQcm9taXNlPHsgaW1wb3J0ZWQ6IG51bWJlciwgc3BvcnRzOiBzdHJpbmdbXSB9PiB7XG4gICAgY29uc29sZS5sb2coJ/CflIQgSW1wb3J0IGF1dG9tYXRpcXVlIGRlcyBkZXJuacOocmVzIDI0aC4uLicpXG4gICAgXG4gICAgY29uc3QgeWVzdGVyZGF5ID0gbmV3IERhdGUoKVxuICAgIHllc3RlcmRheS5zZXREYXRlKHllc3RlcmRheS5nZXREYXRlKCkgLSAxKVxuICAgIFxuICAgIGxldCB0b3RhbEltcG9ydGVkID0gMFxuICAgIGNvbnN0IHNwb3J0c0ltcG9ydGVkOiBzdHJpbmdbXSA9IFtdXG5cbiAgICAvLyBWw6lyaWZpZXIgY2hhcXVlIHNwb3J0XG4gICAgdHJ5IHtcbiAgICAgIC8vIEZvb3RiYWxsIHLDqWNlbnRcbiAgICAgIGNvbnN0IGZvb3RiYWxsUmVjZW50ID0gYXdhaXQgdGhpcy5tYWtlUmVxdWVzdCgnZm9vdGJhbGwnLCAnL3YzL2ZpeHR1cmVzJywge1xuICAgICAgICBkYXRlOiB5ZXN0ZXJkYXkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdLFxuICAgICAgICBzdGF0dXM6ICdGVCdcbiAgICAgIH0pXG4gICAgICBcbiAgICAgIGZvciAoY29uc3QgbWF0Y2ggb2YgZm9vdGJhbGxSZWNlbnQuc2xpY2UoMCwgMjApKSB7XG4gICAgICAgIGNvbnN0IHVuaWZpZWQ6IFVuaWZpZWRNYXRjaCA9IHtcbiAgICAgICAgICBleHRlcm5hbElkOiBgYXV0b19mb290YmFsbF8ke21hdGNoLmZpeHR1cmUuaWR9YCxcbiAgICAgICAgICBzcG9ydDogJ2Zvb3RiYWxsJyxcbiAgICAgICAgICBjb21wZXRpdGlvbjogbWF0Y2gubGVhZ3VlLm5hbWUsXG4gICAgICAgICAgaG9tZVRlYW06IG1hdGNoLnRlYW1zLmhvbWUubmFtZSxcbiAgICAgICAgICBhd2F5VGVhbTogbWF0Y2gudGVhbXMuYXdheS5uYW1lLFxuICAgICAgICAgIGhvbWVTY29yZTogbWF0Y2guZ29hbHMuaG9tZSB8fCAwLFxuICAgICAgICAgIGF3YXlTY29yZTogbWF0Y2guZ29hbHMuYXdheSB8fCAwLFxuICAgICAgICAgIGRhdGU6IG5ldyBEYXRlKG1hdGNoLmZpeHR1cmUuZGF0ZSksXG4gICAgICAgICAgc3RhdHVzOiAnRklOSVNIRUQnLFxuICAgICAgICAgIHZlbnVlOiBtYXRjaC5maXh0dXJlLnZlbnVlPy5uYW1lLFxuICAgICAgICAgIHNlYXNvbjogJzIwMjQnXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGlmIChhd2FpdCB0aGlzLnNhdmVNYXRjaCh1bmlmaWVkKSkge1xuICAgICAgICAgIHRvdGFsSW1wb3J0ZWQrK1xuICAgICAgICAgIGlmICghc3BvcnRzSW1wb3J0ZWQuaW5jbHVkZXMoJ2Zvb3RiYWxsJykpIHNwb3J0c0ltcG9ydGVkLnB1c2goJ2Zvb3RiYWxsJylcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBNw6ptZSBsb2dpcXVlIHBvdXIgYXV0cmVzIHNwb3J0cy4uLlxuICAgICAgLy8gQmFza2V0YmFsbCwgTU1BLCBSdWdieSwgRjEgcsOpY2VudHNcbiAgICAgIFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCfinYwgRXJyZXVyIGltcG9ydCBhdXRvbWF0aXF1ZTonLCBlcnJvcilcbiAgICB9XG5cbiAgICByZXR1cm4geyBpbXBvcnRlZDogdG90YWxJbXBvcnRlZCwgc3BvcnRzOiBzcG9ydHNJbXBvcnRlZCB9XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IHVuaWZpZWRTcG9ydHNBUEkgPSBuZXcgVW5pZmllZFNwb3J0c0FQSSgpIl0sIm5hbWVzIjpbInByaXNtYSIsIlJBUElEQVBJX0tFWSIsInByb2Nlc3MiLCJlbnYiLCJTUE9SVF9BUElTIiwiZm9vdGJhbGwiLCJiYXNrZXRiYWxsIiwibW1hIiwicnVnYnkiLCJmMSIsIlNQT1JUX0xFQUdVRVMiLCJVbmlmaWVkU3BvcnRzQVBJIiwibWFrZVJlcXVlc3QiLCJzcG9ydCIsImVuZHBvaW50IiwicGFyYW1zIiwiaG9zdCIsInVybCIsIlVSTCIsIk9iamVjdCIsImVudHJpZXMiLCJmb3JFYWNoIiwia2V5IiwidmFsdWUiLCJzZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJTdHJpbmciLCJyZXNwb25zZSIsImZldGNoIiwidG9TdHJpbmciLCJoZWFkZXJzIiwib2siLCJFcnJvciIsInN0YXR1cyIsImRhdGEiLCJqc29uIiwicmVzdWx0cyIsImVycm9yIiwiY29uc29sZSIsImltcG9ydEFsbEZvb3RiYWxsIiwidG90YWwiLCJsb2ciLCJjb21wZXRpdGlvbk5hbWUiLCJsZWFndWVJZCIsInNlYXNvbiIsImZpeHR1cmVzIiwibGVhZ3VlIiwiaW1wb3J0ZWQiLCJmaXh0dXJlIiwic2xpY2UiLCJldmVudHMiLCJsaW5ldXBzIiwic3RhdGlzdGljcyIsIlByb21pc2UiLCJhbGwiLCJpZCIsIm1hdGNoIiwiZXh0ZXJuYWxJZCIsImNvbXBldGl0aW9uIiwiaG9tZVRlYW0iLCJ0ZWFtcyIsImhvbWUiLCJuYW1lIiwiYXdheVRlYW0iLCJhd2F5IiwiaG9tZVNjb3JlIiwiZ29hbHMiLCJhd2F5U2NvcmUiLCJkYXRlIiwiRGF0ZSIsInZlbnVlIiwiZGV0YWlscyIsInJlZmVyZWUiLCJhdHRlbmRhbmNlIiwibG9nb3MiLCJsb2dvIiwic2F2ZWQiLCJzYXZlTWF0Y2giLCJzbGVlcCIsImltcG9ydEFsbEJhc2tldGJhbGwiLCJzZWFzb25zIiwiZ2FtZXMiLCJsZW5ndGgiLCJnYW1lIiwic2hvcnQiLCJzY29yZXMiLCJxdWFydGVycyIsInExIiwicXVhcnRlcl8xIiwicTIiLCJxdWFydGVyXzIiLCJxMyIsInF1YXJ0ZXJfMyIsInE0IiwicXVhcnRlcl80Iiwib3ZlcnRpbWUiLCJvdmVyX3RpbWUiLCJnYW1lVGltZSIsInRpbWUiLCJ0aW1lc3RhbXAiLCJsZWFndWVJbmZvIiwiY291bnRyeSIsImltcG9ydEFsbE1NQSIsIm9yZ2FuaXphdGlvbk5hbWUiLCJvcmdJZCIsInllYXIiLCJvcmdhbml6YXRpb24iLCJldmVudCIsImZpZ2h0cyIsImZpZ2h0IiwiZmlnaHRlcjEiLCJmaWdodGVyMiIsInJlc3VsdCIsIndpbm5lciIsIndlaWdodENsYXNzIiwibWV0aG9kIiwicm91bmQiLCJ0aXRsZUZpZ2h0IiwicmVjb3JkIiwiaW1wb3J0QWxsUnVnYnkiLCJtYXRjaERldGFpbHMiLCJoYWxmdGltZVNjb3JlIiwiaGFsZnRpbWUiLCJ0cmllcyIsImNvbnZlcnNpb25zIiwicGVuYWx0aWVzIiwiY2FyZHMiLCJ3ZWF0aGVyIiwiaW1wb3J0QWxsRjEiLCJyYWNlcyIsInJhY2UiLCJxdWFsaWZ5aW5nIiwicHJhY3RpY2VzIiwicG9kaXVtIiwiZHJpdmVyIiwiY2lyY3VpdCIsImdyYW5kUHJpeCIsImxhcHMiLCJkaXN0YW5jZSIsIm1hcCIsInIiLCJwb3NpdGlvbiIsInRlYW0iLCJwb2ludHMiLCJmdWxsUmVzdWx0cyIsImZhc3Rlc3RMYXAiLCJpbXBvcnRFdmVyeXRoaW5nIiwic3RhcnRUaW1lIiwibm93IiwiZHVyYXRpb24iLCJNYXRoIiwiZXhpc3RpbmciLCJmaW5kRmlyc3QiLCJ3aGVyZSIsImd0ZSIsImdldFRpbWUiLCJsdGUiLCJjcmVhdGUiLCJhcGlNYXRjaElkIiwiZmxvb3IiLCJyYW5kb20iLCJob21lVGVhbUxvZ28iLCJnZXREZWZhdWx0TG9nbyIsImF3YXlUZWFtTG9nbyIsInRlYW1OYW1lIiwiY2hhckF0IiwibXMiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImltcG9ydFJlY2VudEZpbmlzaGVkIiwieWVzdGVyZGF5Iiwic2V0RGF0ZSIsImdldERhdGUiLCJ0b3RhbEltcG9ydGVkIiwic3BvcnRzSW1wb3J0ZWQiLCJmb290YmFsbFJlY2VudCIsInRvSVNPU3RyaW5nIiwic3BsaXQiLCJ1bmlmaWVkIiwiaW5jbHVkZXMiLCJwdXNoIiwic3BvcnRzIiwidW5pZmllZFNwb3J0c0FQSSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/unified-sports-api.ts\n");

/***/ }),

/***/ "(api)/./pages/api/import-all-sports.ts":
/*!****************************************!*\
  !*** ./pages/api/import-all-sports.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/auth */ \"(api)/./lib/auth.ts\");\n/* harmony import */ var _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/unified-sports-api */ \"(api)/./lib/unified-sports-api.ts\");\n// pages/api/import-all-sports.ts\n\n\n\nasync function handler(req, res) {\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(req, res, _lib_auth__WEBPACK_IMPORTED_MODULE_1__.authOptions);\n    if (!session?.user?.id) {\n        return res.status(401).json({\n            error: \"Connexion requise\"\n        });\n    }\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { action = \"import_all\", sport } = req.body;\n    try {\n        console.log(`🚀 Import multi-sports ${action} démarré...`);\n        if (action === \"import_all\") {\n            // 🌍 IMPORT COMPLET DE TOUS LES SPORTS\n            console.log(\"\\uD83C\\uDFC6 IMPORT COMPLET : Football + Basketball + MMA + Rugby + F1\");\n            console.log(\"\\uD83D\\uDCC5 Donn\\xe9es 2024-2025 avec d\\xe9tails complets\");\n            console.log(\"⏱️  Temps estim\\xe9 : 20-30 minutes\");\n            const result = await _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__.unifiedSportsAPI.importEverything();\n            res.status(200).json({\n                success: true,\n                action: \"import_all\",\n                message: \"\\uD83C\\uDF89 IMPORT COMPLET TERMIN\\xc9 !\",\n                result,\n                summary: {\n                    total: `${result.total} événements importés`,\n                    football: `⚽ ${result.football} matchs (Premier League, Liga, Champions League...)`,\n                    basketball: `🏀 ${result.basketball} matchs (NBA, EuroLeague...)`,\n                    mma: `🥊 ${result.mma} combats (UFC, Bellator...)`,\n                    rugby: `🏉 ${result.rugby} matchs (Six Nations, Top 14...)`,\n                    f1: `🏎️ ${result.f1} courses (Formule 1 complète)`\n                },\n                examples: {\n                    football: \"Real Madrid vs Barcelona, Liverpool vs Arsenal...\",\n                    basketball: \"Lakers vs Celtics, Warriors vs Heat...\",\n                    mma: \"UFC fights avec m\\xe9thodes et rounds...\",\n                    rugby: \"Six Nations avec essais et cartons...\",\n                    f1: \"GP Monaco, Silverstone avec podiums...\"\n                },\n                period: \"2024-2025 (2 ans de donn\\xe9es)\",\n                note: \"Tous les \\xe9v\\xe9nements avec d\\xe9tails complets disponibles pour notation !\"\n            });\n        } else if (action === \"import_sport\" && sport) {\n            // Import d'un sport spécifique\n            let imported = 0;\n            let sportName = \"\";\n            switch(sport){\n                case \"football\":\n                    imported = await _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__.unifiedSportsAPI.importAllFootball();\n                    sportName = \"⚽ Football\";\n                    break;\n                case \"basketball\":\n                    imported = await _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__.unifiedSportsAPI.importAllBasketball();\n                    sportName = \"\\uD83C\\uDFC0 Basketball\";\n                    break;\n                case \"mma\":\n                    imported = await _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__.unifiedSportsAPI.importAllMMA();\n                    sportName = \"\\uD83E\\uDD4A MMA\";\n                    break;\n                case \"rugby\":\n                    imported = await _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__.unifiedSportsAPI.importAllRugby();\n                    sportName = \"\\uD83C\\uDFC9 Rugby\";\n                    break;\n                case \"f1\":\n                    imported = await _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__.unifiedSportsAPI.importAllF1();\n                    sportName = \"\\uD83C\\uDFCE️ F1\";\n                    break;\n                default:\n                    return res.status(400).json({\n                        error: \"Sport non support\\xe9\"\n                    });\n            }\n            res.status(200).json({\n                success: true,\n                action: \"import_sport\",\n                sport: sportName,\n                imported,\n                message: `${sportName} : ${imported} événements importés`,\n                period: \"2024-2025\"\n            });\n        } else if (action === \"import_recent\") {\n            // Import automatique des dernières 24h\n            console.log(\"\\uD83D\\uDD04 Import automatique des derni\\xe8res 24h...\");\n            const result = await _lib_unified_sports_api__WEBPACK_IMPORTED_MODULE_2__.unifiedSportsAPI.importRecentFinished();\n            res.status(200).json({\n                success: true,\n                action: \"import_recent\",\n                imported: result.imported,\n                sports: result.sports,\n                message: `🔄 ${result.imported} nouveaux événements des dernières 24h`,\n                period: \"Derni\\xe8res 24 heures\"\n            });\n        } else {\n            return res.status(400).json({\n                error: \"Action inconnue\",\n                availableActions: [\n                    \"import_all\",\n                    \"import_sport\",\n                    \"import_recent\"\n                ]\n            });\n        }\n    } catch (error) {\n        console.error(\"❌ Erreur import multi-sports:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Import failed\",\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            action,\n            help: \"V\\xe9rifie que RAPIDAPI_KEY est configur\\xe9e dans .env\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/import-all-sports.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-all-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-all-sports.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();