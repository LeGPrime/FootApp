"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/import-new-sports";
exports.ids = ["pages/api/import-new-sports"];
exports.modules = {

/***/ "@next-auth/prisma-adapter":
/*!********************************************!*\
  !*** external "@next-auth/prisma-adapter" ***!
  \********************************************/
/***/ ((module) => {

module.exports = require("@next-auth/prisma-adapter");

/***/ }),

/***/ "@prisma/client":
/*!*********************************!*\
  !*** external "@prisma/client" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("@prisma/client");

/***/ }),

/***/ "bcryptjs":
/*!***************************!*\
  !*** external "bcryptjs" ***!
  \***************************/
/***/ ((module) => {

module.exports = require("bcryptjs");

/***/ }),

/***/ "next-auth/next":
/*!*********************************!*\
  !*** external "next-auth/next" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("next-auth/next");

/***/ }),

/***/ "next-auth/providers/credentials":
/*!**************************************************!*\
  !*** external "next-auth/providers/credentials" ***!
  \**************************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/credentials");

/***/ }),

/***/ "next-auth/providers/github":
/*!*********************************************!*\
  !*** external "next-auth/providers/github" ***!
  \*********************************************/
/***/ ((module) => {

module.exports = require("next-auth/providers/github");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-new-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-new-sports.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-new-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-new-sports.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_import_new_sports_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages/api/import-new-sports.ts */ \"(api)/./pages/api/import-new-sports.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_import_new_sports_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_import_new_sports_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/import-new-sports\",\n        pathname: \"/api/import-new-sports\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_import_new_sports_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmltcG9ydC1uZXctc3BvcnRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlMkZhcGklMkZpbXBvcnQtbmV3LXNwb3J0cy50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUM2RDtBQUM3RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsNERBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLDREQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLz83YzJiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBhZ2VzQVBJUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUtbW9kdWxlcy9wYWdlcy1hcGkvbW9kdWxlLmNvbXBpbGVkXCI7XG5pbXBvcnQgeyBSb3V0ZUtpbmQgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9mdXR1cmUvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgaG9pc3QgfSBmcm9tIFwibmV4dC9kaXN0L2J1aWxkL3RlbXBsYXRlcy9oZWxwZXJzXCI7XG4vLyBJbXBvcnQgdGhlIHVzZXJsYW5kIGNvZGUuXG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiLi9wYWdlcy9hcGkvaW1wb3J0LW5ldy1zcG9ydHMudHNcIjtcbi8vIFJlLWV4cG9ydCB0aGUgaGFuZGxlciAoc2hvdWxkIGJlIHRoZSBkZWZhdWx0IGV4cG9ydCkuXG5leHBvcnQgZGVmYXVsdCBob2lzdCh1c2VybGFuZCwgXCJkZWZhdWx0XCIpO1xuLy8gUmUtZXhwb3J0IGNvbmZpZy5cbmV4cG9ydCBjb25zdCBjb25maWcgPSBob2lzdCh1c2VybGFuZCwgXCJjb25maWdcIik7XG4vLyBDcmVhdGUgYW5kIGV4cG9ydCB0aGUgcm91dGUgbW9kdWxlIHRoYXQgd2lsbCBiZSBjb25zdW1lZC5cbmV4cG9ydCBjb25zdCByb3V0ZU1vZHVsZSA9IG5ldyBQYWdlc0FQSVJvdXRlTW9kdWxlKHtcbiAgICBkZWZpbml0aW9uOiB7XG4gICAgICAgIGtpbmQ6IFJvdXRlS2luZC5QQUdFU19BUEksXG4gICAgICAgIHBhZ2U6IFwiL2FwaS9pbXBvcnQtbmV3LXNwb3J0c1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2ltcG9ydC1uZXctc3BvcnRzXCIsXG4gICAgICAgIC8vIFRoZSBmb2xsb3dpbmcgYXJlbid0IHVzZWQgaW4gcHJvZHVjdGlvbi5cbiAgICAgICAgYnVuZGxlUGF0aDogXCJcIixcbiAgICAgICAgZmlsZW5hbWU6IFwiXCJcbiAgICB9LFxuICAgIHVzZXJsYW5kXG59KTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFnZXMtYXBpLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-new-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-new-sports.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/auth.ts":
/*!*********************!*\
  !*** ./lib/auth.ts ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authOptions: () => (/* binding */ authOptions)\n/* harmony export */ });\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @next-auth/prisma-adapter */ \"@next-auth/prisma-adapter\");\n/* harmony import */ var _next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next-auth/providers/github */ \"next-auth/providers/github\");\n/* harmony import */ var next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next-auth/providers/credentials */ \"next-auth/providers/credentials\");\n/* harmony import */ var next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! bcryptjs */ \"bcryptjs\");\n/* harmony import */ var bcryptjs__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(bcryptjs__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./prisma */ \"(api)/./lib/prisma.ts\");\n\n\n\n\n\nconst authOptions = {\n    adapter: (0,_next_auth_prisma_adapter__WEBPACK_IMPORTED_MODULE_0__.PrismaAdapter)(_prisma__WEBPACK_IMPORTED_MODULE_4__.prisma),\n    providers: [\n        next_auth_providers_github__WEBPACK_IMPORTED_MODULE_1___default()({\n            clientId: process.env.GITHUB_ID,\n            clientSecret: process.env.GITHUB_SECRET\n        }),\n        next_auth_providers_credentials__WEBPACK_IMPORTED_MODULE_2___default()({\n            name: \"credentials\",\n            credentials: {\n                email: {\n                    label: \"Email\",\n                    type: \"email\"\n                },\n                password: {\n                    label: \"Mot de passe\",\n                    type: \"password\"\n                }\n            },\n            async authorize (credentials) {\n                if (!credentials?.email || !credentials?.password) {\n                    return null;\n                }\n                const user = await _prisma__WEBPACK_IMPORTED_MODULE_4__.prisma.user.findUnique({\n                    where: {\n                        email: credentials.email\n                    }\n                });\n                if (!user || !user.password) {\n                    return null;\n                }\n                const isPasswordValid = await bcryptjs__WEBPACK_IMPORTED_MODULE_3___default().compare(credentials.password, user.password);\n                if (!isPasswordValid) {\n                    return null;\n                }\n                return {\n                    id: user.id,\n                    email: user.email,\n                    name: user.name,\n                    username: user.username\n                };\n            }\n        })\n    ],\n    callbacks: {\n        session: async ({ session, token })=>{\n            if (session?.user) {\n                session.user.id = token.sub;\n            }\n            return session;\n        },\n        jwt: async ({ user, token })=>{\n            if (user) {\n                token.uid = user.id;\n            }\n            return token;\n        }\n    },\n    session: {\n        strategy: \"jwt\"\n    },\n    pages: {\n        signIn: \"/auth/signin\"\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvYXV0aC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQ3lEO0FBQ0Y7QUFDVTtBQUNwQztBQUNJO0FBRTFCLE1BQU1LLGNBQStCO0lBQzFDQyxTQUFTTix3RUFBYUEsQ0FBQ0ksMkNBQU1BO0lBQzdCRyxXQUFXO1FBQ1ROLGlFQUFjQSxDQUFDO1lBQ2JPLFVBQVVDLFFBQVFDLEdBQUcsQ0FBQ0MsU0FBUztZQUMvQkMsY0FBY0gsUUFBUUMsR0FBRyxDQUFDRyxhQUFhO1FBQ3pDO1FBQ0FYLHNFQUFtQkEsQ0FBQztZQUNsQlksTUFBTTtZQUNOQyxhQUFhO2dCQUNYQyxPQUFPO29CQUFFQyxPQUFPO29CQUFTQyxNQUFNO2dCQUFRO2dCQUN2Q0MsVUFBVTtvQkFBRUYsT0FBTztvQkFBZ0JDLE1BQU07Z0JBQVc7WUFDdEQ7WUFDQSxNQUFNRSxXQUFVTCxXQUFXO2dCQUN6QixJQUFJLENBQUNBLGFBQWFDLFNBQVMsQ0FBQ0QsYUFBYUksVUFBVTtvQkFDakQsT0FBTztnQkFDVDtnQkFFQSxNQUFNRSxPQUFPLE1BQU1qQiwyQ0FBTUEsQ0FBQ2lCLElBQUksQ0FBQ0MsVUFBVSxDQUFDO29CQUN4Q0MsT0FBTzt3QkFDTFAsT0FBT0QsWUFBWUMsS0FBSztvQkFDMUI7Z0JBQ0Y7Z0JBRUEsSUFBSSxDQUFDSyxRQUFRLENBQUNBLEtBQUtGLFFBQVEsRUFBRTtvQkFDM0IsT0FBTztnQkFDVDtnQkFFQSxNQUFNSyxrQkFBa0IsTUFBTXJCLHVEQUFjLENBQzFDWSxZQUFZSSxRQUFRLEVBQ3BCRSxLQUFLRixRQUFRO2dCQUdmLElBQUksQ0FBQ0ssaUJBQWlCO29CQUNwQixPQUFPO2dCQUNUO2dCQUVBLE9BQU87b0JBQ0xFLElBQUlMLEtBQUtLLEVBQUU7b0JBQ1hWLE9BQU9LLEtBQUtMLEtBQUs7b0JBQ2pCRixNQUFNTyxLQUFLUCxJQUFJO29CQUNmYSxVQUFVTixLQUFLTSxRQUFRO2dCQUN6QjtZQUNGO1FBQ0Y7S0FDRDtJQUNEQyxXQUFXO1FBQ1RDLFNBQVMsT0FBTyxFQUFFQSxPQUFPLEVBQUVDLEtBQUssRUFBRTtZQUNoQyxJQUFJRCxTQUFTUixNQUFNO2dCQUNqQlEsUUFBUVIsSUFBSSxDQUFDSyxFQUFFLEdBQUdJLE1BQU1DLEdBQUc7WUFDN0I7WUFDQSxPQUFPRjtRQUNUO1FBQ0FHLEtBQUssT0FBTyxFQUFFWCxJQUFJLEVBQUVTLEtBQUssRUFBRTtZQUN6QixJQUFJVCxNQUFNO2dCQUNSUyxNQUFNRyxHQUFHLEdBQUdaLEtBQUtLLEVBQUU7WUFDckI7WUFDQSxPQUFPSTtRQUNUO0lBQ0Y7SUFDQUQsU0FBUztRQUNQSyxVQUFVO0lBQ1o7SUFDQUMsT0FBTztRQUNMQyxRQUFRO0lBQ1Y7QUFDRixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZm9vdHJhdGUvLi9saWIvYXV0aC50cz9iZjdlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5leHRBdXRoT3B0aW9ucyB9IGZyb20gXCJuZXh0LWF1dGhcIlxuaW1wb3J0IHsgUHJpc21hQWRhcHRlciB9IGZyb20gXCJAbmV4dC1hdXRoL3ByaXNtYS1hZGFwdGVyXCJcbmltcG9ydCBHaXRodWJQcm92aWRlciBmcm9tIFwibmV4dC1hdXRoL3Byb3ZpZGVycy9naXRodWJcIlxuaW1wb3J0IENyZWRlbnRpYWxzUHJvdmlkZXIgZnJvbSBcIm5leHQtYXV0aC9wcm92aWRlcnMvY3JlZGVudGlhbHNcIlxuaW1wb3J0IGJjcnlwdCBmcm9tIFwiYmNyeXB0anNcIlxuaW1wb3J0IHsgcHJpc21hIH0gZnJvbSBcIi4vcHJpc21hXCJcblxuZXhwb3J0IGNvbnN0IGF1dGhPcHRpb25zOiBOZXh0QXV0aE9wdGlvbnMgPSB7XG4gIGFkYXB0ZXI6IFByaXNtYUFkYXB0ZXIocHJpc21hKSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgR2l0aHViUHJvdmlkZXIoe1xuICAgICAgY2xpZW50SWQ6IHByb2Nlc3MuZW52LkdJVEhVQl9JRCEsXG4gICAgICBjbGllbnRTZWNyZXQ6IHByb2Nlc3MuZW52LkdJVEhVQl9TRUNSRVQhLFxuICAgIH0pLFxuICAgIENyZWRlbnRpYWxzUHJvdmlkZXIoe1xuICAgICAgbmFtZTogXCJjcmVkZW50aWFsc1wiLFxuICAgICAgY3JlZGVudGlhbHM6IHtcbiAgICAgICAgZW1haWw6IHsgbGFiZWw6IFwiRW1haWxcIiwgdHlwZTogXCJlbWFpbFwiIH0sXG4gICAgICAgIHBhc3N3b3JkOiB7IGxhYmVsOiBcIk1vdCBkZSBwYXNzZVwiLCB0eXBlOiBcInBhc3N3b3JkXCIgfVxuICAgICAgfSxcbiAgICAgIGFzeW5jIGF1dGhvcml6ZShjcmVkZW50aWFscykge1xuICAgICAgICBpZiAoIWNyZWRlbnRpYWxzPy5lbWFpbCB8fCAhY3JlZGVudGlhbHM/LnBhc3N3b3JkKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBwcmlzbWEudXNlci5maW5kVW5pcXVlKHtcbiAgICAgICAgICB3aGVyZToge1xuICAgICAgICAgICAgZW1haWw6IGNyZWRlbnRpYWxzLmVtYWlsXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmICghdXNlciB8fCAhdXNlci5wYXNzd29yZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc1Bhc3N3b3JkVmFsaWQgPSBhd2FpdCBiY3J5cHQuY29tcGFyZShcbiAgICAgICAgICBjcmVkZW50aWFscy5wYXNzd29yZCxcbiAgICAgICAgICB1c2VyLnBhc3N3b3JkXG4gICAgICAgIClcblxuICAgICAgICBpZiAoIWlzUGFzc3dvcmRWYWxpZCkge1xuICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGlkOiB1c2VyLmlkLFxuICAgICAgICAgIGVtYWlsOiB1c2VyLmVtYWlsLFxuICAgICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgICB1c2VybmFtZTogdXNlci51c2VybmFtZSxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pXG4gIF0sXG4gIGNhbGxiYWNrczoge1xuICAgIHNlc3Npb246IGFzeW5jICh7IHNlc3Npb24sIHRva2VuIH0pID0+IHtcbiAgICAgIGlmIChzZXNzaW9uPy51c2VyKSB7XG4gICAgICAgIHNlc3Npb24udXNlci5pZCA9IHRva2VuLnN1YiFcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZXNzaW9uXG4gICAgfSxcbiAgICBqd3Q6IGFzeW5jICh7IHVzZXIsIHRva2VuIH0pID0+IHtcbiAgICAgIGlmICh1c2VyKSB7XG4gICAgICAgIHRva2VuLnVpZCA9IHVzZXIuaWRcbiAgICAgIH1cbiAgICAgIHJldHVybiB0b2tlblxuICAgIH0sXG4gIH0sXG4gIHNlc3Npb246IHtcbiAgICBzdHJhdGVneTogJ2p3dCcsXG4gIH0sXG4gIHBhZ2VzOiB7XG4gICAgc2lnbkluOiAnL2F1dGgvc2lnbmluJyxcbiAgfSxcbn1cbiJdLCJuYW1lcyI6WyJQcmlzbWFBZGFwdGVyIiwiR2l0aHViUHJvdmlkZXIiLCJDcmVkZW50aWFsc1Byb3ZpZGVyIiwiYmNyeXB0IiwicHJpc21hIiwiYXV0aE9wdGlvbnMiLCJhZGFwdGVyIiwicHJvdmlkZXJzIiwiY2xpZW50SWQiLCJwcm9jZXNzIiwiZW52IiwiR0lUSFVCX0lEIiwiY2xpZW50U2VjcmV0IiwiR0lUSFVCX1NFQ1JFVCIsIm5hbWUiLCJjcmVkZW50aWFscyIsImVtYWlsIiwibGFiZWwiLCJ0eXBlIiwicGFzc3dvcmQiLCJhdXRob3JpemUiLCJ1c2VyIiwiZmluZFVuaXF1ZSIsIndoZXJlIiwiaXNQYXNzd29yZFZhbGlkIiwiY29tcGFyZSIsImlkIiwidXNlcm5hbWUiLCJjYWxsYmFja3MiLCJzZXNzaW9uIiwidG9rZW4iLCJzdWIiLCJqd3QiLCJ1aWQiLCJzdHJhdGVneSIsInBhZ2VzIiwic2lnbkluIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(api)/./lib/auth.ts\n");

/***/ }),

/***/ "(api)/./lib/enhanced-multi-sports-api.ts":
/*!******************************************!*\
  !*** ./lib/enhanced-multi-sports-api.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enhancedMultiSportsAPI: () => (/* binding */ enhancedMultiSportsAPI)\n/* harmony export */ });\n/* harmony import */ var _prisma__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./prisma */ \"(api)/./lib/prisma.ts\");\n// lib/enhanced-multi-sports-api.ts\n// Implémentation complète pour F1, MMA et Rugby avec de vraies APIs\n\nconst RAPIDAPI_KEY = process.env.RAPIDAPI_KEY;\n// 🌍 CONFIGURATION APIS RÉELLES\nconst ENHANCED_SPORTS_APIS = {\n    football: {\n        host: \"api-football-v1.p.rapidapi.com\",\n        endpoint: \"/v3\"\n    },\n    basketball: {\n        host: \"api-basketball.p.rapidapi.com\",\n        endpoint: \"/v1\"\n    },\n    // 🏎️ FORMULE 1 - API-Sports\n    formula1: {\n        host: \"api-formula-1.p.rapidapi.com\",\n        endpoint: \"/v1\",\n        leagues: {\n            \"Formula 1\": 1 // ID principal F1\n        }\n    },\n    // 🥊 MMA - UFC Data + API-Sports MMA\n    mma: {\n        host: \"api-sports.p.rapidapi.com\",\n        endpoint: \"/v1\",\n        leagues: {\n            \"UFC\": 1,\n            \"Bellator\": 2,\n            \"ONE Championship\": 3\n        }\n    },\n    // 🏉 RUGBY - Ton API existante\n    rugby: {\n        host: \"api-rugby.p.rapidapi.com\",\n        endpoint: \"/v1\",\n        leagues: {\n            \"Top 14\": 1,\n            \"Six Nations\": 2,\n            \"Rugby World Cup\": 3,\n            \"Champions Cup\": 4,\n            \"Premiership\": 5,\n            \"URC\": 6\n        }\n    }\n};\nclass EnhancedMultiSportsAPI {\n    async makeRequest(sport, endpoint, params = {}) {\n        try {\n            const config = ENHANCED_SPORTS_APIS[sport];\n            const url = new URL(`https://${config.host}${config.endpoint}${endpoint}`);\n            Object.entries(params).forEach(([key, value])=>{\n                url.searchParams.append(key, String(value));\n            });\n            console.log(`🔍 API Request: ${sport} - ${endpoint}`);\n            const response = await fetch(url.toString(), {\n                headers: {\n                    \"X-RapidAPI-Key\": RAPIDAPI_KEY,\n                    \"X-RapidAPI-Host\": config.host\n                }\n            });\n            if (!response.ok) {\n                throw new Error(`HTTP ${response.status} for ${sport}`);\n            }\n            const data = await response.json();\n            return data.response || data.results || data || [];\n        } catch (error) {\n            console.error(`❌ Erreur API ${sport}:`, error);\n            return [];\n        }\n    }\n    // 🏎️ FORMULE 1 - Import complet avec vraie API\n    async importFormula1() {\n        const events = [];\n        console.log(\"\\uD83C\\uDFCE️ Import Formula 1 2024-2025...\");\n        for (const season of [\n            2024,\n            2025\n        ]){\n            try {\n                console.log(`📅 Saison F1 ${season}...`);\n                // Récupérer toutes les courses de la saison\n                const races = await this.makeRequest(\"formula1\", \"/races\", {\n                    season\n                });\n                console.log(`🏁 ${races.length} courses trouvées pour ${season}`);\n                for (const race of races){\n                    // Si la course est terminée, récupérer les résultats\n                    if (race.status && race.status.short === \"FT\") {\n                        try {\n                            // Récupérer les résultats détaillés\n                            const results = await this.makeRequest(\"formula1\", \"/races/results\", {\n                                race: race.id\n                            });\n                            if (results.length > 0) {\n                                const winner = results[0];\n                                const podium = results.slice(0, 3);\n                                events.push({\n                                    externalId: `f1_${season}_${race.id}`,\n                                    sport: \"f1\",\n                                    competition: \"Formula 1\",\n                                    homeTeam: winner.driver?.name || \"Winner\",\n                                    awayTeam: \"Field\",\n                                    homeScore: \"1st\",\n                                    awayScore: results.length.toString(),\n                                    date: new Date(race.date),\n                                    status: \"FINISHED\",\n                                    venue: race.circuit?.name || race.venue,\n                                    season: season.toString(),\n                                    eventType: \"race\",\n                                    details: {\n                                        grandPrix: race.name,\n                                        circuit: race.circuit,\n                                        laps: race.laps,\n                                        distance: race.distance,\n                                        podium: podium.map((r)=>({\n                                                position: r.position,\n                                                driver: r.driver?.name,\n                                                team: r.team?.name,\n                                                time: r.time,\n                                                points: r.points\n                                            })),\n                                        fullResults: results.slice(0, 20),\n                                        fastestLap: race.fastestLap,\n                                        weather: race.weather\n                                    }\n                                });\n                                console.log(`  ✅ ${race.name} - Vainqueur: ${winner.driver?.name}`);\n                            }\n                        } catch (error) {\n                            console.error(`❌ Erreur résultats course ${race.id}:`, error);\n                        }\n                    }\n                }\n                // Pause entre saisons\n                await this.sleep(2000);\n            } catch (error) {\n                console.error(`❌ Erreur F1 ${season}:`, error);\n            }\n        }\n        console.log(`🏎️ F1 terminé: ${events.length} courses importées`);\n        return events;\n    }\n    // 🥊 MMA - Import complet UFC, Bellator, etc.\n    async importMMA() {\n        const events = [];\n        console.log(\"\\uD83E\\uDD4A Import MMA 2024-2025...\");\n        const organizations = [\n            \"UFC\",\n            \"Bellator\",\n            \"ONE Championship\"\n        ];\n        for (const org of organizations){\n            try {\n                console.log(`🥊 Import ${org}...`);\n                for (const year of [\n                    2024,\n                    2025\n                ]){\n                    // Récupérer les événements de l'organisation\n                    const mmaEvents = await this.makeRequest(\"mma\", \"/events\", {\n                        organization: org,\n                        season: year\n                    });\n                    console.log(`  📊 ${mmaEvents.length} événements ${org} trouvés pour ${year}`);\n                    for (const event of mmaEvents){\n                        try {\n                            // Récupérer les combats de l'événement\n                            const fights = await this.makeRequest(\"mma\", \"/fights\", {\n                                event: event.id\n                            });\n                            // Traiter les combats terminés\n                            const finishedFights = fights.filter((fight)=>fight.status === \"finished\" || fight.status === \"FT\");\n                            for (const fight of finishedFights.slice(0, 5)){\n                                events.push({\n                                    externalId: `mma_${org.toLowerCase()}_${event.id}_${fight.id}`,\n                                    sport: \"mma\",\n                                    competition: org,\n                                    homeTeam: fight.fighters?.fighter1?.name || fight.redCorner?.name || \"Fighter 1\",\n                                    awayTeam: fight.fighters?.fighter2?.name || fight.blueCorner?.name || \"Fighter 2\",\n                                    homeScore: fight.result?.winner === 1 ? \"W\" : \"L\",\n                                    awayScore: fight.result?.winner === 2 ? \"W\" : \"L\",\n                                    date: new Date(event.date || fight.date),\n                                    status: \"FINISHED\",\n                                    venue: event.venue || \"MMA Arena\",\n                                    season: year.toString(),\n                                    eventType: \"fight\",\n                                    details: {\n                                        eventName: event.name,\n                                        weightClass: fight.weightClass || fight.category,\n                                        method: fight.result?.method,\n                                        round: fight.result?.round,\n                                        time: fight.result?.time,\n                                        referee: fight.referee,\n                                        titleFight: fight.titleFight || fight.title || false,\n                                        fighter1: {\n                                            name: fight.fighters?.fighter1?.name,\n                                            record: fight.fighters?.fighter1?.record,\n                                            nationality: fight.fighters?.fighter1?.country\n                                        },\n                                        fighter2: {\n                                            name: fight.fighters?.fighter2?.name,\n                                            record: fight.fighters?.fighter2?.record,\n                                            nationality: fight.fighters?.fighter2?.country\n                                        }\n                                    }\n                                });\n                                console.log(`    ✅ ${fight.fighters?.fighter1?.name || \"Fighter 1\"} vs ${fight.fighters?.fighter2?.name || \"Fighter 2\"}`);\n                            }\n                        } catch (error) {\n                            console.error(`❌ Erreur combats event ${event.id}:`, error);\n                        }\n                    }\n                    await this.sleep(1500) // Pause entre années\n                    ;\n                }\n            } catch (error) {\n                console.error(`❌ Erreur ${org}:`, error);\n            }\n        }\n        console.log(`🥊 MMA terminé: ${events.length} combats importés`);\n        return events;\n    }\n    // 🏉 RUGBY - Import avec ton API existante\n    async importRugby() {\n        const events = [];\n        console.log(\"\\uD83C\\uDFC9 Import Rugby 2024-2025...\");\n        const competitions = Object.entries(ENHANCED_SPORTS_APIS.rugby.leagues);\n        for (const [competitionName, leagueId] of competitions){\n            try {\n                console.log(`🏉 Import ${competitionName}...`);\n                for (const season of [\n                    \"2024\",\n                    \"2024-2025\",\n                    \"2025\"\n                ]){\n                    // Récupérer les matchs de la compétition\n                    const matches = await this.makeRequest(\"rugby\", \"/games\", {\n                        league: leagueId,\n                        season: season\n                    });\n                    // Filtrer les matchs terminés\n                    const finishedMatches = matches.filter((match)=>match.status?.short === \"FT\" || match.status === \"FINISHED\");\n                    console.log(`  📊 ${finishedMatches.length} matchs ${competitionName} terminés pour ${season}`);\n                    for (const match of finishedMatches){\n                        events.push({\n                            externalId: `rugby_${competitionName.toLowerCase().replace(\" \", \"_\")}_${match.id}`,\n                            sport: \"rugby\",\n                            competition: competitionName,\n                            homeTeam: match.teams?.home?.name || match.homeTeam,\n                            awayTeam: match.teams?.away?.name || match.awayTeam,\n                            homeScore: match.scores?.home || match.homeScore || 0,\n                            awayScore: match.scores?.away || match.awayScore || 0,\n                            date: new Date(match.date),\n                            status: \"FINISHED\",\n                            venue: match.venue,\n                            season: season,\n                            eventType: \"match\",\n                            details: {\n                                halftimeScore: match.halftime || {},\n                                tries: match.tries || [],\n                                conversions: match.conversions || [],\n                                penalties: match.penalties || [],\n                                cards: match.cards || [],\n                                referee: match.referee,\n                                attendance: match.attendance,\n                                weather: match.weather,\n                                logos: {\n                                    home: match.teams?.home?.logo,\n                                    away: match.teams?.away?.logo\n                                }\n                            }\n                        });\n                        console.log(`    ✅ ${match.teams?.home?.name || \"Home\"} ${match.scores?.home || 0}-${match.scores?.away || 0} ${match.teams?.away?.name || \"Away\"}`);\n                    }\n                    await this.sleep(1000);\n                }\n            } catch (error) {\n                console.error(`❌ Erreur ${competitionName}:`, error);\n            }\n        }\n        console.log(`🏉 Rugby terminé: ${events.length} matchs importés`);\n        return events;\n    }\n    // 🚀 IMPORT COMPLET NOUVEAUX SPORTS 2024-2025\n    async importNewSports2024_2025() {\n        console.log(\"\\uD83D\\uDE80 IMPORT COMPLET NOUVEAUX SPORTS 2024-2025\");\n        console.log(\"\\uD83C\\uDFCE️ F1 + \\uD83E\\uDD4A MMA + \\uD83C\\uDFC9 Rugby\");\n        const startTime = Date.now();\n        let totalSaved = 0;\n        // Import en parallèle pour optimiser\n        const [f1Events, mmaEvents, rugbyEvents] = await Promise.all([\n            this.importFormula1(),\n            this.importMMA(),\n            this.importRugby()\n        ]);\n        const allEvents = [\n            ...f1Events,\n            ...mmaEvents,\n            ...rugbyEvents\n        ];\n        console.log(`📊 Total événements récupérés: ${allEvents.length}`);\n        // Sauvegarder en base\n        const breakdown = {\n            f1: 0,\n            mma: 0,\n            rugby: 0\n        };\n        for (const event of allEvents){\n            try {\n                const saved = await this.saveEvent(event);\n                if (saved) {\n                    totalSaved++;\n                    breakdown[event.sport]++;\n                }\n            } catch (error) {\n                console.error(`❌ Erreur sauvegarde ${event.sport}:`, error);\n            }\n        }\n        const duration = Math.round((Date.now() - startTime) / 1000);\n        console.log(`\\n🎉 IMPORT NOUVEAUX SPORTS TERMINÉ en ${duration}s !`);\n        console.log(`🏎️ F1: ${breakdown.f1} courses`);\n        console.log(`🥊 MMA: ${breakdown.mma} combats`);\n        console.log(`🏉 Rugby: ${breakdown.rugby} matchs`);\n        console.log(`📊 TOTAL: ${totalSaved} événements sauvegardés`);\n        return {\n            f1: breakdown.f1,\n            mma: breakdown.mma,\n            rugby: breakdown.rugby,\n            total: totalSaved\n        };\n    }\n    // 💾 SAUVEGARDER UN ÉVÉNEMENT - MÉTHODE PUBLIQUE  \n    async saveEvent(event) {\n        try {\n            const existing = await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.findFirst({\n                where: {\n                    homeTeam: event.homeTeam,\n                    awayTeam: event.awayTeam,\n                    competition: event.competition,\n                    date: {\n                        gte: new Date(event.date.getTime() - 24 * 60 * 60 * 1000),\n                        lte: new Date(event.date.getTime() + 24 * 60 * 60 * 1000)\n                    }\n                }\n            });\n            if (existing) return false;\n            await _prisma__WEBPACK_IMPORTED_MODULE_0__.prisma.match.create({\n                data: {\n                    apiMatchId: Math.floor(Math.random() * 900000) + 100000,\n                    sport: event.sport.toUpperCase(),\n                    homeTeam: event.homeTeam,\n                    awayTeam: event.awayTeam,\n                    homeScore: typeof event.homeScore === \"number\" ? event.homeScore : event.homeScore === \"W\" ? 1 : event.homeScore === \"L\" ? 0 : parseInt(String(event.homeScore)) || 0,\n                    awayScore: typeof event.awayScore === \"number\" ? event.awayScore : event.awayScore === \"W\" ? 1 : event.awayScore === \"L\" ? 0 : parseInt(String(event.awayScore)) || 0,\n                    date: event.date,\n                    status: event.status,\n                    competition: event.competition,\n                    season: event.season,\n                    venue: event.venue,\n                    homeTeamLogo: this.getTeamLogo(event.homeTeam, event.sport),\n                    awayTeamLogo: this.getTeamLogo(event.awayTeam, event.sport),\n                    details: event.details ? JSON.stringify(event.details) : null\n                }\n            });\n            return true;\n        } catch (error) {\n            console.error(`❌ Erreur sauvegarde:`, error);\n            return false;\n        }\n    }\n    getTeamLogo(teamName, sport) {\n        const sportColors = {\n            f1: \"FF1E00\",\n            mma: \"DC143C\",\n            rugby: \"228B22\" // Vert rugby\n        };\n        return `https://via.placeholder.com/50x50/${sportColors[sport] || \"007ACC\"}/ffffff?text=${teamName.charAt(0)}`;\n    }\n    async sleep(ms) {\n        return new Promise((resolve)=>setTimeout(resolve, ms));\n    }\n}\nconst enhancedMultiSportsAPI = new EnhancedMultiSportsAPI();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/enhanced-multi-sports-api.ts\n");

/***/ }),

/***/ "(api)/./lib/prisma.ts":
/*!***********************!*\
  !*** ./lib/prisma.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   prisma: () => (/* binding */ prisma)\n/* harmony export */ });\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @prisma/client */ \"@prisma/client\");\n/* harmony import */ var _prisma_client__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_prisma_client__WEBPACK_IMPORTED_MODULE_0__);\n\nconst globalForPrisma = globalThis;\nconst prisma = globalForPrisma.prisma ?? new _prisma_client__WEBPACK_IMPORTED_MODULE_0__.PrismaClient();\nif (true) globalForPrisma.prisma = prisma;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvcHJpc21hLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2QztBQUU3QyxNQUFNQyxrQkFBa0JDO0FBSWpCLE1BQU1DLFNBQVNGLGdCQUFnQkUsTUFBTSxJQUFJLElBQUlILHdEQUFZQSxHQUFFO0FBRWxFLElBQUlJLElBQXlCLEVBQWNILGdCQUFnQkUsTUFBTSxHQUFHQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zvb3RyYXRlLy4vbGliL3ByaXNtYS50cz85ODIyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFByaXNtYUNsaWVudCB9IGZyb20gJ0BwcmlzbWEvY2xpZW50J1xuXG5jb25zdCBnbG9iYWxGb3JQcmlzbWEgPSBnbG9iYWxUaGlzIGFzIHVua25vd24gYXMge1xuICBwcmlzbWE6IFByaXNtYUNsaWVudCB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgY29uc3QgcHJpc21hID0gZ2xvYmFsRm9yUHJpc21hLnByaXNtYSA/PyBuZXcgUHJpc21hQ2xpZW50KClcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIGdsb2JhbEZvclByaXNtYS5wcmlzbWEgPSBwcmlzbWFcbiJdLCJuYW1lcyI6WyJQcmlzbWFDbGllbnQiLCJnbG9iYWxGb3JQcmlzbWEiLCJnbG9iYWxUaGlzIiwicHJpc21hIiwicHJvY2VzcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/prisma.ts\n");

/***/ }),

/***/ "(api)/./pages/api/import-new-sports.ts":
/*!****************************************!*\
  !*** ./pages/api/import-new-sports.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next-auth/next */ \"next-auth/next\");\n/* harmony import */ var next_auth_next__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_auth_next__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _lib_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/auth */ \"(api)/./lib/auth.ts\");\n/* harmony import */ var _lib_enhanced_multi_sports_api__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../lib/enhanced-multi-sports-api */ \"(api)/./lib/enhanced-multi-sports-api.ts\");\n// pages/api/import-new-sports.ts\n// Endpoint principal pour importer F1, MMA et Rugby 2024-2025\n\n\n\nasync function handler(req, res) {\n    const session = await (0,next_auth_next__WEBPACK_IMPORTED_MODULE_0__.getServerSession)(req, res, _lib_auth__WEBPACK_IMPORTED_MODULE_1__.authOptions);\n    if (!session?.user?.id) {\n        return res.status(401).json({\n            error: \"Connexion requise\"\n        });\n    }\n    if (req.method !== \"POST\") {\n        return res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n    const { action = \"import_all\", sport } = req.body;\n    try {\n        console.log(`🚀 Import nouveaux sports: ${action}`);\n        if (action === \"import_all\") {\n            // 🌍 IMPORT COMPLET F1 + MMA + Rugby 2024-2025\n            console.log(\"\\uD83C\\uDFAF IMPORT COMPLET NOUVEAUX SPORTS 2024-2025\");\n            console.log(\"\\uD83C\\uDFCE️ Formule 1 + \\uD83E\\uDD4A MMA + \\uD83C\\uDFC9 Rugby\");\n            const result = await _lib_enhanced_multi_sports_api__WEBPACK_IMPORTED_MODULE_2__.enhancedMultiSportsAPI.importNewSports2024_2025();\n            res.status(200).json({\n                success: true,\n                action: \"import_all_new_sports\",\n                message: \"\\uD83C\\uDF89 IMPORT NOUVEAUX SPORTS TERMIN\\xc9 !\",\n                result,\n                summary: {\n                    total: `${result.total} événements importés`,\n                    f1: `🏎️ ${result.f1} courses F1 (Grands Prix 2024-2025)`,\n                    mma: `🥊 ${result.mma} combats MMA (UFC, Bellator...)`,\n                    rugby: `🏉 ${result.rugby} matchs Rugby (Top 14, Six Nations...)`\n                },\n                period: \"2024-2025\",\n                note: \"Tous les nouveaux sports sont maintenant disponibles pour notation !\"\n            });\n        } else if (action === \"import_sport\" && sport) {\n            // Import d'un sport spécifique\n            let imported = 0;\n            let sportName = \"\";\n            let events = [];\n            switch(sport){\n                case \"f1\":\n                    events = await _lib_enhanced_multi_sports_api__WEBPACK_IMPORTED_MODULE_2__.enhancedMultiSportsAPI.importFormula1();\n                    imported = events.length;\n                    sportName = \"\\uD83C\\uDFCE️ Formule 1\";\n                    break;\n                case \"mma\":\n                    events = await _lib_enhanced_multi_sports_api__WEBPACK_IMPORTED_MODULE_2__.enhancedMultiSportsAPI.importMMA();\n                    imported = events.length;\n                    sportName = \"\\uD83E\\uDD4A MMA\";\n                    break;\n                case \"rugby\":\n                    events = await _lib_enhanced_multi_sports_api__WEBPACK_IMPORTED_MODULE_2__.enhancedMultiSportsAPI.importRugby();\n                    imported = events.length;\n                    sportName = \"\\uD83C\\uDFC9 Rugby\";\n                    break;\n                default:\n                    return res.status(400).json({\n                        error: \"Sport non support\\xe9\"\n                    });\n            }\n            // Sauvegarder les événements\n            let saved = 0;\n            for (const event of events){\n                const wasSaved = await _lib_enhanced_multi_sports_api__WEBPACK_IMPORTED_MODULE_2__.enhancedMultiSportsAPI.saveEvent(event);\n                if (wasSaved) saved++;\n            }\n            res.status(200).json({\n                success: true,\n                action: \"import_sport\",\n                sport: sportName,\n                imported: saved,\n                message: `${sportName} : ${saved} événements importés`,\n                period: \"2024-2025\",\n                examples: events.slice(0, 3).map((e)=>`${e.homeTeam} vs ${e.awayTeam}`)\n            });\n        } else {\n            return res.status(400).json({\n                error: \"Action inconnue\",\n                availableActions: [\n                    \"import_all\",\n                    \"import_sport\"\n                ],\n                availableSports: [\n                    \"f1\",\n                    \"mma\",\n                    \"rugby\"\n                ]\n            });\n        }\n    } catch (error) {\n        console.error(\"❌ Erreur import nouveaux sports:\", error);\n        res.status(500).json({\n            success: false,\n            error: \"Import failed\",\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            action,\n            help: \"V\\xe9rifie que RAPIDAPI_KEY est configur\\xe9e dans .env\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/import-new-sports.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fimport-new-sports&preferredRegion=&absolutePagePath=.%2Fpages%2Fapi%2Fimport-new-sports.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();