// scripts/debug-mma.js - Script pour v√©rifier les combats MMA en base
// Ex√©cuter avec: node scripts/debug-mma.js

const { PrismaClient } = require('@prisma/client')
const prisma = new PrismaClient()

async function debugMMA() {
  try {
    console.log('ü•ä === DEBUG COMBATS MMA ===')
    
    // 1. V√©rifier le total de matchs
    const totalMatches = await prisma.match.count()
    console.log(`üìä Total matchs en base: ${totalMatches}`)
    
    // 2. V√©rifier les combats MMA
    const mmaMatches = await prisma.match.findMany({
      where: { sport: 'MMA' },
      orderBy: { date: 'desc' },
      take: 10
    })
    
    console.log(`ü•ä Combats MMA trouv√©s: ${mmaMatches.length}`)
    
    if (mmaMatches.length > 0) {
      console.log('\nü•ä === EXEMPLES DE COMBATS MMA ===')
      mmaMatches.forEach((match, index) => {
        console.log(`${index + 1}. ${match.homeTeam} vs ${match.awayTeam}`)
        console.log(`   üìÖ Date: ${match.date.toLocaleDateString()}`)
        console.log(`   üèÜ Comp√©tition: ${match.competition}`)
        console.log(`   üìä Sport: ${match.sport}`)
        console.log(`   üéØ Score: ${match.homeScore} - ${match.awayScore}`)
        console.log(`   üèüÔ∏è Lieu: ${match.venue}`)
        console.log(`   ‚≠ê Notes: ${match.totalRatings} (avg: ${match.avgRating})`)
        console.log(`   üÜî ID: ${match.id}`)
        console.log('')
      })
    }
    
    // 3. V√©rifier les sports disponibles
    const sportStats = await prisma.match.groupBy({
      by: ['sport'],
      _count: { id: true }
    })
    
    console.log('\nüìä === R√âPARTITION PAR SPORT ===')
    sportStats.forEach(stat => {
      console.log(`${stat.sport}: ${stat._count.id} matchs`)
    })
    
    // 4. Test de recherche
    console.log('\nüîç === TEST DE RECHERCHE ===')
    const searchResults = await prisma.match.findMany({
      where: {
        sport: 'MMA',
        OR: [
          { homeTeam: { contains: 'Jones', mode: 'insensitive' } },
          { awayTeam: { contains: 'Jones', mode: 'insensitive' } }
        ]
      }
    })
    
    console.log(`üîç Recherche "Jones" en MMA: ${searchResults.length} r√©sultats`)
    
    // 5. V√©rifier les d√©tails des combats
    if (mmaMatches.length > 0) {
      console.log('\nüîç === D√âTAILS DU PREMIER COMBAT ===')
      const firstMatch = mmaMatches[0]
      console.log(`Combat: ${firstMatch.homeTeam} vs ${firstMatch.awayTeam}`)
      console.log(`D√©tails disponibles: ${firstMatch.details ? 'OUI' : 'NON'}`)
      
      if (firstMatch.details) {
        console.log('D√©tails:', JSON.stringify(firstMatch.details, null, 2))
      }
    }
    
    // 6. V√©rifier les probl√®mes potentiels
    console.log('\n‚ö†Ô∏è  === DIAGNOSTIC ===')
    
    if (mmaMatches.length === 0) {
      console.log('‚ùå PROBL√àME: Aucun combat MMA trouv√©')
      console.log('   üîß Solutions possibles:')
      console.log('   - V√©rifier que l\'import UFC a fonctionn√©')
      console.log('   - Relancer l\'import depuis /admin/dashboard-ufc')
      console.log('   - V√©rifier que le champ sport est bien "MMA" (pas "mma")')
    } else {
      console.log('‚úÖ Combats MMA pr√©sents en base')
      
      // V√©rifier les filtres
      const recentMMA = await prisma.match.findMany({
        where: {
          sport: 'MMA',
          status: 'FINISHED'
        },
        take: 5
      })
      
      console.log(`   üìä Combats MMA termin√©s: ${recentMMA.length}`)
      
      if (recentMMA.length === 0) {
        console.log('   ‚ö†Ô∏è  Aucun combat MMA avec status "FINISHED"')
      }
    }
    
    console.log('\nüéØ === RECOMMANDATIONS ===')
    
    if (mmaMatches.length === 0) {
      console.log('1. Aller sur /admin/dashboard-ufc')
      console.log('2. Cliquer sur "Tester API UFC"')
      console.log('3. Cliquer sur "Importer Combats UFC"')
      console.log('4. V√©rifier que l\'import fonctionne')
    } else {
      console.log('1. Les combats MMA sont pr√©sents ‚úÖ')
      console.log('2. V√©rifier que les filtres sur la page d\'accueil utilisent sport: "mma" (minuscule)')
      console.log('3. V√©rifier que l\'API /api/matches convertit bien "MMA" -> "mma"')
      console.log('4. Red√©marrer le serveur Next.js')
    }
    
  } catch (error) {
    console.error('‚ùå Erreur debug:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le debug
debugMMA().catch(console.error)